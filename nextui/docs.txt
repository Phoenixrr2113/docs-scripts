const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion variant="bordered">
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion isCompact>
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["1"]));

  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
    >
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const AppTs = `import type {Selection} from "@nextui-org/react";

import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(["1"]));
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
  return (
    <Accordion
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
    >
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion
      motionProps={{
        variants: {
          enter: {
            y: 0,
            opacity: 1,
            height: "auto",
            transition: {
              height: {
                type: "spring",
                stiffness: 500,
                damping: 30,
                duration: 1,
              },
              opacity: {
                easings: "ease",
                duration: 1,
              },
            },
          },
          exit: {
            y: -10,
            opacity: 0,
            height: 0,
            transition: {
              height: {
                easings: "ease",
                duration: 0.25,
              },
              opacity: {
                easings: "ease",
                duration: 0.3,
              },
            },
          },
        },
      }}
    >
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const MonitorMobileIcon = `export const MonitorMobileIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M10 16.95H6.21C2.84 16.95 2 16.11 2 12.74V6.74003C2 3.37003 2.84 2.53003 6.21 2.53003H16.74C20.11 2.53003 20.95 3.37003 20.95 6.74003"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M10 21.4699V16.95"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M2 12.95H10"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M6.73999 21.47H9.99999"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M22 12.8V18.51C22 20.88 21.41 21.47 19.04 21.47H15.49C13.12 21.47 12.53 20.88 12.53 18.51V12.8C12.53 10.43 13.12 9.83997 15.49 9.83997H19.04C21.41 9.83997 22 10.43 22 12.8Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M17.2445 18.25H17.2535"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const ShieldSecurityIcon = `export const ShieldSecurityIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M10.49 2.23006L5.49997 4.11006C4.34997 4.54006 3.40997 5.90006 3.40997 7.12006V14.5501C3.40997 15.7301 4.18997 17.2801 5.13997 17.9901L9.43997 21.2001C10.85 22.2601 13.17 22.2601 14.58 21.2001L18.88 17.9901C19.83 17.2801 20.61 15.7301 20.61 14.5501V7.12006C20.61 5.89006 19.67 4.53006 18.52 4.10006L13.53 2.23006C12.68 1.92006 11.32 1.92006 10.49 2.23006Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M12 12.5C13.1046 12.5 14 11.6046 14 10.5C14 9.39543 13.1046 8.5 12 8.5C10.8954 8.5 10 9.39543 10 10.5C10 11.6046 10.8954 12.5 12 12.5Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit="10"
      strokeWidth="1.5"
    />
    <path
      d="M12 12.5V15.5"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit="10"
      strokeWidth="1.5"
    />
  </svg>
);`;

const InfoIcon = `export const InfoIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M12 8V13"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M11.9945 16H12.0035"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const InvalidCardIcon = `export const InvalidCardIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M10 16.95H6.21C2.84 16.95 2 16.11 2 12.74V6.74003C2 3.37003 2.84 2.53003 6.21 2.53003H16.74C20.11 2.53003 20.95 3.37003 20.95 6.74003"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M10 21.4699V16.95"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M2 12.95H10"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M6.73999 21.47H9.99999"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M22 12.8V18.51C22 20.88 21.41 21.47 19.04 21.47H15.49C13.12 21.47 12.53 20.88 12.53 18.51V12.8C12.53 10.43 13.12 9.83997 15.49 9.83997H19.04C21.41 9.83997 22 10.43 22 12.8Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M17.2445 18.25H17.2535"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";
import {MonitorMobileIcon} from "./MonitorMobileIcon";
import {ShieldSecurityIcon} from "./ShieldSecurityIcon";
import {InfoIcon} from "./InfoIcon";
import {InvalidCardIcon} from "./InvalidCardIcon";

export default function App() {
  const itemClasses = {
    base: "py-0 w-full",
    title: "font-normal text-medium",
    trigger: "px-2 py-0 data-[hover=true]:bg-default-100 rounded-lg h-14 flex items-center",
    indicator: "text-medium",
    content: "text-small px-2",
  };

  const defaultContent =
  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";


  return (
    <Accordion
      showDivider={false}
      className="p-2 flex flex-col gap-1 w-full max-w-[300px]"
      variant="shadow"
      itemClasses={itemClasses}
    >
      <AccordionItem
        key="1"
        aria-label="Connected devices"
        startContent={<MonitorMobileIcon className="text-primary" />}
        subtitle={
          <p className="flex">
            2 issues to <span className="text-primary ml-1">fix now</span>
          </p>
        }
        title="Connected devices"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="2"
        aria-label="Apps Permissions"
        startContent={<ShieldSecurityIcon />}
        subtitle="3 apps have read permissions"
        title="Apps Permissions"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="3"
        aria-label="Pending tasks"
        classNames={{ subtitle: "text-warning" }}
        startContent={<InfoIcon className="text-warning" />}
        subtitle="Complete your profile"
        title="Pending tasks"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="4"
        aria-label="Card expired"
        classNames={{ subtitle: "text-danger" }}
        startContent={<InvalidCardIcon className="text-danger" />}
        subtitle="Please, update now"
        title={
          <p className="flex gap-1 items-center">
            Card expired
            <span className="text-default-400 text-small">*4812</span>
          </p>
        }
      >
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
  "/MonitorMobileIcon.jsx": MonitorMobileIcon,
  "/ShieldSecurityIcon.jsx": ShieldSecurityIcon,
  "/InfoIcon.jsx": InfoIcon,
  "/InvalidCardIcon.jsx": InvalidCardIcon,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion defaultExpandedKeys={["2"]}>
      <AccordionItem key="1" aria-label="Accordion 1" subtitle="Press to expand" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="2"
        aria-label="Accordion 2"
        subtitle={
          <span>
            Press to expand <strong>key 2</strong>
          </span>
        }
        title="Accordion 2"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" subtitle="Press to expand" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion disabledKeys={["2"]}>
      <AccordionItem key="1" aria-label="Accordion 1" subtitle="Press to expand" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="2"
        aria-label="Accordion 2"
        subtitle={
          <span>
            Press to expand <strong>key 2</strong>
          </span>
        }
        title="Accordion 2"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" subtitle="Press to expand" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import subtitle from "./subtitle";
import multiple from "./multiple";
import compact from "./compact";
import lightVariant from "./light-variant";
import shadowVariant from "./shadow-variant";
import splittedVariant from "./splitted-variant";
import borderedVariant from "./bordered-variant";
import defaultExpandedKeys from "./default-expanded-keys";
import disabledKeys from "./disabled-keys";
import startContent from "./start-content";
import indicator from "./indicator";
import indicatorFunction from "./indicator-function";
import customMotion from "./custom-motion";
import controlled from "./controlled";
import customStyles from "./custom-styles";

export const accordionContent = {
  usage,
  subtitle,
  multiple,
  compact,
  lightVariant,
  shadowVariant,
  splittedVariant,
  borderedVariant,
  defaultExpandedKeys,
  disabledKeys,
  startContent,
  indicator,
  indicatorFunction,
  customMotion,
  controlled,
  customStyles,
};

const AnchorIcon = `export const AnchorIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M8.465,11.293c1.133-1.133,3.109-1.133,4.242,0L13.414,12l1.414-1.414l-0.707-0.707c-0.943-0.944-2.199-1.465-3.535-1.465 S7.994,8.935,7.051,9.879L4.929,12c-1.948,1.949-1.948,5.122,0,7.071c0.975,0.975,2.255,1.462,3.535,1.462 c1.281,0,2.562-0.487,3.536-1.462l0.707-0.707l-1.414-1.414l-0.707,0.707c-1.17,1.167-3.073,1.169-4.243,0 c-1.169-1.17-1.169-3.073,0-4.243L8.465,11.293z"
      fill="currentColor"
    />
    <path
      d="M12,4.929l-0.707,0.707l1.414,1.414l0.707-0.707c1.169-1.167,3.072-1.169,4.243,0c1.169,1.17,1.169,3.073,0,4.243 l-2.122,2.121c-1.133,1.133-3.109,1.133-4.242,0L10.586,12l-1.414,1.414l0.707,0.707c0.943,0.944,2.199,1.465,3.535,1.465 s2.592-0.521,3.535-1.465L19.071,12c1.948-1.949,1.948-5.122,0-7.071C17.121,2.979,13.948,2.98,12,4.929z"
      fill="currentColor"
    />
  </svg>
);`;

const MoonIcon = `export const MoonIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 512 512"
    width="24"
    {...props}
  >
    <path
      d="M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z"
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={32}
    />
  </svg>
);`;

const SunIcon = `export const SunIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 512 512"
    width="24"
    {...props}
  >
    <path
      d="M256 48v48M256 416v48M403.08 108.92l-33.94 33.94M142.86 369.14l-33.94 33.94M464 256h-48M96 256H48M403.08 403.08l-33.94-33.94M142.86 142.86l-33.94-33.94"
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeMiterlimit={10}
      strokeWidth={32}
    />
    <circle
      cx={256}
      cy={256}
      fill="none"
      r={80}
      stroke="currentColor"
      strokeLinecap="round"
      strokeMiterlimit={10}
      strokeWidth={32}
    />
  </svg>
);`;

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";
import {AnchorIcon} from "./AnchorIcon";
import {MoonIcon} from "./MoonIcon";
import {SunIcon} from "./SunIcon";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion defaultExpandedKeys={["theme"]}>
      <AccordionItem
        key="theme"
        aria-label="Theme"
        indicator={({ isOpen }) => (isOpen ? <SunIcon /> : <MoonIcon />)}
        title="Theme"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="anchor"
        aria-label="Anchor"
        indicator={<AnchorIcon />}
        title="Anchor"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="sun"
        aria-label="Sun"
        indicator={<SunIcon />}
        title="Sun"
      >
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AnchorIcon.jsx": AnchorIcon,
  "/MoonIcon.jsx": MoonIcon,
  "/SunIcon.jsx": SunIcon,
};

export default {
  ...react,
};

const AnchorIcon = `export const AnchorIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M8.465,11.293c1.133-1.133,3.109-1.133,4.242,0L13.414,12l1.414-1.414l-0.707-0.707c-0.943-0.944-2.199-1.465-3.535-1.465 S7.994,8.935,7.051,9.879L4.929,12c-1.948,1.949-1.948,5.122,0,7.071c0.975,0.975,2.255,1.462,3.535,1.462 c1.281,0,2.562-0.487,3.536-1.462l0.707-0.707l-1.414-1.414l-0.707,0.707c-1.17,1.167-3.073,1.169-4.243,0 c-1.169-1.17-1.169-3.073,0-4.243L8.465,11.293z"
      fill="currentColor"
    />
    <path
      d="M12,4.929l-0.707,0.707l1.414,1.414l0.707-0.707c1.169-1.167,3.072-1.169,4.243,0c1.169,1.17,1.169,3.073,0,4.243 l-2.122,2.121c-1.133,1.133-3.109,1.133-4.242,0L10.586,12l-1.414,1.414l0.707,0.707c0.943,0.944,2.199,1.465,3.535,1.465 s2.592-0.521,3.535-1.465L19.071,12c1.948-1.949,1.948-5.122,0-7.071C17.121,2.979,13.948,2.98,12,4.929z"
      fill="currentColor"
    />
  </svg>
);`;

const MoonIcon = `export const MoonIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 512 512"
    width="24"
    {...props}
  >
    <path
      d="M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z"
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={32}
    />
  </svg>
);`;

const SunIcon = `export const SunIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 512 512"
    width="24"
    {...props}
  >
    <path
      d="M256 48v48M256 416v48M403.08 108.92l-33.94 33.94M142.86 369.14l-33.94 33.94M464 256h-48M96 256H48M403.08 403.08l-33.94-33.94M142.86 142.86l-33.94-33.94"
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeMiterlimit={10}
      strokeWidth={32}
    />
    <circle
      cx={256}
      cy={256}
      fill="none"
      r={80}
      stroke="currentColor"
      strokeLinecap="round"
      strokeMiterlimit={10}
      strokeWidth={32}
    />
  </svg>
);`;

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";
import {AnchorIcon} from './AnchorIcon';
import {MoonIcon} from './MoonIcon';
import {SunIcon} from './SunIcon';

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion>
      <AccordionItem key="anchor" aria-label="Anchor" indicator={<AnchorIcon />} title="Anchor">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="moon" aria-label="Moon" indicator={<MoonIcon />} title="Moon">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="sun" aria-label="Sun" indicator={<SunIcon />} title="Sun">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AnchorIcon.jsx": AnchorIcon,
  "/MoonIcon.jsx": MoonIcon,
  "/SunIcon.jsx": SunIcon,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion variant="light">
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion selectionMode="multiple">
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion variant="shadow">
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion variant="splitted">
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem, Avatar} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion selectionMode="multiple">
      <AccordionItem
        key="1"
        aria-label="Chung Miller"
        startContent={
          <Avatar
            isBordered
            color="primary"
            radius="lg"
            src="https://i.pravatar.cc/150?u=a042581f4e29026024d"
          />
        }
        subtitle="4 unread messages"
        title="Chung Miller"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="2"
        aria-label="Janelle Lenard"
        startContent={
          <Avatar
            isBordered
            color="success"
            radius="lg"
            src="https://i.pravatar.cc/150?u=a042581f4e29026704d"
          />
        }
        subtitle="3 incompleted steps"
        title="Janelle Lenard"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="3"
        aria-label="Zoey Lang"
        startContent={
          <Avatar
            isBordered
            color="warning"
            radius="lg"
            src="https://i.pravatar.cc/150?u=a04258114e29026702d"
          />
        }
        subtitle={
          <p className="flex">
            2 issues to<span className="text-primary ml-1">fix now</span>
          </p>
        }
        title="Zoey Lang"
      >
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion>
      <AccordionItem key="1" aria-label="Accordion 1" subtitle="Press to expand" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem
        key="2"
        aria-label="Accordion 2"
        subtitle={
          <span>
            Press to expand <strong>key 2</strong>
          </span>
        }
        title="Accordion 2"
      >
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" subtitle="Press to expand" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <Accordion>
      <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
        {defaultContent}
      </AccordionItem>
      <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
        {defaultContent}
      </AccordionItem>
    </Accordion>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Accordion, AccordionItem} from "@nextui-org/react";

export default function App() {
  const defaultContent =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

  return (
    <div className="w-full grid grid-cols-12 gap-4">
      <div className="col-span-12 lg:col-span-6 flex flex-col gap-4">
        <h3>Light</h3>
        <Accordion variant="light">
          <AccordionItem key="1" title="Accordion 1">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="2" title="Accordion 2">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="3" title="Accordion 3">
            {defaultContent}
          </AccordionItem>
        </Accordion>
      </div>
      <div className="col-span-12 lg:col-span-6 flex flex-col gap-4">
        <h3>Bordered</h3>
        <Accordion variant="bordered">
          <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
            {defaultContent}
          </AccordionItem>
        </Accordion>
      </div>
      <div className="col-span-12 lg:col-span-6 flex flex-col gap-4">
        <h3>Shadow</h3>
        <Accordion variant="shadow">
          <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
            {defaultContent}
          </AccordionItem>
        </Accordion>
      </div>
      <div className="col-span-12 lg:col-span-6 flex flex-col gap-4">
        <h3>Splitted</h3>
        <Accordion variant="splitted" fullWidth>
          <AccordionItem key="1" aria-label="Accordion 1" title="Accordion 1">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="2" aria-label="Accordion 2" title="Accordion 2">
            {defaultContent}
          </AccordionItem>
          <AccordionItem key="3" aria-label="Accordion 3" title="Accordion 3">
            {defaultContent}
          </AccordionItem>
        </Accordion>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {useAsyncList} from "@react-stately/data";

export default function App() {
  let list = useAsyncList({
    async load({signal, filterText}) {
      let res = await fetch(\`https://swapi.py4e.com/api/people/?search=\${filterText}\`, {signal});
      let json = await res.json();

      return {
        items: json.results,
      };
    },
  });

  return (
    <Autocomplete
      className="max-w-xs"
      inputValue={list.filterText}
      isLoading={list.isLoading}
      items={list.items}
      label="Select a character"
      placeholder="Type to search..."
      variant="bordered"
      onInputChange={list.setFilterText}
    >
      {(item) => (
        <AutocompleteItem key={item.name} className="capitalize">
          {item.name}
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
}`;

const AppTs = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {useAsyncList} from "@react-stately/data";

type SWCharacter = {
  name: string;
  height: string;
  mass: string;
  birth_year: string;
};

export default function App() {
  let list = useAsyncList<SWCharacter>({
    async load({signal, filterText}) {
      let res = await fetch(\`https://swapi.py4e.com/api/people/?search=\${filterText}\`, {signal});
      let json = await res.json();

      return {
        items: json.results,
      };
    },
  });

  return (
    <Autocomplete
      className="max-w-xs"
      inputValue={list.filterText}
      isLoading={list.isLoading}
      items={list.items}
      label="Select a character"
      placeholder="Type to search..."
      variant="bordered"
      onInputChange={list.setFilterText}
    >
      {(item) => (
        <AutocompleteItem key={item.name} className="capitalize">
          {item.name}
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const usePokemonListTs = `export type Pokemon = {
  name: string;
  url: string;
};

export type UsePokemonListProps = {
  /** Delay to wait before fetching more items */
  fetchDelay?: number;
};

export function usePokemonList({fetchDelay = 0}: UsePokemonListProps = {}) {
  const [items, setItems] = React.useState<Pokemon[]>([]);
  const [hasMore, setHasMore] = React.useState(true);
  const [isLoading, setIsLoading] = React.useState(false);
  const [offset, setOffset] = React.useState(0);
  const limit = 10; // Number of items per page, adjust as necessary

  const loadPokemon = async (currentOffset: number) => {
    const controller = new AbortController();
    const {signal} = controller;

    try {
      setIsLoading(true);

      if (offset > 0) {
        // Delay to simulate network latency
        await new Promise((resolve) => setTimeout(resolve, fetchDelay));
      }

      let res = await fetch(
        \`https://pokeapi.co/api/v2/pokemon?offset=\${currentOffset}&limit=\${limit}\`,
        {signal},
      );

      if (!res.ok) {
        throw new Error("Network response was not ok");
      }

      let json = await res.json();

      setHasMore(json.next !== null);
      // Append new results to existing ones
      setItems((prevItems) => [...prevItems, ...json.results]);
    } catch (error) {
      if (error.name === "AbortError") {
        console.log("Fetch aborted");
      } else {
        console.error("There was an error with the fetch operation:", error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  React.useEffect(() => {
    loadPokemon(offset);
  }, []);

  const onLoadMore = () => {
    const newOffset = offset + limit;

    setOffset(newOffset);
    loadPokemon(newOffset);
  };

  return {
    items,
    hasMore,
    isLoading,
    onLoadMore,
  };
}

`;

const usePokemonList = `export function usePokemonList({fetchDelay = 0} = {}) {
  const [items, setItems] = React.useState([]);
  const [hasMore, setHasMore] = React.useState(true);
  const [isLoading, setIsLoading] = React.useState(false);
  const [offset, setOffset] = React.useState(0);
  const limit = 10; // Number of items per page, adjust as necessary

  const loadPokemon = async (currentOffset) => {
    const controller = new AbortController();
    const {signal} = controller;

    try {
      setIsLoading(true);

      if (offset > 0) {
        // Delay to simulate network latency
        await new Promise((resolve) => setTimeout(resolve, fetchDelay));
      }

      let res = await fetch(
        \`https://pokeapi.co/api/v2/pokemon?offset=\${currentOffset}&limit=\${limit}\`,
        {signal},
      );

      if (!res.ok) {
        throw new Error("Network response was not ok");
      }

      let json = await res.json();

      setHasMore(json.next !== null);
      // Append new results to existing ones
      setItems((prevItems) => [...prevItems, ...json.results]);
    } catch (error) {
      if (error.name === "AbortError") {
        console.log("Fetch aborted");
      } else {
        console.error("There was an error with the fetch operation:", error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  React.useEffect(() => {
    loadPokemon(offset);
  }, []);

  const onLoadMore = () => {
    const newOffset = offset + limit;

    setOffset(newOffset);
    loadPokemon(newOffset);
  };

  return {
    items,
    hasMore,
    isLoading,
    onLoadMore,
  };
};`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
import {usePokemonList} from "./usePokemonList";

export default function App() {
  const [isOpen, setIsOpen] = React.useState(false);
  const {items, hasMore, isLoading, onLoadMore} = usePokemonList({fetchDelay: 1500});

  const [, scrollerRef] = useInfiniteScroll({
    hasMore,
    isEnabled: isOpen,
    shouldUseLoader: false, // We don't want to show the loader at the bottom of the list
    onLoadMore,
  });

  return (
    <Autocomplete
      className="max-w-xs"
      variant="bordered"
      isLoading={isLoading}
      defaultItems={items}
      label="Pick a Pokemon"
      placeholder="Select a Pokemon"
      scrollRef={scrollerRef}
      selectionMode="single"
      onOpenChange={setIsOpen}
    >
      {(item) => (
        <AutocompleteItem key={item.name} className="capitalize">
          {item.name}
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/usePokemonList.js": usePokemonList,
};

const reactTs = {
  "/App.tsx": App,
  "/usePokemonList.ts": usePokemonListTs,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const colors = [
    "default",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger",
  ];

  return (
    <div className="w-full flex flex-row flex-wrap gap-4">
      {colors.map((color) => (
        <Autocomplete
          key={color}
          color={color}
          defaultItems={animals}
          label="Favorite Animal"
          placeholder="Search an animal"
          defaultSelectedKey={"cat"}
          className="max-w-xs"
        >
          {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
        </Autocomplete>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const AppTs = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState<React.Key>("cat");

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Autocomplete
        label="Favorite Animal"
        variant="bordered"
        defaultItems={animals}
        placeholder="Search an animal"
        className="max-w-xs"
        selectedKey={value}
        onSelectionChange={setValue}
      >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
      </Autocomplete>
      <p className="text-default-500 text-small">Selected: {value}</p>
    </div>
  );
}`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState("cat");

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Autocomplete
        label="Favorite Animal"
        variant="bordered"
        defaultItems={animals}
        placeholder="Search an animal"
        className="max-w-xs"
        selectedKey={value}
        onSelectionChange={setValue}
      >
        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
      </Autocomplete>
      <p className="text-default-500 text-small">Selected: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.js": data,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <Autocomplete
        label="Favorite Animal"
        placeholder="Search an animal"
        className="max-w-xs"
        defaultItems={animals}
        listboxProps={{
            emptyContent: 'Your own empty content text.'
        }}
      >
        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
      </Autocomplete>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const myFilter = (textValue, inputValue) => {
    if (inputValue.length === 0) {
      return true;
    }

    // Normalize both strings so we can slice safely
    // take into account the ignorePunctuation option as well...
    textValue = textValue.normalize("NFC").toLocaleLowerCase();
    inputValue = inputValue.normalize("NFC").toLocaleLowerCase();

    return textValue.slice(0, inputValue.length) === inputValue;
  };

  return (
    <Autocomplete
      allowsCustomValue
      className="max-w-xs"
      defaultFilter={myFilter}
      defaultItems={animals}
      label="Search an animal"
      variant="bordered"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const AppTs = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const myFilter = (textValue: string, inputValue: string) => {
    if (inputValue.length === 0) {
      return true;
    }

    // Normalize both strings so we can slice safely
    // take into account the ignorePunctuation option as well...
    textValue = textValue.normalize("NFC").toLocaleLowerCase();
    inputValue = inputValue.normalize("NFC").toLocaleLowerCase();

    return textValue.slice(0, inputValue.length) === inputValue;
  };

  return (
    <Autocomplete
      className="max-w-xs"
      defaultFilter={myFilter}
      defaultItems={animals}
      label="Search an animal"
      variant="bordered"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const App = `import {Autocomplete, AutocompleteItem, Avatar} from "@nextui-org/react";
import {users} from "./data";

export default function App() {
  return (
    <Autocomplete
      defaultItems={users}
      variant="bordered"
      label="Assigned to"
      placeholder="Select a user"
      labelPlacement="inside"
      className="max-w-xs"
    >
      {(user) => (
        <AutocompleteItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const App = `import {Autocomplete, AutocompleteItem, AutocompleteSection} from "@nextui-org/react";

export default function App() {
  const headingClasses = "flex w-full sticky top-1 z-20 py-1.5 px-2 bg-default-100 shadow-small rounded-small";

  return (
    <Autocomplete
      label="Favorite Animal"
      variant="bordered"
      placeholder="Search an animal"
      className="max-w-xs"
      scrollShadowProps={{
        isEnabled: false,
      }}
    >
      <AutocompleteSection 
        title="Mammals"
        classNames={{
          heading: headingClasses,
        }}
      >
        <AutocompleteItem key="Lion">Lion</AutocompleteItem>
        <AutocompleteItem key="Tiger">Tiger</AutocompleteItem>
        <AutocompleteItem key="Elephant">Elephant</AutocompleteItem>
        <AutocompleteItem key="Kangaroo">Kangaroo</AutocompleteItem>
        <AutocompleteItem key="Panda">Panda</AutocompleteItem>
        <AutocompleteItem key="Giraffe">Giraffe</AutocompleteItem>
        <AutocompleteItem key="Zebra">Zebra</AutocompleteItem>
        <AutocompleteItem key="Cheetah">Cheetah</AutocompleteItem>
      </AutocompleteSection>
      <AutocompleteSection 
        title="Birds"
        classNames={{
          heading: headingClasses,
        }}
      >
        <AutocompleteItem key="Eagle">Eagle</AutocompleteItem>
        <AutocompleteItem key="Parrot">Parrot</AutocompleteItem>
        <AutocompleteItem key="Penguin">Penguin</AutocompleteItem>
        <AutocompleteItem key="Ostrich">Ostrich</AutocompleteItem>
        <AutocompleteItem key="Peacock">Peacock</AutocompleteItem>
        <AutocompleteItem key="Swan">Swan</AutocompleteItem>
        <AutocompleteItem key="Falcon">Falcon</AutocompleteItem>
        <AutocompleteItem key="Flamingo">Flamingo</AutocompleteItem>
      </AutocompleteSection>
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const SelectorIcon = `export const SelectorIcon = (props) => (
    <svg
      aria-hidden="true"
      fill="none"
      focusable="false"
      height="1em"
      role="presentation"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
      viewBox="0 0 24 24"
      width="1em"
      {...props}
    >
      <path d="M0 0h24v24H0z" fill="none" stroke="none" />
      <path d="M8 9l4 -4l4 4" />
      <path d="M16 15l-4 4l-4 -4" />
    </svg>
);`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {SelectorIcon} from "./SelectorIcon";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      label="Favorite Animal"
      placeholder="Search an animal"
      defaultItems={animals}
      labelPlacement="outside"
      className="max-w-xs"
      disableSelectorIconRotation
      selectorIcon={<SelectorIcon />}
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
  "/SelectorIcon.jsx": SelectorIcon,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const SearchIcon = `export const SearchIcon = ({
  size = 24,
  strokeWidth = 1.5,
  width,
  height,
  ...props
}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={height || size}
    role="presentation"
    viewBox="0 0 24 24"
    width={width || size}
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
  </svg>
);`;

const App = `import {Autocomplete, AutocompleteItem, Avatar, Button} from "@nextui-org/react";
import {SearchIcon} from "./SearchIcon";
import {users} from "./data";

export default function App() {
  return (
    <Autocomplete
      classNames={{
        base: "max-w-xs",
        listboxWrapper: "max-h-[320px]",
        selectorButton: "text-default-500"
      }}
      defaultItems={users}
      inputProps={{
        classNames: {
          input: "ml-1",
          inputWrapper: "h-[48px]",
        },
      }}
      listboxProps={{
        hideSelectedIcon: true,
        itemClasses: {
          base: [
            "rounded-medium",
            "text-default-500",
            "transition-opacity",
            "data-[hover=true]:text-foreground",
            "dark:data-[hover=true]:bg-default-50",
            "data-[pressed=true]:opacity-70",
            "data-[hover=true]:bg-default-200",
            "data-[selectable=true]:focus:bg-default-100",
            "data-[focus-visible=true]:ring-default-500",
          ],
        },
      }}
      aria-label="Select an employee"
      placeholder="Enter employee name"
      popoverProps={{
        offset: 10,
        classNames: {
          base: "rounded-large",
          content: "p-1 border-small border-default-100 bg-background",
        },
      }}
      startContent={<SearchIcon className="text-default-400" strokeWidth={2.5} size={20} />}
      radius="full"
      variant="bordered"
    >
      {(item) => (
        <AutocompleteItem key={item.id} textValue={item.name}>
          <div className="flex justify-between items-center">
            <div className="flex gap-2 items-center">
              <Avatar alt={item.name} className="flex-shrink-0" size="sm" src={item.avatar} />
              <div className="flex flex-col">
                <span className="text-small">{item.name}</span>
                <span className="text-tiny text-default-400">{item.team}</span>
              </div>
            </div>
            <Button
              className="border-small mr-0.5 font-medium shadow-small"
              radius="full"
              size="sm"
              variant="bordered"
            >
              Add
            </Button>
          </div>
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/SearchIcon.jsx": SearchIcon,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete 
      allowsCustomValue
      label="Search an animal" 
      variant="bordered"
      className="max-w-xs" 
      defaultItems={animals}
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      label="Favorite Animal"
      placeholder="Search an animal"
      description="The second most popular pet in the world"
      defaultItems={animals}
      defaultSelectedKey="cat"
      className="max-w-xs"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      label="Favorite Animal"
      placeholder="Search an animal"
      defaultItems={animals}
      disabledKeys={["zebra", "tiger", "lion", "elephant", "crocodile", "whale"]}
      className="max-w-xs"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      isDisabled
      defaultItems={animals}
      label="Favorite Animal"
      placeholder="Search an animal"
      defaultSelectedKey="cat"
      className="max-w-xs"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      defaultItems={animals}
      label="Favorite Animal"
      placeholder="Search an animal"
      className="max-w-xs"
    >
      {(animal) => <AutocompleteItem key={animal.value}>{animal.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState("");
  const [touched, setTouched] = React.useState(false);

  const isValid = value === "cat";

  return (
    <Autocomplete
      label="Favorite Animal"
      variant="bordered"
      placeholder="Search an animal"
      description="The second most popular pet in the world"
      errorMessage={isValid || !touched ? "" : "You must select a cat"}
      isInvalid={isValid || !touched ? false : true}
      defaultItems={animals}
      selectedKey={value}
      className="max-w-xs"
      onSelectionChange={setValue}
      onClose={() => setTouched(true)}
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";


export default function App() {
  const [value, setValue] = React.useState('');
  const [selectedKey, setSelectedKey] = React.useState(null);

  const onSelectionChange = (id) => {
    setSelectedKey(id);
  };
  
  const onInputChange = (value) => {
    setValue(value)
  };

  return (
    <div className="flex w-full flex-col">
      <Autocomplete 
        label="Search an animal" 
        variant="bordered"
        defaultItems={animals}
        className="max-w-xs" 
        allowsCustomValue={true}
        onSelectionChange={onSelectionChange}
        onInputChange={onInputChange}
      >
        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
      </Autocomplete>
      <p className="mt-1 text-small text-default-500">Current selected animal: {selectedKey}</p>
      <p className="text-small text-default-500">Current input text: {value}</p>
    </div>
  );
}`;

const AppTs = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState<string>('');
  const [selectedKey, setSelectedKey] = React.useState<React.Key | null>(null);

  const onSelectionChange = (key: React.Key) => {
    setSelectedKey(key);
  };
  
  const onInputChange = (value: string) => {
    setValue(value)
  };

  return (
    <div className="flex w-full flex-col">
      <Autocomplete 
        label="Search an animal" 
        variant="underlined"
        defaultItems={animals}
        className="max-w-xs" 
        allowsCustomValue={true}
        onSelectionChange={onSelectionChange}
        onInputChange={onInputChange}
      >
        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
      </Autocomplete>
      <p className="mt-1 text-small text-default-500">Current selected animal: {selectedKey}</p>
      <p className="text-small text-default-500">Current input text: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {useFilter} from "@react-aria/i18n";
import {animals} from "./data";

export default function App() {
  // Store Autocomplete input value, selected option, open state, and items
  // in a state tracker
  const [fieldState, setFieldState] = React.useState({
    selectedKey: "",
    inputValue: "",
    items: animals,
  });

  // Implement custom filtering logic and control what items are
  // available to the Autocomplete.
  const {startsWith} = useFilter({sensitivity: "base"});

  // Specify how each of the Autocomplete values should change when an
  // option is selected from the list box
  const onSelectionChange = (key) => {
    setFieldState((prevState) => {
      let selectedItem = prevState.items.find((option) => option.value === key);

      return {
        inputValue: selectedItem?.label || "",
        selectedKey: key,
        items: animals.filter((item) => startsWith(item.label, selectedItem?.label || "")),
      };
    });
  };

  // Specify how each of the Autocomplete values should change when the input
  // field is altered by the user
  const onInputChange = (value) => {
    setFieldState((prevState) => ({
      inputValue: value,
      selectedKey: value === "" ? null : prevState.selectedKey,
      items: animals.filter((item) => startsWith(item.label, value)),
    }));
  };

  // Show entire list if user opens the menu manually
  const onOpenChange = (isOpen, menuTrigger) => {
    if (menuTrigger === "manual" && isOpen) {
      setFieldState((prevState) => ({
        inputValue: prevState.inputValue,
        selectedKey: prevState.selectedKey,
        items: animals,
      }));
    }
  };

  return (
    <Autocomplete
      className="max-w-xs"
      inputValue={fieldState.inputValue}
      items={fieldState.items}
      label="Favorite Animal"
      placeholder="Search an animal"
      selectedKey={fieldState.selectedKey}
      variant="bordered"
      onInputChange={onInputChange}
      onOpenChange={onOpenChange}
      onSelectionChange={onSelectionChange}
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const AppTs = `import {Autocomplete, AutocompleteItem, MenuTriggerAction} from "@nextui-org/react";
import {useFilter} from "@react-aria/i18n";
import {animals} from "./data";

type FieldState = {
  selectedKey: React.Key | null;
  inputValue: string;
  items: typeof animals;
};

export default function App() {
  // Store Autocomplete input value, selected option, open state, and items
  // in a state tracker
  const [fieldState, setFieldState] = React.useState<FieldState>({
    selectedKey: "",
    inputValue: "",
    items: animals,
  });

  // Implement custom filtering logic and control what items are
  // available to the Autocomplete.
  const {startsWith} = useFilter({sensitivity: "base"});

  // Specify how each of the Autocomplete values should change when an
  // option is selected from the list box
  const onSelectionChange = (key: React.Key) => {
    setFieldState((prevState) => {
      let selectedItem = prevState.items.find((option) => option.value === key);

      return {
        inputValue: selectedItem?.label || "",
        selectedKey: key,
        items: animals.filter((item) => startsWith(item.label, selectedItem?.label || "")),
      };
    });
  };

  // Specify how each of the Autocomplete values should change when the input
  // field is altered by the user
  const onInputChange = (value: string) => {
    setFieldState((prevState) => ({
      inputValue: value,
      selectedKey: value === "" ? null : prevState.selectedKey,
      items: animals.filter((item) => startsWith(item.label, value)),
    }));
  };

  // Show entire list if user opens the menu manually
  const onOpenChange = (isOpen: boolean, menuTrigger: MenuTriggerAction) => {
    if (menuTrigger === "manual" && isOpen) {
      setFieldState((prevState) => ({
        inputValue: prevState.inputValue,
        selectedKey: prevState.selectedKey,
        items: animals,
      }));
    }
  };

  return (
    <Autocomplete
      className="max-w-xs"
      inputValue={fieldState.inputValue}
      items={fieldState.items}
      label="Favorite Animal"
      placeholder="Search an animal"
      selectedKey={fieldState.selectedKey}
      variant="bordered"
      onInputChange={onInputChange}
      onOpenChange={onOpenChange}
      onSelectionChange={onSelectionChange}
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

import usage from "./usage";
import dynamic from "./dynamic";
import disabled from "./disabled";
import disabledItems from "./disabled-items";
import required from "./required";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import labelPlacements from "./label-placements";
import startContent from "./start-content";
import itemStartContent from "./item-start-content";
import customValue from "./custom-value";
import customSelectorIcon from "./custom-selector-icon";
import withoutScrollShadow from "./without-scroll-shadow";
import description from "./description";
import errorMessage from "./error-message";
import events from "./events";
import controlled from "./controlled";
import fullyControlled from "./fully-controlled";
import customItems from "./custom-items";
import customFiltering from "./custom-filtering";
import asyncFiltering from "./async-filtering";
import asyncLoadingItems from "./async-loading-items";
import sections from "./sections";
import customSectionsStyle from "./custom-sections-style";
import customStyles from "./custom-styles";
import customEmptyContentMessage from "./custom-empty-content-message";
import readOnly from "./read-only";

export const autocompleteContent = {
  usage,
  dynamic,
  disabled,
  disabledItems,
  required,
  sizes,
  colors,
  variants,
  labelPlacements,
  startContent,
  customValue,
  itemStartContent,
  customSelectorIcon,
  withoutScrollShadow,
  description,
  errorMessage,
  events,
  controlled,
  fullyControlled,
  customItems,
  customFiltering,
  asyncFiltering,
  asyncLoadingItems,
  sections,
  customSectionsStyle,
  customStyles,
  customEmptyContentMessage,
  readOnly,
};

const App = `import {Autocomplete, AutocompleteItem, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <Autocomplete
      className="max-w-xs"
      label="Select country"
    >
      <AutocompleteItem
        key="argentina"
        startContent={<Avatar alt="Argentina" className="w-6 h-6" src="https://flagcdn.com/ar.svg" />}
      >
        Argentina
      </AutocompleteItem>
      <AutocompleteItem
        key="venezuela"
        startContent={<Avatar alt="Venezuela" className="w-6 h-6" src="https://flagcdn.com/ve.svg" />}
      >
        Venezuela
      </AutocompleteItem>
      <AutocompleteItem
        key="brazil"
        startContent={<Avatar alt="Brazil" className="w-6 h-6" src="https://flagcdn.com/br.svg" />}
      >
        Brazil
      </AutocompleteItem>
      <AutocompleteItem
        key="switzerland"
        startContent={
          <Avatar alt="Switzerland" className="w-6 h-6" src="https://flagcdn.com/ch.svg" />
        }
      >
        Switzerland
      </AutocompleteItem>
      <AutocompleteItem
        key="germany"
        startContent={<Avatar alt="Germany" className="w-6 h-6" src="https://flagcdn.com/de.svg" />}
      >
        Germany
      </AutocompleteItem>
      <AutocompleteItem
        key="spain"
        startContent={<Avatar alt="Spain" className="w-6 h-6" src="https://flagcdn.com/es.svg" />}
      >
        Spain
      </AutocompleteItem>
      <AutocompleteItem
        key="france"
        startContent={<Avatar alt="France" className="w-6 h-6" src="https://flagcdn.com/fr.svg" />}
      >
        France
      </AutocompleteItem>
      <AutocompleteItem
        key="italy"
        startContent={<Avatar alt="Italy" className="w-6 h-6" src="https://flagcdn.com/it.svg" />}
      >
        Italy
      </AutocompleteItem>
      <AutocompleteItem
        key="mexico"
        startContent={<Avatar alt="Mexico" className="w-6 h-6" src="https://flagcdn.com/mx.svg" />}
      >
        Mexico
      </AutocompleteItem>
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const placements = [
    "inside",
    "outside",
    "outside-left",
  ];

  return (
    <div className="w-full flex flex-col gap-4">
      <div className="flex flex-col gap-2">
        <h3 className="text-default-500 text-small">Without placeholder</h3>
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <Autocomplete
              defaultItems={animals}
              labelPlacement={placement}
              label="Favorite Animal"
              className="max-w-xs"
            >
              {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
            </Autocomplete>
          ))}
        </div>
      </div>  
      <div className="flex flex-col gap-2">
        <h3 className="text-default-500 text-small">With placeholder</h3>
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <Autocomplete
              labelPlacement={placement}
              label="Favorite Animal"
              placeholder="Search an animal"
              className="max-w-xs"
            >
              {animals.map((animal) => (
                <AutocompleteItem key={animal.value} value={animal.value}>
                  {animal.label}
                </AutocompleteItem>
              ))}
            </Autocomplete>
          ))}
        </div>
      </div>  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      isReadOnly
      label="Favorite Animal"
      defaultItems={animals}
      placeholder="Search an animal"
      defaultSelectedKey="cat"
      className="max-w-xs"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      isRequired
      label="Favorite Animal"
      defaultItems={animals}
      placeholder="Search an animal"
      defaultSelectedKey="cat"
      className="max-w-xs"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const App = `import {Autocomplete, AutocompleteItem, AutocompleteSection} from "@nextui-org/react";

export default function App() {
  return (
    <Autocomplete
      label="Favorite Animal"
      placeholder="Search an animal"
      className="max-w-xs"
    >
      <AutocompleteSection showDivider title="Mammals">
        <AutocompleteItem key="Lion">Lion</AutocompleteItem>
        <AutocompleteItem key="Tiger">Tiger</AutocompleteItem>
        <AutocompleteItem key="Elephant">Elephant</AutocompleteItem>
        <AutocompleteItem key="Kangaroo">Kangaroo</AutocompleteItem>
        <AutocompleteItem key="Panda">Panda</AutocompleteItem>
        <AutocompleteItem key="Giraffe">Giraffe</AutocompleteItem>
        <AutocompleteItem key="Zebra">Zebra</AutocompleteItem>
        <AutocompleteItem key="Cheetah">Cheetah</AutocompleteItem>
      </AutocompleteSection>
      <AutocompleteSection title="Birds">
        <AutocompleteItem key="Eagle">Eagle</AutocompleteItem>
        <AutocompleteItem key="Parrot">Parrot</AutocompleteItem>
        <AutocompleteItem key="Penguin">Penguin</AutocompleteItem>
        <AutocompleteItem key="Ostrich">Ostrich</AutocompleteItem>
        <AutocompleteItem key="Peacock">Peacock</AutocompleteItem>
        <AutocompleteItem key="Swan">Swan</AutocompleteItem>
        <AutocompleteItem key="Falcon">Falcon</AutocompleteItem>
        <AutocompleteItem key="Flamingo">Flamingo</AutocompleteItem>
      </AutocompleteSection>
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const sizes = ["sm", "md", "lg"];

  return (
    <div className="w-full flex flex-col gap-4">
      {sizes.map((size) => (
        <div key={size} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <Autocomplete 
            size={size}
            defaultItems={animals}
            label="Select an animal" 
            className="max-w-xs" 
          >
            {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
          </Autocomplete>
          <Autocomplete
            size={size}
            defaultItems={animals}
            label="Favorite Animal"
            placeholder="Search an animal"
            className="max-w-xs"
          >
            {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
          </Autocomplete>
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const PetIcon = `export const PetIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M19.0803 15.7203C18.4903 12.1903 15.1003 9.32031 11.5203 9.32031C7.63028 9.32031 4.21028 12.4703 3.88028 16.3503C3.75028 17.8503 4.23028 19.2703 5.22028 20.3403C6.20028 21.4103 7.58028 22.0003 9.08028 22.0003H13.7603C15.4503 22.0003 16.9303 21.3403 17.9403 20.1503C18.9503 18.9603 19.3503 17.3803 19.0803 15.7203Z"
      fill="currentColor"
    />
    <path
      d="M10.2796 7.86C11.8978 7.86 13.2096 6.54819 13.2096 4.93C13.2096 3.31181 11.8978 2 10.2796 2C8.66141 2 7.34961 3.31181 7.34961 4.93C7.34961 6.54819 8.66141 7.86 10.2796 7.86Z"
      fill="currentColor"
    />
    <path
      d="M16.94 9.02844C18.2876 9.02844 19.38 7.93601 19.38 6.58844C19.38 5.24086 18.2876 4.14844 16.94 4.14844C15.5924 4.14844 14.5 5.24086 14.5 6.58844C14.5 7.93601 15.5924 9.02844 16.94 9.02844Z"
      fill="currentColor"
    />
    <path
      d="M20.5496 12.9313C21.6266 12.9313 22.4996 12.0582 22.4996 10.9812C22.4996 9.90429 21.6266 9.03125 20.5496 9.03125C19.4727 9.03125 18.5996 9.90429 18.5996 10.9812C18.5996 12.0582 19.4727 12.9313 20.5496 12.9313Z"
      fill="currentColor"
    />
    <path
      d="M3.94 10.9816C5.28757 10.9816 6.38 9.88914 6.38 8.54156C6.38 7.19399 5.28757 6.10156 3.94 6.10156C2.59243 6.10156 1.5 7.19399 1.5 8.54156C1.5 9.88914 2.59243 10.9816 3.94 10.9816Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {PetIcon} from "./PetIcon";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      label="Favorite Animal"
      placeholder="Search an animal"
      variant="bordered"
      defaultItems={animals}
      startContent={<PetIcon className="text-xl" />}
      defaultSelectedKey="cat"
      className="max-w-xs"
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/PetIcon.jsx": PetIcon,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <Autocomplete 
        label="Select an animal" 
        className="max-w-xs" 
      >
        {animals.map((animal) => (
          <AutocompleteItem key={animal.value} value={animal.value}>
            {animal.label}
          </AutocompleteItem>
        ))}
      </Autocomplete>
      <Autocomplete
        label="Favorite Animal"
        placeholder="Search an animal"
        className="max-w-xs"
        defaultItems={animals}
      >
        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
      </Autocomplete>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const variants = ["flat", "bordered", "underlined", "faded"];

  return (
    <div className="w-full flex flex-col gap-4">
      {variants.map((variant) => (
        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <Autocomplete 
            variant={variant}
            defaultItems={animals}
            label="Select an animal" 
            className="max-w-xs" 
          >
            {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
          </Autocomplete>
          <Autocomplete
            variant={variant}
            label="Favorite Animal"
            placeholder="Search an animal"
            className="max-w-xs"
          >
            {animals.map((animal) => (
              <AutocompleteItem key={animal.value} value={animal.value}>
                {animal.label}
              </AutocompleteItem>
            ))}
          </Autocomplete>
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {label: "Cat", value: "cat", description: "The second most popular pet in the world"},
  {label: "Dog", value: "dog", description: "The most popular pet in the world"},
  {label: "Elephant", value: "elephant", description: "The largest land animal"},
  {label: "Lion", value: "lion", description: "The king of the jungle"},
  {label: "Tiger", value: "tiger", description: "The largest cat species"},
  {label: "Giraffe", value: "giraffe", description: "The tallest land animal"},
  {
    label: "Dolphin",
    value: "dolphin",
    description: "A widely distributed and diverse group of aquatic mammals",
  },
  {label: "Penguin", value: "penguin", description: "A group of aquatic flightless birds"},
  {label: "Zebra", value: "zebra", description: "A several species of African equids"},
  {
    label: "Shark",
    value: "shark",
    description: "A group of elasmobranch fish characterized by a cartilaginous skeleton",
  },
  {
    label: "Whale",
    value: "whale",
    description: "Diverse group of fully aquatic placental marine mammals",
  },
  {label: "Otter", value: "otter", description: "A carnivorous mammal in the subfamily Lutrinae"},
  {label: "Crocodile", value: "crocodile", description: "A large semiaquatic reptile"},
];`;

const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Autocomplete
      label="Favorite Animal"
      placeholder="Search an animal"
      defaultSelectedKey="cat"
      defaultItems={animals}
      className="max-w-xs"
      scrollShadowProps={{
        isEnabled: false
      }}
    >
      {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
    </Autocomplete>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Avatar isBordered src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar isBordered src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar isBordered src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar isBordered src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar isBordered src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar isBordered src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Avatar isBordered color="default" src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar isBordered color="primary" src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar isBordered color="secondary" src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar isBordered color="success" src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar isBordered color="warning" src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar isBordered color="danger" src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const CameraIcon = `export const CameraIcon = ({fill, size, height, width, ...props}) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        clipRule="evenodd"
        d="M17.44 6.236c.04.07.11.12.2.12 2.4 0 4.36 1.958 4.36 4.355v5.934A4.368 4.368 0 0117.64 21H6.36A4.361 4.361 0 012 16.645V10.71a4.361 4.361 0 014.36-4.355c.08 0 .16-.04.19-.12l.06-.12.106-.222a97.79 97.79 0 01.714-1.486C7.89 3.51 8.67 3.01 9.64 3h4.71c.97.01 1.76.51 2.22 1.408.157.315.397.822.629 1.31l.141.299.1.22zm-.73 3.836c0 .5.4.9.9.9s.91-.4.91-.9-.41-.909-.91-.909-.9.41-.9.91zm-6.44 1.548c.47-.47 1.08-.719 1.73-.719.65 0 1.26.25 1.72.71.46.459.71 1.068.71 1.717A2.438 2.438 0 0112 15.756c-.65 0-1.26-.25-1.72-.71a2.408 2.408 0 01-.71-1.717v-.01c-.01-.63.24-1.24.7-1.699zm4.5 4.485a3.91 3.91 0 01-2.77 1.15 3.921 3.921 0 01-3.93-3.926 3.865 3.865 0 011.14-2.767A3.921 3.921 0 0112 9.402c1.05 0 2.04.41 2.78 1.15.74.749 1.15 1.738 1.15 2.777a3.958 3.958 0 01-1.16 2.776z"
        fill='currentColor'
        fillRule="evenodd"
      />
    </svg>
  );
};`;

const App = `import {Avatar} from "@nextui-org/react";
import {CameraIcon} from './CameraIcon';

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Avatar showFallback src='https://images.unsplash.com/broken' fallback={
        <CameraIcon className="animate-pulse w-6 h-6 text-default-500" fill="currentColor" size={20} />
      } />
      <Avatar showFallback name='Jane' src='https://images.unsplash.com/broken' />
      <Avatar name='Joe' src='https://images.unsplash.com/broken' />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/CameraIcon.jsx": CameraIcon,
};

export default {
  ...react,
};

const App = `import {forwardRef} from "react";
import {useMemo} from "react";

import {AvatarIcon, useAvatar} from "@nextui-org/react";

const MyAvatar = forwardRef((props, ref) => {
  const {
    src,
    icon = <AvatarIcon />,
    alt,
    classNames,
    slots,
    name,
    showFallback,
    fallback: fallbackComponent,
    getInitials,
    getAvatarProps,
    getImageProps,
  } = useAvatar({
    ref,
    ...props,
  });

  const fallback = useMemo(() => {
    if (!showFallback && src) return null;

    const ariaLabel = alt || name || "avatar";

    if (fallbackComponent) {
      return (
        <div
          aria-label={ariaLabel}
          className={slots.fallback({ class: classNames?.fallback })}
          role="img"
        >
          {fallbackComponent}
        </div>
      );
    }

    return name ? (
      <span aria-label={ariaLabel} className={slots.name({ class: classNames?.name })} role="img">
        {getInitials(name)}
      </span>
    ) : (
      <span aria-label={ariaLabel} className={slots.icon({ class: classNames?.icon })} role="img">
        {icon}
      </span>
    );
  }, [showFallback, src, fallbackComponent, name, classNames]);

  return (
    <div {...getAvatarProps()}>
      {src && <img {...getImageProps()} alt={alt} />}
      {fallback}
    </div>
  );
});

MyAvatar.displayName = "MyAvatar";

export default MyAvatar;`;

const AppTs = `import {forwardRef, useMemo} from "react";

import {AvatarIcon, useAvatar, AvatarProps as BaseAvatarProps} from "@nextui-org/react";

export interface AvatarProps extends BaseAvatarProps {}

const MyAvatar = forwardRef<HTMLSpanElement, AvatarProps>((props, ref) => {
  const {
    src,
    icon = <AvatarIcon />,
    alt,
    classNames,
    slots,
    name,
    showFallback,
    fallback: fallbackComponent,
    getInitials,
    getAvatarProps,
    getImageProps,
  } = useAvatar({
    ref,
    ...props,
  });

  const fallback = useMemo(() => {
    if (!showFallback && src) return null;

    const ariaLabel = alt || name || "avatar";

    if (fallbackComponent) {
      return (
        <div
          aria-label={ariaLabel}
          className={slots.fallback({class: classNames?.fallback})}
          role="img"
        >
          {fallbackComponent}
        </div>
      );
    }

    return name ? (
      <span aria-label={ariaLabel} className={slots.name({class: classNames?.name})} role="img">
        {getInitials(name)}
      </span>
    ) : (
      <span aria-label={ariaLabel} className={slots.icon({class: classNames?.icon})} role="img">
        {icon}
      </span>
    );
  }, [showFallback, src, fallbackComponent, name, classNames]);

  return (
    <div {...getAvatarProps()}>
      {src && <img {...getImageProps()} alt={alt} />}
      {fallback}
    </div>
  );
});

Avatar.displayName = "MyAvatar";

export default MyAvatar;`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Avatar, AvatarIcon} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex items-center">
      <Avatar
        icon={<AvatarIcon />}
        classNames={{
          base: "bg-gradient-to-br from-[#FFB457] to-[#FF705B]",
          icon: "text-black/80",
        }}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-3 items-center">
      <Avatar isDisabled src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar isDisabled name="Junior" />
      <Avatar isDisabled src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar isDisabled name="Jane" />
      <Avatar isDisabled src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar isDisabled name="Joe" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Avatar showFallback src='https://images.unsplash.com/broken' />
      <Avatar showFallback name='Jane' src='https://images.unsplash.com/broken' />
      <Avatar name='Joe' src='https://images.unsplash.com/broken' />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar, AvatarGroup} from "@nextui-org/react";

export default function App() {
  return (
    <AvatarGroup
      isBordered
      max={3}
      total={10}
      renderCount={(count) => (
        <p className="text-small text-foreground font-medium ms-2">+{count} others</p>
      )}
    >
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </AvatarGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {forwardRef} from "react";

import {useAvatarGroup, AvatarGroupProvider} from "@nextui-org/react";
import Avatar from "./avatar"; // your custom avatar or nextui avatar

const AvatarGroup = forwardRef((props, ref) => {
  const {
    Component,
    clones,
    context,
    remainingCount,
    renderCount = (count) => <Avatar name={\`+\${count}\`} />,
    getAvatarGroupProps,
  } = useAvatarGroup({
    ref,
    ...props,
  });

  return (
    <Component {...getAvatarGroupProps()}>
      <AvatarGroupProvider value={context}>
        {clones}
        {remainingCount > 0 && renderCount(remainingCount)}
      </AvatarGroupProvider>
    </Component>
  );
});

AvatarGroup.displayName = "AvatarGroup";

export default AvatarGroup;`;

const AppTs = `import {forwardRef} from "react";

import {useAvatarGroup, AvatarGroupProvider, AvatarGroupProps as BaseAvatarGroupProps} from "@nextui-org/react";
import Avatar from "./avatar"; // your custom avatar or nextui avatar

export interface AvatarGroupProps extends BaseAvatarGroupProps {}

const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>((props, ref) => {
  const {
    Component,
    clones,
    context,
    remainingCount,
    renderCount = (count) => <Avatar name={\`+\${count}\`} />,
    getAvatarGroupProps,
  } = useAvatarGroup({
    ref,
    ...props,
  });

  return (
    <Component {...getAvatarGroupProps()}>
      <AvatarGroupProvider value={context}>
        {clones}
        {remainingCount > 0 && renderCount(remainingCount)}
      </AvatarGroupProvider>
    </Component>
  );
});

AvatarGroup.displayName = "AvatarGroup";

export default AvatarGroup;`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Avatar, AvatarGroup} from "@nextui-org/react";

export default function App() {
  return (
    <AvatarGroup isBordered isDisabled>
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </AvatarGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar, AvatarGroup} from "@nextui-org/react";

export default function App() {
  return (
    <AvatarGroup isBordered isGrid max={7}>
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar src="https://i.pravatar.cc/300?u=a042581f4f29026707d" />
      <Avatar src="https://i.pravatar.cc/300?u=a042581f4e29026710d" />
      <Avatar src="https://i.pravatar.cc/300?u=a042581f4e29026712d" />
    </AvatarGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar, AvatarGroup} from "@nextui-org/react";

export default function App() {
  return (
    <AvatarGroup isBordered max={3}>
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </AvatarGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar, AvatarGroup} from "@nextui-org/react";

export default function App() {
  return (
    <AvatarGroup isBordered max={3} total={10}>
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </AvatarGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar, AvatarGroup} from "@nextui-org/react";

export default function App() {
  return (
    <AvatarGroup isBordered>
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
    </AvatarGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import radius from "./radius";
import disabled from "./disabled";
import bordered from "./bordered";
import colors from "./colors";
import fallbacks from "./fallbacks";
import customFallback from "./custom-fallback";
import group from "./group";
import groupDisabled from "./group-disabled";
import groupMax from "./group-max";
import groupTotal from "./group-total";
import groupGrid from "./group-grid";
import groupCustomCount from "./group-custom-count";
import custom from "./custom";
import customImpl from "./custom-impl";
import groupCustomImpl from "./group-custom-impl";

export const avatarContent = {
  usage,
  sizes,
  radius,
  colors,
  disabled,
  bordered,
  fallbacks,
  customFallback,
  group,
  groupMax,
  groupTotal,
  groupGrid,
  groupDisabled,
  groupCustomCount,
  custom,
  customImpl,
  groupCustomImpl,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Avatar isBordered radius="full" src="https://i.pravatar.cc/150?u=a04258114e29026708c" />
      <Avatar isBordered radius="lg" src="https://i.pravatar.cc/150?u=a04258114e29026302d" />
      <Avatar isBordered radius="md" src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar isBordered radius="sm" src="https://i.pravatar.cc/150?u=a04258a2462d826712d" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" className="w-6 h-6 text-tiny"  />
      <Avatar src="https://i.pravatar.cc/150?u=a04258a2462d826712d" size="sm" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" size="md" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026302d" size="lg" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026708c" className="w-20 h-20 text-large" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-3 items-center">
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026024d" />
      <Avatar name="Junior" />
      <Avatar src="https://i.pravatar.cc/150?u=a042581f4e29026704d" />
      <Avatar name="Jane" />
      <Avatar src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
      <Avatar name="Joe" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

export const NotificationIcon = `export const NotificationIcon = ({size, height, width, ...props}) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        clipRule="evenodd"
        d="M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z"
        fill='currentColor'
        fillRule="evenodd"
      />
    </svg>
  );
};`;

const App = `import {Badge, Button} from "@nextui-org/react";
import {NotificationIcon} from "./NotificationIcon";

export default function App() {
  return (
    <Badge content="99+" shape="circle" color="danger">
      <Button
        radius="full"
        isIconOnly
        aria-label="more than 99 notifications"
        variant="light"
      >
        <NotificationIcon size={24} />
      </Button>
    </Badge>
  );
}`;

const react = {
  "/App.jsx": App,
  "/NotificationIcon.jsx": NotificationIcon,
};

export default {
  ...react,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-3 items-center">
      <Badge content="5" color="default">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a042f81f4e29026024d"
        />
      </Badge>
      <Badge content="5" color="primary">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
      <Badge content="5" color="secondary">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
        />
      </Badge>
      <Badge content="5" color="success">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026302d"
        />
      </Badge>
      <Badge content="5" color="warning">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026708c"
        />
      </Badge>
      <Badge content="5" color="danger">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a042581f4e29026024d"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

export const NotificationIcon = `export const NotificationIcon = ({size, height, width, ...props}) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        clipRule="evenodd"
        d="M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z"
        fill='currentColor'
        fillRule="evenodd"
      />
    </svg>
  );
};`;

export const CheckIcon = `export const CheckIcon = ({
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      width={size || width || 18}
      height={size || height || 18}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M7.75 11.9999L10.58 14.8299L16.25 9.16992"
        stroke="currentColor"
        strokeWidth={1.5}
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};`;

const App = `import {Badge, Avatar} from "@nextui-org/react";
import {NotificationIcon} from "./NotificationIcon";
import {CheckIcon} from "./CheckIcon";

export default function App() {
  return (
    <div className="flex gap-5 items-center">
      <Badge content="5" color="danger">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a042581f4e29026024d"
        />
      </Badge>
      <Badge content="" color="success" shape="circle" placement="bottom-right">
        <Avatar
          radius="full"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
      <Badge content="new" color="danger" size="sm">
        <Avatar
          isBordered
          radius="md"
          color="danger"
          src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
        />
      </Badge>
      <Badge
        isOneChar
        content={<CheckIcon />}
        color="success"
        placement="bottom-right"
      >
        <Avatar
          isBordered
          color="success"
          radius="md"
          src="https://i.pravatar.cc/300?u=a042581f4e290267072"
        />
      </Badge>
      <Badge
        isOneChar
        content={<NotificationIcon size={12} />}
        color="danger"
        shape="circle"
        placement="top-right"
      >
        <Avatar
          radius="full"
          size="lg"
          src="https://i.pravatar.cc/300?u=a042581f4e29026704f"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/NotificationIcon.jsx": NotificationIcon,
  "/CheckIcon.jsx": CheckIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import placements from "./placements";
import shapes from "./shapes";
import visibility from "./visibility";
import contentExamples from "./content-examples";
import showOutline from "./show-outline";
import a11y from "./a11y";

export const badgeContent = {
  usage,
  sizes,
  colors,
  variants,
  placements,
  shapes,
  visibility,
  contentExamples,
  showOutline,
  a11y,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Badge content="5" color="danger" placement="top-right">
        <Avatar
          isBordered
          radius="md"
          src="https://i.pravatar.cc/150?u=a042f81f4e29026024d"
        />
      </Badge>
      <Badge content="5" color="danger" placement="bottom-right">
        <Avatar
          isBordered
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
      <Badge content="5" color="danger" placement="top-left">
        <Avatar
          isBordered
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026708c"
        />
      </Badge>
      <Badge content="5" color="danger" placement="bottom-left">
        <Avatar
          isBordered
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026302d"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Badge content="5" color="danger" shape="rectangle">
        <Avatar
          isBordered
          radius="md"
          src="https://i.pravatar.cc/150?u=a042f81f4e29026024d"
        />
      </Badge>
      <Badge content="5" color="danger" shape="circle">
        <Avatar
          isBordered
          radius="full"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Badge content="5" color="danger" shape="rectangle" showOutline={false}>
        <Avatar
          isBordered
          radius="md"
          src="https://i.pravatar.cc/150?u=a042f81f4e29026024d"
        />
      </Badge>
      <Badge content="5" color="danger" shape="circle" showOutline={false}>
        <Avatar
          isBordered
          radius="full"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-3 items-center">
      <Badge content="5" size="sm" color="primary">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
      <Badge content="5" size="md" color="primary">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
        />
      </Badge>
      <Badge content="5" size="lg" color="primary">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026302d"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <Badge content="5" color="primary">
      <Avatar
        radius="md"
        size="lg"
        src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
      />
    </Badge>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Badge, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-3 items-center">
      <Badge content="5" color="warning" variant="solid">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a042f81f4e29026024d"
        />
      </Badge>
      <Badge content="5" color="warning" variant="flat">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258a2462d826712d"
        />
      </Badge>
      <Badge content="5" color="warning" variant="faded">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026708c"
        />
      </Badge>
      <Badge content="5" color="warning" variant="shadow">
        <Avatar
          radius="md"
          src="https://i.pravatar.cc/150?u=a04258114e29026302d"
        />
      </Badge>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

export const NotificationIcon = `export const NotificationIcon = ({size, height, width, ...props}) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        clipRule="evenodd"
        d="M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z"
        fill='currentColor'
        fillRule="evenodd"
      />
    </svg>
  );
};`;

export const CartIcon = `export const CartIcon = ({ size, height, width, ...props }) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M16.25 22.5C17.2165 22.5 18 21.7165 18 20.75C18 19.7835 17.2165 19 16.25 19C15.2835 19 14.5 19.7835 14.5 20.75C14.5 21.7165 15.2835 22.5 16.25 22.5Z"
        fill='currentColor'
      />
      <path
        d="M8.25 22.5C9.2165 22.5 10 21.7165 10 20.75C10 19.7835 9.2165 19 8.25 19C7.2835 19 6.5 19.7835 6.5 20.75C6.5 21.7165 7.2835 22.5 8.25 22.5Z"
        fill='currentColor'
      />
      <path
        d="M4.84 3.94L4.64 6.39C4.6 6.86 4.97 7.25 5.44 7.25H20.75C21.17 7.25 21.52 6.93 21.55 6.51C21.68 4.74 20.33 3.3 18.56 3.3H6.27C6.17 2.86 5.97 2.44 5.66 2.09C5.16 1.56 4.46 1.25 3.74 1.25H2C1.59 1.25 1.25 1.59 1.25 2C1.25 2.41 1.59 2.75 2 2.75H3.74C4.05 2.75 4.34 2.88 4.55 3.1C4.76 3.33 4.86 3.63 4.84 3.94Z"
        fill='currentColor'
      />
      <path
        d="M20.5101 8.75H5.17005C4.75005 8.75 4.41005 9.07 4.37005 9.48L4.01005 13.83C3.87005 15.54 5.21005 17 6.92005 17H18.0401C19.5401 17 20.8601 15.77 20.9701 14.27L21.3001 9.6C21.3401 9.14 20.9801 8.75 20.5101 8.75Z"
        fill='currentColor'
      />
    </svg>
  );
};`;

const App = `import {Badge, Avatar, Switch} from "@nextui-org/react";
import {NotificationIcon} from "./NotificationIcon";
import {CartIcon} from "./CartIcon";

export default function App() {
  const [isInvisible, setIsInvisible] = React.useState(false);

  return (
    <div className="flex items-center gap-4">
      <div className="flex items-center gap-3">
        <Badge color="danger" content={5} isInvisible={isInvisible} shape="circle">
          <NotificationIcon className="fill-current" size={30} />
        </Badge>
        <Badge color="danger" content={50} isInvisible={isInvisible} shape="circle">
          <CartIcon size={30} />
        </Badge>
      </div>
      <Switch isSelected={!isInvisible} onValueChange={(value) => setIsInvisible(!value)}>
        Show badge
      </Switch>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/NotificationIcon.jsx": NotificationIcon,
  "/CartIcon.jsx": CartIcon,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  return (
    <Breadcrumbs maxItems={3} itemsBeforeCollapse={1} itemsAfterCollapse={2}>
      <BreadcrumbItem href="#home">Home</BreadcrumbItem>
      <BreadcrumbItem href="#music">Music</BreadcrumbItem>
      <BreadcrumbItem href="#artist">Artist</BreadcrumbItem>
      <BreadcrumbItem href="#album">Album</BreadcrumbItem>
      <BreadcrumbItem href="#song">Song</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const colors = ["foreground", "primary", "secondary", "success", "warning", "danger"];

  return (
    <div className="flex flex-col flex-wrap gap-4">
      {colors.map((color) => (
        <Breadcrumbs key={color} color={color}>
          <BreadcrumbItem>Home</BreadcrumbItem>
          <BreadcrumbItem>Music</BreadcrumbItem>
          <BreadcrumbItem>Artist</BreadcrumbItem>
          <BreadcrumbItem>Album</BreadcrumbItem>
          <BreadcrumbItem>Song</BreadcrumbItem>
        </Breadcrumbs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const [currentPage, setCurrentPage] = React.useState("song");

  return (
    <Breadcrumbs underline="active" onAction={(key) => setCurrentPage(key)}>
      <BreadcrumbItem key="home" isCurrent={currentPage === "home"}>
        Home
      </BreadcrumbItem>
      <BreadcrumbItem key="music" isCurrent={currentPage === "music"}>
        Music
      </BreadcrumbItem>
      <BreadcrumbItem key="artist" isCurrent={currentPage === "artist"}>
        Artist
      </BreadcrumbItem>
      <BreadcrumbItem key="album" isCurrent={currentPage === "album"}>
        Album
      </BreadcrumbItem>
      <BreadcrumbItem key="song" isCurrent={currentPage === "song"}>
        Song
      </BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const AppTs = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const [currentPage, setCurrentPage] = React.useState<React.Key>("song");

  return (
    <Breadcrumbs underline="active" onAction={(key) => setCurrentPage(key)}>
      <BreadcrumbItem key="home" isCurrent={currentPage === "home"}>
        Home
      </BreadcrumbItem>
      <BreadcrumbItem key="music" isCurrent={currentPage === "music"}>
        Music
      </BreadcrumbItem>
      <BreadcrumbItem key="artist" isCurrent={currentPage === "artist"}>
        Artist
      </BreadcrumbItem>
      <BreadcrumbItem key="album" isCurrent={currentPage === "album"}>
        Album
      </BreadcrumbItem>
      <BreadcrumbItem key="song" isCurrent={currentPage === "song"}>
        Song
      </BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const ChevronDownIcon = `export const ChevronDownIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    stroke="currentColor"
    strokeLinecap="round"
    strokeLinejoin="round"
    strokeWidth="1.5"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path d="m6 9 6 6 6-6" />
  </svg>
);`;

const App = `import {Breadcrumbs, BreadcrumbItem, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";
import {ChevronDownIcon} from "./ChevronDownIcon";

export default function App() {
  return (
    <Breadcrumbs
      itemClasses={{
        item: "px-2",
        separator: "px-0",
      }}
    >
      <BreadcrumbItem href="#home">Home</BreadcrumbItem>
      <BreadcrumbItem href="#music">Music</BreadcrumbItem>
      <BreadcrumbItem href="#artist">Artist</BreadcrumbItem>
      <BreadcrumbItem href="#album">Album</BreadcrumbItem>
      <BreadcrumbItem
        classNames={{
          item: "px-0",
        }}
      >
        <Dropdown>
          <DropdownTrigger>
            <Button
              className="h-6 pr-2 text-small"
              endContent={<ChevronDownIcon className="text-default-500" />}
              radius="full"
              size="sm"
              variant="light"
            >
              Songs
            </Button>
          </DropdownTrigger>
          <DropdownMenu aria-label="Routes">
            <DropdownItem href="#song-1">
              Song 1
            </DropdownItem>
            <DropdownItem href="#song2">
              Song 2
            </DropdownItem>
            <DropdownItem href="#song3">
              Song 3
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
      </BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ChevronDownIcon.jsx": ChevronDownIcon,
};

export default {
  ...react,
};

const ShoppingCartIcon = `export const ShoppingCartIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M16.25 22.5C17.2165 22.5 18 21.7165 18 20.75C18 19.7835 17.2165 19 16.25 19C15.2835 19 14.5 19.7835 14.5 20.75C14.5 21.7165 15.2835 22.5 16.25 22.5Z"
      fill="currentColor"
    />
    <path
      d="M8.25 22.5C9.2165 22.5 10 21.7165 10 20.75C10 19.7835 9.2165 19 8.25 19C7.2835 19 6.5 19.7835 6.5 20.75C6.5 21.7165 7.2835 22.5 8.25 22.5Z"
      fill="currentColor"
    />
    <path
      d="M4.84 3.94L4.64 6.39C4.6 6.86 4.97 7.25 5.44 7.25H20.75C21.17 7.25 21.52 6.93 21.55 6.51C21.68 4.74 20.33 3.3 18.56 3.3H6.27C6.17 2.86 5.97 2.44 5.66 2.09C5.16 1.56 4.46 1.25 3.74 1.25H2C1.59 1.25 1.25 1.59 1.25 2C1.25 2.41 1.59 2.75 2 2.75H3.74C4.05 2.75 4.34 2.88 4.55 3.1C4.76 3.33 4.86 3.63 4.84 3.94Z"
      fill="currentColor"
    />
    <path
      d="M20.5101 8.75H5.17005C4.75005 8.75 4.41005 9.07 4.37005 9.48L4.01005 13.83C3.87005 15.54 5.21005 17 6.92005 17H18.0401C19.5401 17 20.8601 15.77 20.9701 14.27L21.3001 9.6C21.3401 9.14 20.9801 8.75 20.5101 8.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";
import {ShoppingCartIcon} from "./ShoppingCartIcon";

export default function App() {
  return (
    <Breadcrumbs
      underline="hover"
      classNames={{
        list: "bg-gradient-to-br from-violet-500 to-fuchsia-500 shadow-small",
      }}
      itemClasses={{
        item: "text-white/60 data-[current=true]:text-white",
        separator: "text-white/40",
      }}
      variant="solid"
    >
      <BreadcrumbItem href="#shopping-cart">
        <ShoppingCartIcon />
      </BreadcrumbItem>
      <BreadcrumbItem href="#checkout">Checkout</BreadcrumbItem>
      <BreadcrumbItem href="#payment">Payment</BreadcrumbItem>
      <BreadcrumbItem href="#delivery-address">Delivery Address</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ShoppingCartIcon.jsx": ShoppingCartIcon,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Breadcrumbs
      maxItems={3}
      itemsBeforeCollapse={1}
      itemsAfterCollapse={2}
      renderEllipsis={({items, ellipsisIcon, separator}) => (
        <div className="flex items-center">
          <Dropdown>
            <DropdownTrigger>
              <Button
                isIconOnly
                className="min-w-6 w-6 h-6"
                size="sm"
                variant="flat"
              >
                {ellipsisIcon}
              </Button>
            </DropdownTrigger>
            <DropdownMenu aria-label="Routes">
              {items.map((item, index) => (
                <DropdownItem key={index} href={item.href}>
                  {item.children}
                </DropdownItem>
              ))}
            </DropdownMenu>
          </Dropdown>
          {separator}
        </div>
      )}
    >
      <BreadcrumbItem href="#home">Home</BreadcrumbItem>
      <BreadcrumbItem href="#music">Music</BreadcrumbItem>
      <BreadcrumbItem href="#artist">Artist</BreadcrumbItem>
      <BreadcrumbItem href="#album">Album</BreadcrumbItem>
      <BreadcrumbItem href="#featured">Featured</BreadcrumbItem>
      <BreadcrumbItem href="#song">Song</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  return (
    <Breadcrumbs isDisabled>
      <BreadcrumbItem>Home</BreadcrumbItem>
      <BreadcrumbItem>Music</BreadcrumbItem>
      <BreadcrumbItem>Artist</BreadcrumbItem>
      <BreadcrumbItem>Album</BreadcrumbItem>
      <BreadcrumbItem>Song</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import radius from "./radius";
import routing from "./routing";
import underlines from "./underlines";
import controlled from "./controlled";
import menuType from "./menu-type";
import startEndContent from "./start-end-content";
import separator from "./separator";
import customItems from "./custom-items";
import collapsingItems from "./collapsing-items";
import customizingEllipsis from "./customizing-ellipsis";
import customStyles from "./custom-styles";

export const breadcrumbsContent = {
  usage,
  disabled,
  sizes,
  colors,
  variants,
  radius,
  routing,
  underlines,
  controlled,
  menuType,
  startEndContent,
  separator,
  customItems,
  collapsingItems,
  customizingEllipsis,
  customStyles,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const [currentPage, setCurrentPage] = React.useState("music");

  return (
    <Breadcrumbs
      size="sm"
      onAction={(key) => setCurrentPage(key)}
      classNames={{
        list: "gap-2",
      }}
      itemClasses={{
        item: [
          "px-2 py-0.5 border-small border-default-400 rounded-small",
          "data-[current=true]:border-foreground data-[current=true]:bg-foreground data-[current=true]:text-background transition-colors",
          "data-[disabled=true]:border-default-400 data-[disabled=true]:bg-default-100",
        ],
        separator: "hidden",
      }}
    >
      <BreadcrumbItem key="home" isCurrent={currentPage === "home"}>
        Home
      </BreadcrumbItem>
      <BreadcrumbItem key="music" isCurrent={currentPage === "music"}>
        Music
      </BreadcrumbItem>
      <BreadcrumbItem key="artist" isCurrent={currentPage === "artist"}>
        Artist
      </BreadcrumbItem>
      <BreadcrumbItem key="album" isCurrent={currentPage === "album"}>
        Album
      </BreadcrumbItem>
      <BreadcrumbItem key="song" isDisabled isCurrent={currentPage === "song"}>
        Song
      </BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const AppTs = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const [currentPage, setCurrentPage] = React.useState<React.Key>("music");

  return (
    <Breadcrumbs
      hideSeparator
      onAction={(key) => setCurrentPage(key)}
      classNames={{
        list: "gap-2",
      }}
      itemClasses={{
        item: [
          "px-2 py-0.5 border-small border-default-400 rounded-small",
          "data-[current=true]:border-default-800 data-[current=true]:bg-foreground data-[current=true]:text-background transition-colors",
          "data-[disabled=true]:border-default-400 data-[disabled=true]:bg-default-100",
        ],
      }}
    >
      <BreadcrumbItem key="home" isCurrent={currentPage === "home"}>
        Home
      </BreadcrumbItem>
      <BreadcrumbItem key="music" isCurrent={currentPage === "music"}>
        Music
      </BreadcrumbItem>
      <BreadcrumbItem key="artist" isCurrent={currentPage === "artist"}>
        Artist
      </BreadcrumbItem>
      <BreadcrumbItem key="album" isCurrent={currentPage === "album"}>
        Album
      </BreadcrumbItem>
      <BreadcrumbItem key="song" isDisabled isCurrent={currentPage === "song"}>
        Song
      </BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const radius = [ "full", "lg", "md", "sm", "none"];

  return (
    <div className="flex flex-col flex-wrap gap-4">
      {radius.map((r) => (
        <Breadcrumbs key={r} radius={r} variant="solid">
          <BreadcrumbItem>Home</BreadcrumbItem>
          <BreadcrumbItem>Music</BreadcrumbItem>
          <BreadcrumbItem>Artist</BreadcrumbItem>
          <BreadcrumbItem>Album</BreadcrumbItem>
          <BreadcrumbItem>Song</BreadcrumbItem>
        </Breadcrumbs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  return (
    <Breadcrumbs>
      <BreadcrumbItem href="/docs/components/button">Button</BreadcrumbItem>
      <BreadcrumbItem href="/docs/components/breadcrumbs">Breadcrumbs</BreadcrumbItem>
      <BreadcrumbItem href="/docs/components/card">Card</BreadcrumbItem>
      <BreadcrumbItem href="/docs/components/checkbox">Checkbox</BreadcrumbItem>
      <BreadcrumbItem href="/docs/components/code">Code</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  return (
    <Breadcrumbs
      separator="/"
      itemClasses={{
        separator: "px-2"
      }}
    >
      <BreadcrumbItem>Home</BreadcrumbItem>
      <BreadcrumbItem>Music</BreadcrumbItem>
      <BreadcrumbItem>Artist</BreadcrumbItem>
      <BreadcrumbItem>Album</BreadcrumbItem>
      <BreadcrumbItem>Song</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const sizes = ["sm", "md", "lg"];

  return (
    <div className="flex flex-col flex-wrap gap-4">
      {sizes.map((size) => (
        <Breadcrumbs key={size} size={size}>
          <BreadcrumbItem>Home</BreadcrumbItem>
          <BreadcrumbItem>Music</BreadcrumbItem>
          <BreadcrumbItem>Artist</BreadcrumbItem>
          <BreadcrumbItem>Album</BreadcrumbItem>
          <BreadcrumbItem>Song</BreadcrumbItem>
        </Breadcrumbs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const HomeIcon = `export const HomeIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path d="M20.0402 6.82165L14.2802 2.79165C12.7102 1.69165 10.3002 1.75165 8.79023 2.92165L3.78023 6.83165C2.78023 7.61165 1.99023 9.21165 1.99023 10.4716V17.3716C1.99023 19.9216 4.06023 22.0016 6.61023 22.0016H17.3902C19.9402 22.0016 22.0102 19.9316 22.0102 17.3816V10.6016C22.0102 9.25165 21.1402 7.59165 20.0402 6.82165ZM12.7502 18.0016C12.7502 18.4116 12.4102 18.7516 12.0002 18.7516C11.5902 18.7516 11.2502 18.4116 11.2502 18.0016V15.0016C11.2502 14.5916 11.5902 14.2516 12.0002 14.2516C12.4102 14.2516 12.7502 14.5916 12.7502 15.0016V18.0016Z" fill="currentColor"/>
  </svg>
);`;

const MusicIcon = `export const MusicIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path d="M14.5406 13.6719C14.1806 13.6719 13.8906 13.9619 13.8906 14.3219C13.8906 14.6819 14.1806 14.9719 14.5406 14.9719C14.9006 14.9719 15.1906 14.6819 15.1906 14.3219C15.1806 13.9619 14.8906 13.6719 14.5406 13.6719Z" fill="currentColor"/>
    <path d="M9.06016 14.6602C8.70016 14.6602 8.41016 14.9502 8.41016 15.3102C8.41016 15.6702 8.70016 15.9602 9.06016 15.9602C9.42016 15.9602 9.71016 15.6702 9.71016 15.3102C9.71016 14.9502 9.42016 14.6602 9.06016 14.6602Z" fill="currentColor"/>
    <path d="M16.19 2H7.81C4.17 2 2 4.17 2 7.81V16.18C2 19.83 4.17 22 7.81 22H16.18C19.82 22 21.99 19.83 21.99 16.19V7.81C22 4.17 19.83 2 16.19 2ZM16.88 9.55V14.31C16.88 15.6 15.83 16.65 14.54 16.65C13.25 16.65 12.2 15.6 12.2 14.31C12.2 13.02 13.25 11.97 14.54 11.97C14.77 11.97 14.98 12.01 15.19 12.07V10.65L11.41 11.68V15.3C11.41 15.31 11.4 15.32 11.4 15.33C11.39 16.61 10.34 17.64 9.06 17.64C7.77 17.64 6.72 16.59 6.72 15.3C6.72 14.01 7.77 12.96 9.06 12.96C9.29 12.96 9.5 13 9.71 13.06V11.03V9.29C9.71 8.32 10.31 7.53 11.25 7.28L14.24 6.46C15.2 6.2 15.8 6.45 16.14 6.71C16.47 6.97 16.88 7.48 16.88 8.48V9.55Z" fill="currentColor"/>
  </svg>
);`;

const ArtistIcon = `export const ArtistIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path d="M19.5119 5.85L13.5719 2.42C12.6019 1.86 11.4019 1.86 10.4219 2.42L4.49187 5.85C3.52187 6.41 2.92188 7.45 2.92188 8.58V15.42C2.92188 16.54 3.52187 17.58 4.49187 18.15L10.4319 21.58C11.4019 22.14 12.6019 22.14 13.5819 21.58L19.5219 18.15C20.4919 17.59 21.0919 16.55 21.0919 15.42V8.58C21.0819 7.45 20.4819 6.42 19.5119 5.85ZM12.0019 7.34C13.2919 7.34 14.3319 8.38 14.3319 9.67C14.3319 10.96 13.2919 12 12.0019 12C10.7119 12 9.67188 10.96 9.67188 9.67C9.67188 8.39 10.7119 7.34 12.0019 7.34ZM14.6819 16.66H9.32187C8.51187 16.66 8.04187 15.76 8.49187 15.09C9.17187 14.08 10.4919 13.4 12.0019 13.4C13.5119 13.4 14.8319 14.08 15.5119 15.09C15.9619 15.75 15.4819 16.66 14.6819 16.66Z" fill="currentColor"/>
  </svg>
);`;

const AlbumIcon = `export const AlbumIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
    >
    <path d="M18 5.25H6C5.59 5.25 5.25 4.91 5.25 4.5C5.25 4.09 5.59 3.75 6 3.75H18C18.41 3.75 18.75 4.09 18.75 4.5C18.75 4.91 18.41 5.25 18 5.25Z" fill="currentColor"/>
    <path d="M15 2.75H9C8.59 2.75 8.25 2.41 8.25 2C8.25 1.59 8.59 1.25 9 1.25H15C15.41 1.25 15.75 1.59 15.75 2C15.75 2.41 15.41 2.75 15 2.75Z" fill="currentColor"/>
    <path d="M13.9091 16.2109C13.5691 16.2109 13.2891 16.4909 13.2891 16.8309C13.2891 17.1709 13.5691 17.4509 13.9091 17.4509C14.2491 17.4509 14.5291 17.1709 14.5291 16.8309C14.5291 16.4909 14.2491 16.2109 13.9091 16.2109Z" fill="currentColor"/>
    <path d="M9.50953 17.7389C9.50953 17.3989 9.22953 17.1289 8.88953 17.1289C8.54953 17.1289 8.26953 17.4089 8.26953 17.7489C8.26953 18.0889 8.54953 18.3689 8.88953 18.3689C9.22953 18.3589 9.50953 18.0789 9.50953 17.7389Z" fill="currentColor"/>
    <path d="M18 7H6C3.8 7 2 8.8 2 11V18C2 20.2 3.8 22 6 22H18C20.2 22 22 20.2 22 18V11C22 8.8 20.2 7 18 7ZM16.03 12.46V16.83C16.03 16.85 16.02 16.86 16.02 16.88C15.99 18.02 15.06 18.95 13.91 18.95C12.74 18.95 11.79 18 11.79 16.83C11.79 15.66 12.74 14.71 13.91 14.71C14.13 14.71 14.33 14.75 14.53 14.81V13.44L11.01 14.4V17.73V17.74C11.01 18.91 10.06 19.86 8.89 19.86C7.72 19.86 6.77 18.91 6.77 17.74C6.77 16.57 7.72 15.62 8.89 15.62C9.11 15.62 9.31 15.66 9.51 15.72V13.82V12.22C9.51 11.33 10.06 10.61 10.91 10.39L13.64 9.64C14.52 9.41 15.06 9.64 15.37 9.88C15.67 10.11 16.03 10.58 16.03 11.47V12.46Z" fill="currentColor"/>
  </svg>
);`;

const SongIcon = `export const SongIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
    >
    <path d="M21.7188 6.27879V7.44879C21.7188 8.42879 21.3288 9.26879 20.6388 9.75879C20.2087 10.0788 19.6787 10.2288 19.1287 10.2288C18.7887 10.2288 18.4488 10.1788 18.0988 10.0588L12.7188 8.26879V17.9988C12.7188 20.6188 10.5887 22.7488 7.96875 22.7488C5.34875 22.7488 3.21875 20.6188 3.21875 17.9988C3.21875 15.3788 5.34875 13.2488 7.96875 13.2488C9.22875 13.2488 10.3688 13.7488 11.2188 14.5488V3.99879C11.2188 3.02879 11.6188 2.18879 12.3088 1.68879C12.9987 1.19879 13.9187 1.08879 14.8387 1.38879L19.2588 2.86879C20.6188 3.31879 21.7188 4.84879 21.7188 6.27879Z" fill="currentColor"/>
  </svg>
);`;

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";
import {HomeIcon} from "./HomeIcon";
import {MusicIcon} from "./MusicIcon";
import {ArtistIcon} from "./ArtistIcon";
import {AlbumIcon} from "./AlbumIcon";
import {SongIcon} from "./SongIcon";

export default function App() {
  return (
    <Breadcrumbs>
      <BreadcrumbItem startContent={<HomeIcon />}>Home</BreadcrumbItem>
      <BreadcrumbItem startContent={<MusicIcon />}>Music</BreadcrumbItem>
      <BreadcrumbItem startContent={<ArtistIcon />}>Artist</BreadcrumbItem>
      <BreadcrumbItem startContent={<AlbumIcon />}>Album</BreadcrumbItem>
      <BreadcrumbItem startContent={<SongIcon />}>Song</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
  "/HomeIcon.jsx": HomeIcon,
  "/MusicIcon.jsx": MusicIcon,
  "/ArtistIcon.jsx": ArtistIcon,
  "/AlbumIcon.jsx": AlbumIcon,
  "/SongIcon.jsx": SongIcon,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const underlines = ["none", "hover", "always", "active", "focus"];
  const descriptions = {
    none: "No underline",
    hover: "Underline on hover",
    always: "Always underline",
    active: "Underline on active",
    focus: "Underline on focus",
  }

  return (
    <div className="flex flex-col flex-wrap gap-4">
      {underlines.map((u) => (
        <div key={u}>
          <p className="mb-1 text-small text-default-600 capitalize">
            {descriptions[u]} ({u})
          </p>
          <Breadcrumbs underline={u}>
            <BreadcrumbItem>Home</BreadcrumbItem>
            <BreadcrumbItem>Music</BreadcrumbItem>
            <BreadcrumbItem>Artist</BreadcrumbItem>
            <BreadcrumbItem>Album</BreadcrumbItem>
            <BreadcrumbItem>Song</BreadcrumbItem>
          </Breadcrumbs>
        </div>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  return (
    <Breadcrumbs>
      <BreadcrumbItem>Home</BreadcrumbItem>
      <BreadcrumbItem>Music</BreadcrumbItem>
      <BreadcrumbItem>Artist</BreadcrumbItem>
      <BreadcrumbItem>Album</BreadcrumbItem>
      <BreadcrumbItem>Song</BreadcrumbItem>
    </Breadcrumbs>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";

export default function App() {
  const variants = ["solid", "bordered", "light"];

  return (
    <div className="flex flex-col flex-wrap gap-4">
      {variants.map((variant) => (
        <Breadcrumbs key={variant} variant={variant}>
          <BreadcrumbItem>Home</BreadcrumbItem>
          <BreadcrumbItem>Music</BreadcrumbItem>
          <BreadcrumbItem>Artist</BreadcrumbItem>
          <BreadcrumbItem>Album</BreadcrumbItem>
          <BreadcrumbItem>Song</BreadcrumbItem>
        </Breadcrumbs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4 items-center">
      <Button color="default">
        Default
      </Button>
      <Button color="primary">
        Primary
      </Button>  
      <Button color="secondary">
        Secondary
      </Button>  
      <Button color="success">
        Success
      </Button>  
      <Button color="warning">
        Warning
      </Button>  
      <Button color="danger">
        Danger
      </Button>  
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {forwardRef} from "react";
import {useButton, Ripple, Spinner} from "@nextui-org/react";


const MyButton = forwardRef((props, ref) => {
  const {
    domRef,
    children,
    spinnerSize,
    spinner = <Spinner color="current" size={spinnerSize} />,
    spinnerPlacement,
    startContent,
    endContent,
    isLoading,
    disableRipple,
    getButtonProps,
    getRippleProps,
  } = useButton({
    ref,
    ...props,
  });

  const {ripples, onClear} = getRippleProps();

  return (
    <button ref={domRef} {...getButtonProps()}>
      {startContent}
      {isLoading && spinnerPlacement === "start" && spinner}
      {children}
      {isLoading && spinnerPlacement === "end" && spinner}
      {endContent}
      {!disableRipple && <Ripple ripples={ripples} onClear={onClear} />}
    </button>
  );
});

MyButton.displayName = "MyButton";

export default MyButton;`;

const AppTs = `import {forwardRef} from "react";
import {useButton, Ripple, Spinner, ButtonProps as BaseButtonProps} from "@nextui-org/react";

export interface ButtonProps extends BaseButtonProps {}

const MyButton = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {
  const {
    domRef,
    children,
    spinnerSize,
    spinner = <Spinner color="current" size={spinnerSize} />,
    spinnerPlacement,
    startContent,
    endContent,
    isLoading,
    disableRipple,
    getButtonProps,
    getRippleProps,
  } = useButton({
    ref,
    ...props,
  });

  const {ripples, onClear} = getRippleProps();

  return (
    <button ref={domRef} {...getButtonProps()}>
      {startContent}
      {isLoading && spinnerPlacement === "start" && spinner}
      {children}
      {isLoading && spinnerPlacement === "end" && spinner}
      {endContent}
      {!disableRipple && <Ripple ripples={ripples} onClear={onClear} />}
    </button>
  );
});

MyButton.displayName = "MyButton";

export default MyButton;`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button radius="full" className="bg-gradient-to-tr from-pink-500 to-yellow-500 text-white shadow-lg">
      Button
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button isDisabled color="primary">
      Button
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button, ButtonGroup} from "@nextui-org/react";

export default function App() {
  return (
    <ButtonGroup isDisabled>
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const ChevronDownIcon = `export const ChevronDownIcon = () => (
  <svg fill="none" height="14" viewBox="0 0 24 24" width="14" xmlns="http://www.w3.org/2000/svg">
    <path d="M17.9188 8.17969H11.6888H6.07877C5.11877 8.17969 4.63877 9.33969 5.31877 10.0197L10.4988 15.1997C11.3288 16.0297 12.6788 16.0297 13.5088 15.1997L15.4788 13.2297L18.6888 10.0197C19.3588 9.33969 18.8788 8.17969 17.9188 8.17969Z" fill="currentColor"/>
  </svg>
);`;

const App = `import {Button, ButtonGroup, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem} from "@nextui-org/react";
import {ChevronDownIcon} from './ChevronDownIcon';

export default function App() {
  const [selectedOption, setSelectedOption] = React.useState(new Set(["merge"]));

  const descriptionsMap = {
    merge:
      "All commits from the source branch are added to the destination branch via a merge commit.",
    squash:
      "All commits from the source branch are added to the destination branch as a single commit.",
    rebase: "All commits from the source branch are added to the destination branch individually.",
  };

  const labelsMap = {
    merge: "Create a merge commit",
    squash: "Squash and merge",
    rebase: "Rebase and merge",
  }

  // Convert the Set to an Array and get the first value.
  const selectedOptionValue = Array.from(selectedOption)[0];

  return (
    <ButtonGroup variant="flat">
      <Button>{labelsMap[selectedOptionValue]}</Button>
      <Dropdown placement="bottom-end">
        <DropdownTrigger>
          <Button isIconOnly>
            <ChevronDownIcon />
          </Button>
        </DropdownTrigger>
        <DropdownMenu
          disallowEmptySelection
          aria-label="Merge options"
          selectedKeys={selectedOption}
          selectionMode="single"
          onSelectionChange={setSelectedOption}
          className="max-w-[300px]"
        >
          <DropdownItem key="merge" description={descriptionsMap["merge"]}>
            {labelsMap["merge"]}
          </DropdownItem>
          <DropdownItem key="squash" description={descriptionsMap["squash"]}>
            {labelsMap["squash"]}
          </DropdownItem>
          <DropdownItem key="rebase" description={descriptionsMap["rebase"]}>
            {labelsMap["rebase"]}
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
    </ButtonGroup>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ChevronDownIcon.jsx": ChevronDownIcon,
};

export default {
  ...react,
};

const App = `import {Button, ButtonGroup} from "@nextui-org/react";

export default function App() {
  return (
    <ButtonGroup>
      <Button>One</Button>
      <Button>Two</Button>
      <Button>Three</Button>
    </ButtonGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const HeartIcon = `export const HeartIcon = ({
  fill = 'currentColor',
  filled,
  size,
  height,
  width,
  label,
  ...props
}) => {
  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill={filled ? fill : 'none'}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M12.62 20.81c-.34.12-.9.12-1.24 0C8.48 19.82 2 15.69 2 8.69 2 5.6 4.49 3.1 7.56 3.1c1.82 0 3.43.88 4.44 2.24a5.53 5.53 0 0 1 4.44-2.24C19.51 3.1 22 5.6 22 8.69c0 7-6.48 11.13-9.38 12.12Z"
        stroke={fill}
        strokeWidth={1.5}
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
`;

const CameraIcon = `export const CameraIcon = ({
  fill = 'currentColor',
  filled,
  size,
  height,
  width,
  label,
  ...props
}) => {
  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M17.44 6.236c.04.07.11.12.2.12 2.4 0 4.36 1.958 4.36 4.355v5.934A4.368 4.368 0 0117.64 21H6.36A4.361 4.361 0 012 16.645V10.71a4.361 4.361 0 014.36-4.355c.08 0 .16-.04.19-.12l.06-.12.106-.222a97.79 97.79 0 01.714-1.486C7.89 3.51 8.67 3.01 9.64 3h4.71c.97.01 1.76.51 2.22 1.408.157.315.397.822.629 1.31l.141.299.1.22zm-.73 3.836c0 .5.4.9.9.9s.91-.4.91-.9-.41-.909-.91-.909-.9.41-.9.91zm-6.44 1.548c.47-.47 1.08-.719 1.73-.719.65 0 1.26.25 1.72.71.46.459.71 1.068.71 1.717A2.438 2.438 0 0112 15.756c-.65 0-1.26-.25-1.72-.71a2.408 2.408 0 01-.71-1.717v-.01c-.01-.63.24-1.24.7-1.699zm4.5 4.485a3.91 3.91 0 01-2.77 1.15 3.921 3.921 0 01-3.93-3.926 3.865 3.865 0 011.14-2.767A3.921 3.921 0 0112 9.402c1.05 0 2.04.41 2.78 1.15.74.749 1.15 1.738 1.15 2.777a3.958 3.958 0 01-1.16 2.776z"
        fill={fill}
      />
    </svg>
  );
};`;

const App = `import {Button} from "@nextui-org/react";
import {HeartIcon} from './HeartIcon';
import {CameraIcon} from './CameraIcon';

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Button isIconOnly color="danger" aria-label="Like">
        <HeartIcon />
      </Button>    
      <Button isIconOnly color="warning" variant="faded" aria-label="Take a photo">
        <CameraIcon />
      </Button>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/HeartIcon.jsx": HeartIcon,
  "/CameraIcon.jsx": CameraIcon,
};

export default {
  ...react,
};

const UserIcon = `export const UserIcon = ({
  fill = 'currentColor',
  filled,
  size,
  height,
  width,
  label,
  ...props
}) => {
  return (
    <svg
      data-name="Iconly/Curved/Profile"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={size || width || 24}
      height={size || height || 24}
      {...props}
    >
      <g
        fill="none"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit={10}
        strokeWidth={1.5}
      >
        <path
          data-name="Stroke 1"
          d="M11.845 21.662C8.153 21.662 5 21.088 5 18.787s3.133-4.425 6.845-4.425c3.692 0 6.845 2.1 6.845 4.4s-3.134 2.9-6.845 2.9z"
        />
        <path
          data-name="Stroke 3"
          d="M11.837 11.174a4.372 4.372 0 10-.031 0z"
        />
      </g>
    </svg>
  );
};`;

const CameraIcon = `export const CameraIcon = ({
  fill = 'currentColor',
  filled,
  size,
  height,
  width,
  label,
  ...props
}) => {
  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M17.44 6.236c.04.07.11.12.2.12 2.4 0 4.36 1.958 4.36 4.355v5.934A4.368 4.368 0 0117.64 21H6.36A4.361 4.361 0 012 16.645V10.71a4.361 4.361 0 014.36-4.355c.08 0 .16-.04.19-.12l.06-.12.106-.222a97.79 97.79 0 01.714-1.486C7.89 3.51 8.67 3.01 9.64 3h4.71c.97.01 1.76.51 2.22 1.408.157.315.397.822.629 1.31l.141.299.1.22zm-.73 3.836c0 .5.4.9.9.9s.91-.4.91-.9-.41-.909-.91-.909-.9.41-.9.91zm-6.44 1.548c.47-.47 1.08-.719 1.73-.719.65 0 1.26.25 1.72.71.46.459.71 1.068.71 1.717A2.438 2.438 0 0112 15.756c-.65 0-1.26-.25-1.72-.71a2.408 2.408 0 01-.71-1.717v-.01c-.01-.63.24-1.24.7-1.699zm4.5 4.485a3.91 3.91 0 01-2.77 1.15 3.921 3.921 0 01-3.93-3.926 3.865 3.865 0 011.14-2.767A3.921 3.921 0 0112 9.402c1.05 0 2.04.41 2.78 1.15.74.749 1.15 1.738 1.15 2.777a3.958 3.958 0 01-1.16 2.776z"
        fill={fill}
      />
    </svg>
  );
};`;

const App = `import {Button} from "@nextui-org/react";
import {UserIcon} from './UserIcon';
import {CameraIcon} from './CameraIcon';

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Button color="success" endContent={<CameraIcon/>}>
        Take a photo
      </Button>    
      <Button color="danger" variant="bordered" startContent={<UserIcon/>}>
        Delete user
      </Button>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/UserIcon.jsx": UserIcon,
  "/CameraIcon.jsx": CameraIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import disabled from "./disabled";
import colors from "./colors";
import variants from "./variants";
import radius from "./radius";
import loading from "./loading";
import loadingCustom from "./loading-custom";
import icons from "./icons";
import iconOnly from "./icon-only";
import customStyles from "./custom-styles";
import customImpl from "./custom-impl";
import group from "./group";
import groupDisabled from "./group-disabled";
import groupUseCase from "./group-use-case";

export const buttonContent = {
  usage,
  sizes,
  disabled,
  colors,
  radius,
  variants,
  loading,
  loadingCustom,
  icons,
  iconOnly,
  customStyles,
  customImpl,
  group,
  groupDisabled,
  groupUseCase,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button
      isLoading
      color="secondary"
      spinner={
        <svg
          className="animate-spin h-5 w-5 text-current"
          fill="none"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            fill="currentColor"
          />
        </svg>
      }
    >
      Loading
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button color="primary" isLoading>
      Loading
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Button radius="full">
        Full
      </Button>
      <Button radius="lg">
        Large
      </Button>  
      <Button radius="md">
        Medium
      </Button>  
      <Button radius="sm">
        Small
      </Button>  
      <Button radius="none">
        None
      </Button>  
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4 items-center">
      <Button size="sm">
        Small
      </Button>  
      <Button size="md">
        Medium
      </Button>  
      <Button size="lg">
        Large
      </Button>  
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button color="primary">
      Button
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4 items-center">
      <Button color="primary" variant="solid">
        Solid
      </Button>
      <Button color="primary" variant="faded">
        Faded
      </Button>  
      <Button color="primary" variant="bordered">
        Bordered
      </Button>  
      <Button color="primary" variant="light">
        Light
      </Button>  
      <Button color="primary" variant="flat">
        Flat
      </Button>  
      <Button color="primary" variant="ghost">
        Ghost
      </Button>  
      <Button color="primary" variant="shadow">
        Shadow
      </Button>  
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  let defaultDate = today(getLocalTimeZone());
  let [focusedDate, setFocusedDate] = React.useState(defaultDate);

  return (
    <Calendar
      aria-label="Date (Controlled Focused Value)"
      focusedValue={focusedDate}
      value={defaultDate}
      onFocusChange={setFocusedDate}
    />
  );
}`;

const AppTs = `import {Calendar} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  let defaultDate = today(getLocalTimeZone());
  let [focusedDate, setFocusedDate] = React.useState<DateValue>(defaultDate);

  return (
    <Calendar
      aria-label="Date (Controlled Focused Value)"
      focusedValue={focusedDate}
      value={defaultDate}
      onFocusChange={setFocusedDate}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {parseDate} from "@internationalized/date";

export default function App() {
  let [value, setValue] = React.useState(parseDate("2024-03-07"));

  return (
    <Calendar 
      aria-label="Date (Controlled)" 
      value={value} 
      onChange={setValue} 
    />
  );
}`;

const AppTs = `import {Calendar} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import {parseDate} from "@internationalized/date";

export default function App() {
  let [value, setValue] = React.useState<DateValue>(parseDate("2024-03-07"));

  return (
    <Calendar 
      aria-label="Date (Controlled)" 
      value={value} 
      onChange={setValue} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";

export default function App() {
  return (
    <Calendar aria-label="Date (Disabled)" isDisabled />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import readonly from "./read-only";
import controlled from "./controlled";
import minDateValue from "./min-date-value";
import maxDateValue from "./max-date-value";
import unavailableDates from "./unavailable-dates";
import controlledFocusedValue from "./controlled-focused-value";
import invalidDate from "./invalid-date";
import withMonthAndYearPicker from "./with-month-and-year-picker";
import internationalCalendars from "./international-calendars";
import visibleMonths from "./visible-months";
import pageBehaviour from "./page-behaviour";
import presets from "./presets";

export const calendarContent = {
  usage,
  disabled,
  readonly,
  controlled,
  minDateValue,
  maxDateValue,
  unavailableDates,
  controlledFocusedValue,
  invalidDate,
  withMonthAndYearPicker,
  internationalCalendars,
  visibleMonths,
  pageBehaviour,
  presets,
};

const App = `import {Calendar} from "@nextui-org/react";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  return (
    <I18nProvider locale="zh-CN-u-ca-chinese">
      <Calendar aria-label="Date (International Calendar)" />
    </I18nProvider>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";


export default function App() {
  let [date, setDate] = React.useState(today(getLocalTimeZone()));
  let {locale} = useLocale();
  let isInvalid = isWeekend(date, locale);

  return (
    <Calendar
      aria-label="Date (Invalid on weekends)"
      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
      isInvalid={isInvalid}
      value={date}
      onChange={setDate}
    />
  );
}`;

const AppTs = `import {Calendar} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";


export default function App() {
  let [date, setDate] = React.useState<DateValue>(today(getLocalTimeZone()));
  let {locale} = useLocale();
  let isInvalid = isWeekend(date, locale);

  return (
    <Calendar
      aria-label="Date (Invalid on weekends)"
      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
      isInvalid={isInvalid}
      value={date}
      onChange={setDate}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <Calendar
      aria-label="Date (Max Date Value)"
      defaultValue={today(getLocalTimeZone())}
      maxValue={today(getLocalTimeZone())}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <Calendar
      aria-label="Date (Min Date Value)"
      defaultValue={today(getLocalTimeZone())}
      minValue={today(getLocalTimeZone())}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";

export default function App() {
  return (
    <Calendar 
      aria-label="Date (Page Behaviour)" 
      pageBehavior="single" 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let defaultDate = today(getLocalTimeZone());
  let [value, setValue] = React.useState(defaultDate);
  let {locale} = useLocale();

  let now = today(getLocalTimeZone());
  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);
  let nextMonth = startOfMonth(now.add({months: 1}));

  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4">
      <Calendar
        aria-label="Date (Presets)"
        bottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        classNames={{
          content: "w-full",
        }}
        focusedValue={value}
        nextButtonProps={{
          variant: "bordered",
        }}
        prevButtonProps={{
          variant: "bordered",
        }}
        topContent={
          <ButtonGroup
            fullWidth
            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button onPress={() => setValue(now)}>Today</Button>
            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
          </ButtonGroup>
        }
        value={value}
        onChange={setValue}
        onFocusChange={setValue}
      />
    </div>
  );
}`;

const AppTs = `import {Calendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let defaultDate = today(getLocalTimeZone());
  let [value, setValue] = React.useState<DateValue>(defaultDate);
  let {locale} = useLocale();

  let now = today(getLocalTimeZone());
  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);
  let nextMonth = startOfMonth(now.add({months: 1}));

  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4">
      <Calendar
        aria-label="Date (Presets)"
        bottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        classNames={{
          content: "w-full",
        }}
        focusedValue={value}
        nextButtonProps={{
          variant: "bordered",
        }}
        prevButtonProps={{
          variant: "bordered",
        }}
        topContent={
          <ButtonGroup
            fullWidth
            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button onPress={() => setValue(now)}>Today</Button>
            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
          </ButtonGroup>
        }
        value={value}
        onChange={setValue}
        onFocusChange={setValue}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <Calendar 
      aria-label="Date (Read Only)" 
      value={today(getLocalTimeZone())} 
      isReadOnly 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";


export default function App() {
  let now = today(getLocalTimeZone());

  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();

  let isDateUnavailable = (date) =>
    isWeekend(date, locale) ||
    disabledRanges.some(
      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
    );

  return (
    <Calendar
      aria-label="Date (Unavailable)"
      isDateUnavailable={isDateUnavailable} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";
import {parseDate} from '@internationalized/date';

export default function App() {
  return (
    <div className="flex gap-x-4">
      <Calendar aria-label="Date (No Selection)" />
      <Calendar aria-label="Date (Uncontrolled)" defaultValue={parseDate("2020-02-03")} />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";

export default function App() {
  return (
    <Calendar 
      aria-label="Date (Visible Month)" 
      visibleMonths={3} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Calendar} from "@nextui-org/react";

export default function App() {
  return (
    <Calendar 
      aria-label="Date (Show Month and Year Picker)" 
      showMonthAndYearPickers 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Card, CardFooter, Image, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Card
      isFooterBlurred
      radius="lg"
      className="border-none"
    >
      <Image
        alt="Woman listing to music"
        className="object-cover"
        height={200}
        src="https://nextui.org/images/hero-card.jpeg"
        width={200}
      />
      <CardFooter className="justify-between before:bg-white/10 border-white/20 border-1 overflow-hidden py-1 absolute before:rounded-xl rounded-large bottom-1 w-[calc(100%_-_8px)] shadow-small ml-1 z-10">
        <p className="text-tiny text-white/80">Available soon.</p>
        <Button className="text-tiny text-white bg-black/20" variant="flat" color="default" radius="lg" size="sm">
          Notify me
        </Button>
      </CardFooter>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const HearIcon = `export const HeartIcon = ({
  size = 24,
  width,
  height,
  strokeWidth = 1.5,
  fill = "none",
  ...props
}) => (
  <svg
    aria-hidden="true"
    fill={fill}
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M12.62 20.81C12.28 20.93 11.72 20.93 11.38 20.81C8.48 19.82 2 15.69 2 8.68998C2 5.59998 4.49 3.09998 7.56 3.09998C9.38 3.09998 10.99 3.97998 12 5.33998C13.01 3.97998 14.63 3.09998 16.44 3.09998C19.51 3.09998 22 5.59998 22 8.68998C22 15.69 15.52 19.82 12.62 20.81Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
  </svg>
);`;

const PauseCircleIcon = `export const PauseCircleIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M11.9688 2C6.44875 2 1.96875 6.48 1.96875 12C1.96875 17.52 6.44875 22 11.9688 22C17.4888 22 21.9688 17.52 21.9688 12C21.9688 6.48 17.4988 2 11.9688 2ZM10.7188 15.03C10.7188 15.51 10.5188 15.7 10.0087 15.7H8.70875C8.19875 15.7 7.99875 15.51 7.99875 15.03V8.97C7.99875 8.49 8.19875 8.3 8.70875 8.3H9.99875C10.5087 8.3 10.7087 8.49 10.7087 8.97V15.03H10.7188ZM15.9987 15.03C15.9987 15.51 15.7987 15.7 15.2887 15.7H13.9987C13.4887 15.7 13.2887 15.51 13.2887 15.03V8.97C13.2887 8.49 13.4887 8.3 13.9987 8.3H15.2887C15.7987 8.3 15.9987 8.49 15.9987 8.97V15.03Z"
      fill="currentColor"
    />
  </svg>
);`;

const NextIcon = `export const NextIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M3.76172 7.21957V16.7896C3.76172 18.7496 5.89172 19.9796 7.59172 18.9996L11.7417 16.6096L15.8917 14.2096C17.5917 13.2296 17.5917 10.7796 15.8917 9.79957L11.7417 7.39957L7.59172 5.00957C5.89172 4.02957 3.76172 5.24957 3.76172 7.21957Z"
      fill="currentColor"
    />
    <path
      d="M20.2383 18.9303C19.8283 18.9303 19.4883 18.5903 19.4883 18.1803V5.82031C19.4883 5.41031 19.8283 5.07031 20.2383 5.07031C20.6483 5.07031 20.9883 5.41031 20.9883 5.82031V18.1803C20.9883 18.5903 20.6583 18.9303 20.2383 18.9303Z"
      fill="currentColor"
    />
  </svg>
);`;

const PreviousIcon = `export const PreviousIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M20.2409 7.21957V16.7896C20.2409 18.7496 18.1109 19.9796 16.4109 18.9996L12.2609 16.6096L8.11094 14.2096C6.41094 13.2296 6.41094 10.7796 8.11094 9.79957L12.2609 7.39957L16.4109 5.00957C18.1109 4.02957 20.2409 5.24957 20.2409 7.21957Z"
      fill="currentColor"
    />
    <path
      d="M3.76172 18.9303C3.35172 18.9303 3.01172 18.5903 3.01172 18.1803V5.82031C3.01172 5.41031 3.35172 5.07031 3.76172 5.07031C4.17172 5.07031 4.51172 5.41031 4.51172 5.82031V18.1803C4.51172 18.5903 4.17172 18.9303 3.76172 18.9303Z"
      fill="currentColor"
    />
  </svg>
);`;

const RepeatOneIcon = `export const RepeatOneIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M3.91 17.1814C3.72 17.1814 3.53 17.1114 3.38 16.9614C2.01 15.5814 1.25 13.7614 1.25 11.8314C1.25 7.82139 4.5 4.56139 8.5 4.56139L14.57 4.58139L13.48 3.54139C13.18 3.25139 13.17 2.78139 13.46 2.48139C13.75 2.18139 14.22 2.17139 14.52 2.46139L16.96 4.80139C17.18 5.01139 17.25 5.34139 17.14 5.62139C17.03 5.90139 16.75 6.09139 16.44 6.09139L8.5 6.07139C5.33 6.07139 2.75 8.66139 2.75 11.8414C2.75 13.3714 3.35 14.8214 4.44 15.9114C4.73 16.2014 4.73 16.6814 4.44 16.9714C4.29 17.1114 4.1 17.1814 3.91 17.1814Z"
      fill="currentColor"
    />
    <path
      d="M9.9999 21.75C9.8099 21.75 9.6299 21.68 9.4799 21.54L7.0399 19.2C6.8199 18.99 6.7499 18.66 6.8599 18.38C6.9799 18.1 7.2599 17.95 7.5599 17.91L15.5099 17.93C18.6799 17.93 21.2599 15.34 21.2599 12.16C21.2599 10.63 20.6599 9.18 19.5699 8.09C19.2799 7.8 19.2799 7.32 19.5699 7.03C19.8599 6.74 20.3399 6.74 20.6299 7.03C21.9999 8.41 22.7599 10.23 22.7599 12.16C22.7599 16.17 19.5099 19.43 15.5099 19.43L9.4399 19.41L10.5299 20.45C10.8299 20.74 10.8399 21.21 10.5499 21.51C10.3899 21.67 10.1999 21.75 9.9999 21.75Z"
      fill="currentColor"
    />
    <path
      d="M12.2485 15.4191C11.8385 15.4191 11.4985 15.0791 11.4985 14.6691V11.2791L11.3085 11.4891C11.0285 11.7991 10.5585 11.8191 10.2485 11.5491C9.93853 11.2791 9.91853 10.7991 10.1885 10.4891L11.6885 8.81909C11.8985 8.58909 12.2285 8.50909 12.5185 8.61909C12.8085 8.73909 12.9985 9.00909 12.9985 9.32909V14.6791C12.9985 15.0891 12.6585 15.4191 12.2485 15.4191Z"
      fill="currentColor"
    />
  </svg>
);`;

const ShuffleIcon = `export const ShuffleIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M21.7507 17.9809C21.7507 17.9609 21.7407 17.9409 21.7407 17.9209C21.7307 17.8409 21.7207 17.7609 21.6907 17.6909C21.6507 17.6009 21.6007 17.5309 21.5407 17.4609C21.5407 17.4609 21.5407 17.4509 21.5307 17.4509C21.4607 17.3809 21.3807 17.3309 21.2907 17.2909C21.2007 17.2509 21.1007 17.2309 21.0007 17.2309L16.3307 17.2509C16.3307 17.2509 16.3307 17.2509 16.3207 17.2509C15.7207 17.2509 15.1407 16.9709 14.7807 16.4909L13.5607 14.9209C13.3107 14.5909 12.8407 14.5309 12.5107 14.7909C12.1807 15.0509 12.1207 15.5109 12.3807 15.8409L13.6007 17.4109C14.2507 18.2509 15.2707 18.7509 16.3307 18.7509H16.3407L19.1907 18.7409L18.4807 19.4509C18.1907 19.7409 18.1907 20.2209 18.4807 20.5109C18.6307 20.6609 18.8207 20.7309 19.0107 20.7309C19.2007 20.7309 19.3907 20.6609 19.5407 20.5109L21.5407 18.5109C21.6107 18.4409 21.6607 18.3609 21.7007 18.2709C21.7307 18.1709 21.7507 18.0709 21.7507 17.9809Z"
      fill="currentColor"
    />
    <path
      d="M8.42 6.69172C7.77 5.79172 6.73 5.26172 5.62 5.26172C5.61 5.26172 5.61 5.26172 5.6 5.26172L3 5.27172C2.59 5.27172 2.25 5.61172 2.25 6.02172C2.25 6.43172 2.59 6.77172 3 6.77172L5.61 6.76172H5.62C6.25 6.76172 6.84 7.06172 7.2 7.57172L8.28 9.07172C8.43 9.27172 8.66 9.38172 8.89 9.38172C9.04 9.38172 9.2 9.33172 9.33 9.24172C9.67 8.99172 9.74 8.52172 9.5 8.19172L8.42 6.69172Z"
      fill="currentColor"
    />
    <path
      d="M21.74 6.07875C21.74 6.05875 21.75 6.03875 21.75 6.02875C21.75 5.92875 21.73 5.82875 21.69 5.73875C21.65 5.64875 21.6 5.56875 21.53 5.49875L19.53 3.49875C19.24 3.20875 18.76 3.20875 18.47 3.49875C18.18 3.78875 18.18 4.26875 18.47 4.55875L19.18 5.26875L16.45 5.25875C16.44 5.25875 16.44 5.25875 16.43 5.25875C15.28 5.25875 14.2 5.82875 13.56 6.79875L7.17 16.3787C6.81 16.9187 6.2 17.2487 5.55 17.2487H5.54L3 17.2287C2.59 17.2287 2.25 17.5587 2.25 17.9787C2.25 18.3887 2.58 18.7287 3 18.7287L5.55 18.7387C5.56 18.7387 5.56 18.7387 5.57 18.7387C6.73 18.7387 7.8 18.1688 8.44 17.1988L14.83 7.61875C15.19 7.07875 15.8 6.74875 16.45 6.74875H16.46L21 6.76875C21.1 6.76875 21.19 6.74875 21.29 6.70875C21.38 6.66875 21.46 6.61875 21.53 6.54875C21.53 6.54875 21.53 6.53875 21.54 6.53875C21.6 6.46875 21.66 6.39875 21.69 6.30875C21.72 6.23875 21.73 6.15875 21.74 6.07875Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Card, CardBody, Image, Button, Slider} from "@nextui-org/react";
import {HeartIcon} from "./HeartIcon";
import {PauseCircleIcon} from "./PauseCircleIcon";
import {NextIcon} from "./NextIcon";
import {PreviousIcon} from "./PreviousIcon";
import {RepeatOneIcon} from "./RepeatOneIcon";
import {ShuffleIcon} from "./ShuffleIcon";

export default function App() {
  const [liked, setLiked] = React.useState(false);

  return (
    <Card
      isBlurred
      className="border-none bg-background/60 dark:bg-default-100/50 max-w-[610px]"
      shadow="sm"
    >
      <CardBody>
        <div className="grid grid-cols-6 md:grid-cols-12 gap-6 md:gap-4 items-center justify-center">
          <div className="relative col-span-6 md:col-span-4">
            <Image
              alt="Album cover"
              className="object-cover"
              height={200}
              shadow="md"
              src="https://nextui.org/images/album-cover.png"
              width="100%"
            />
          </div>

          <div className="flex flex-col col-span-6 md:col-span-8">
            <div className="flex justify-between items-start">
              <div className="flex flex-col gap-0">
                <h3 className="font-semibold text-foreground/90">Daily Mix</h3>
                <p className="text-small text-foreground/80">12 Tracks</p>
                <h1 className="text-large font-medium mt-2">Frontend Radio</h1>
              </div>
              <Button
                isIconOnly
                className="text-default-900/60 data-[hover]:bg-foreground/10 -translate-y-2 translate-x-2"
                radius="full"
                variant="light"
                onPress={() => setLiked((v) => !v)}
              >
                <HeartIcon
                  className={liked ? "[&>path]:stroke-transparent" : ""}
                  fill={liked ? "currentColor" : "none"}
                />
              </Button>
            </div>

            <div className="flex flex-col mt-3 gap-1">
              <Slider
                aria-label="Music progress"
                classNames={{
                  track: "bg-default-500/30",
                  thumb: "w-2 h-2 after:w-2 after:h-2 after:bg-foreground",
                }}
                color="foreground"
                defaultValue={33}
                size="sm"
              />
              <div className="flex justify-between">
                <p className="text-small">1:23</p>
                <p className="text-small text-foreground/50">4:32</p>
              </div>
            </div>

            <div className="flex w-full items-center justify-center">
              <Button
                isIconOnly
                className="data-[hover]:bg-foreground/10"
                radius="full"
                variant="light"
              >
                <RepeatOneIcon className="text-foreground/80" />
              </Button>
              <Button
                isIconOnly
                className="data-[hover]:bg-foreground/10"
                radius="full"
                variant="light"
              >
                <PreviousIcon />
              </Button>
              <Button
                isIconOnly
                className="w-auto h-auto data-[hover]:bg-foreground/10"
                radius="full"
                variant="light"
              >
                <PauseCircleIcon size={54} />
              </Button>
              <Button
                isIconOnly
                className="data-[hover]:bg-foreground/10"
                radius="full"
                variant="light"
              >
                <NextIcon />
              </Button>
              <Button
                isIconOnly
                className="data-[hover]:bg-foreground/10"
                radius="full"
                variant="light"
              >
                <ShuffleIcon className="text-foreground/80" />
              </Button>
            </div>
          </div>
        </div>
      </CardBody>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
  "/HeartIcon.jsx": HearIcon,
  "/PauseCircleIcon.jsx": PauseCircleIcon,
  "/NextIcon.jsx": NextIcon,
  "/PreviousIcon.jsx": PreviousIcon,
  "/RepeatOneIcon.jsx": RepeatOneIcon,
  "/ShuffleIcon.jsx": ShuffleIcon,
};

export default {
  ...react,
};

const App = `import {Card, CardHeader, CardBody, CardFooter, Avatar, Button} from "@nextui-org/react";

export default function App() {
  const [isFollowed, setIsFollowed] = React.useState(false);

  return (
    <Card className="max-w-[340px]">
      <CardHeader className="justify-between">
        <div className="flex gap-5">
          <Avatar isBordered radius="full" size="md" src="https://nextui.org/avatars/avatar-1.png" />
          <div className="flex flex-col gap-1 items-start justify-center">
            <h4 className="text-small font-semibold leading-none text-default-600">Zoey Lang</h4>
            <h5 className="text-small tracking-tight text-default-400">@zoeylang</h5>
          </div>
        </div>
        <Button
          className={isFollowed ? "bg-transparent text-foreground border-default-200" : ""}
          color="primary"
          radius="full"
          size="sm"
          variant={isFollowed ? "bordered" : "solid"}
          onPress={() => setIsFollowed(!isFollowed)}
        >
          {isFollowed ? "Unfollow" : "Follow"}
        </Button>
      </CardHeader>
      <CardBody className="px-3 py-0 text-small text-default-400">
        <p>
          Frontend developer and UI/UX enthusiast. Join me on this coding adventure!
        </p>
        <span className="pt-2">
          #FrontendWithZoey 
          <span className="py-2" aria-label="computer" role="img">
            💻
          </span>
        </span>
      </CardBody>
      <CardFooter className="gap-3">
        <div className="flex gap-1">
          <p className="font-semibold text-default-400 text-small">4</p>
          <p className=" text-default-400 text-small">Following</p>
        </div>
        <div className="flex gap-1">
          <p className="font-semibold text-default-400 text-small">97.1K</p>
          <p className="text-default-400 text-small">Followers</p>
        </div>
      </CardFooter>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Card, CardHeader, CardBody, CardFooter, Image, Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="max-w-[900px] gap-2 grid grid-cols-12 grid-rows-2 px-8">
    <Card className="col-span-12 sm:col-span-4 h-[300px]">
      <CardHeader className="absolute z-10 top-1 flex-col !items-start">
        <p className="text-tiny text-white/60 uppercase font-bold">What to watch</p>
        <h4 className="text-white font-medium text-large">Stream the Acme event</h4>
      </CardHeader>
      <Image
        removeWrapper
        alt="Card background"
        className="z-0 w-full h-full object-cover"
        src="https://nextui.org/images/card-example-4.jpeg"
      />
    </Card>
    <Card className="col-span-12 sm:col-span-4 h-[300px]">
      <CardHeader className="absolute z-10 top-1 flex-col !items-start">
        <p className="text-tiny text-white/60 uppercase font-bold">Plant a tree</p>
        <h4 className="text-white font-medium text-large">Contribute to the planet</h4>
      </CardHeader>
      <Image
        removeWrapper
        alt="Card background"
        className="z-0 w-full h-full object-cover"
        src="https://nextui.org/images/card-example-3.jpeg"
      />
    </Card>
    <Card className="col-span-12 sm:col-span-4 h-[300px]">
      <CardHeader className="absolute z-10 top-1 flex-col !items-start">
        <p className="text-tiny text-white/60 uppercase font-bold">Supercharged</p>
        <h4 className="text-white font-medium text-large">Creates beauty like a beast</h4>
      </CardHeader>
      <Image
        removeWrapper
        alt="Card background"
        className="z-0 w-full h-full object-cover"
        src="https://nextui.org/images/card-example-2.jpeg"
      />
    </Card>
    <Card isFooterBlurred className="w-full h-[300px] col-span-12 sm:col-span-5">
      <CardHeader className="absolute z-10 top-1 flex-col items-start">
        <p className="text-tiny text-white/60 uppercase font-bold">New</p>
        <h4 className="text-black font-medium text-2xl">Acme camera</h4>
      </CardHeader>
      <Image
        removeWrapper
        alt="Card example background"
        className="z-0 w-full h-full scale-125 -translate-y-6 object-cover"
        src="https://nextui.org/images/card-example-6.jpeg"
      />
      <CardFooter className="absolute bg-white/30 bottom-0 border-t-1 border-zinc-100/50 z-10 justify-between">
        <div>
          <p className="text-black text-tiny">Available soon.</p>
          <p className="text-black text-tiny">Get notified.</p>
        </div>
        <Button className="text-tiny" color="primary" radius="full" size="sm">
          Notify Me
        </Button>
      </CardFooter>
    </Card>
    <Card isFooterBlurred className="w-full h-[300px] col-span-12 sm:col-span-7">
      <CardHeader className="absolute z-10 top-1 flex-col items-start">
        <p className="text-tiny text-white/60 uppercase font-bold">Your day your way</p>
        <h4 className="text-white/90 font-medium text-xl">Your checklist for better sleep</h4>
      </CardHeader>
      <Image
        removeWrapper
        alt="Relaxing app background"
        className="z-0 w-full h-full object-cover"
        src="https://nextui.org/images/card-example-5.jpeg"
      />
      <CardFooter className="absolute bg-black/40 bottom-0 z-10 border-t-1 border-default-600 dark:border-default-100">
        <div className="flex flex-grow gap-2 items-center">
          <Image
            alt="Breathing app icon"
            className="rounded-full w-10 h-11 bg-black"
            src="https://nextui.org/images/breathing-app-icon.jpeg"
          />
          <div className="flex flex-col">
            <p className="text-tiny text-white/60">Breathing App</p>
            <p className="text-tiny text-white/60">Get a good night's sleep.</p>
          </div>
        </div>
        <Button radius="full" size="sm">Get App</Button>
      </CardFooter>
    </Card>
  </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Card, CardHeader, CardBody, CardFooter, Divider, Link, Image} from "@nextui-org/react";

export default function App() {
  return (
    <Card className="max-w-[400px]">
      <CardHeader className="flex gap-3">
        <Image
          alt="nextui logo"
          height={40}
          radius="sm"
          src="https://avatars.githubusercontent.com/u/86160567?s=200&v=4"
          width={40}
        />
        <div className="flex flex-col">
          <p className="text-md">NextUI</p>
          <p className="text-small text-default-500">nextui.org</p>
        </div>
      </CardHeader>
      <Divider/>
      <CardBody>
        <p>Make beautiful websites regardless of your design experience.</p>
      </CardBody>
      <Divider/>
      <CardFooter>
        <Link
          isExternal
          showAnchorIcon
          href="https://github.com/nextui-org/nextui"
        >
          Visit source code on GitHub.
        </Link>
      </CardFooter>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Card, CardHeader, CardBody, Image} from "@nextui-org/react";

export default function App() {
  return (
    <Card className="py-4">
      <CardHeader className="pb-0 pt-2 px-4 flex-col items-start">
        <p className="text-tiny uppercase font-bold">Daily Mix</p>
        <small className="text-default-500">12 Tracks</small>
        <h4 className="font-bold text-large">Frontend Radio</h4>
      </CardHeader>
      <CardBody className="overflow-visible py-2">
        <Image
          alt="Card background"
          className="object-cover rounded-xl"
          src="https://nextui.org/images/hero-card-complete.jpeg"
          width={270}
        />
      </CardBody>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import divider from "./divider";
import image from "./image";
import composition from "./composition";
import blurred from "./blurred";
import primaryAction from "./primary-action";
import blurredFooter from "./blurred-footer";
import coverImage from "./cover-image";

export const cardContent = {
  usage,
  divider,
  image,
  composition,
  blurred,
  primaryAction,
  blurredFooter,
  coverImage,
};

const App = `import {Card, CardBody, CardFooter, Image} from "@nextui-org/react";

export default function App() {
  const list = [
    {
      title: "Orange",
      img: "/images/fruit-1.jpeg",
      price: "$5.50",
    },
    {
      title: "Tangerine",
      img: "/images/fruit-2.jpeg",
      price: "$3.00",
    },
    {
      title: "Raspberry",
      img: "/images/fruit-3.jpeg",
      price: "$10.00",
    },
    {
      title: "Lemon",
      img: "/images/fruit-4.jpeg",
      price: "$5.30",
    },
    {
      title: "Avocado",
      img: "/images/fruit-5.jpeg",
      price: "$15.70",
    },
    {
      title: "Lemon 2",
      img: "/images/fruit-6.jpeg",
      price: "$8.00",
    },
    {
      title: "Banana",
      img: "/images/fruit-7.jpeg",
      price: "$7.50",
    },
    {
      title: "Watermelon",
      img: "/images/fruit-8.jpeg",
      price: "$12.20",
    },
  ];

  return (
    <div className="gap-2 grid grid-cols-2 sm:grid-cols-4">
      {list.map((item, index) => (
        <Card shadow="sm" key={index} isPressable onPress={() => console.log("item pressed")}>
          <CardBody className="overflow-visible p-0">
            <Image
              shadow="sm"
              radius="lg"
              width="100%"
              alt={item.title}
              className="w-full object-cover h-[140px]"
              src={item.img}
            />
          </CardBody>
          <CardFooter className="text-small justify-between">
            <b>{item.title}</b>
            <p className="text-default-500">{item.price}</p>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Card, CardBody} from "@nextui-org/react";

export default function App() {
  return (
    <Card>
      <CardBody>
        <p>Make beautiful websites regardless of your design experience.</p>
      </CardBody>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Checkbox defaultSelected color="default">Default</Checkbox>
      <Checkbox defaultSelected color="primary">Primary</Checkbox>
      <Checkbox defaultSelected color="secondary">Secondary</Checkbox>
      <Checkbox defaultSelected color="success">Success</Checkbox>
      <Checkbox defaultSelected color="warning">Warning</Checkbox>
      <Checkbox defaultSelected color="danger">Danger</Checkbox>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  const [isSelected, setIsSelected] = React.useState(false);

  return (
    <div className="flex flex-col gap-2">
      <Checkbox isSelected={isSelected} onValueChange={setIsSelected}>
        Subscribe (controlled)
      </Checkbox>
      <p className="text-default-500">
        Selected: {isSelected ? "true" : "false"}
      </p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const HeartIcon = `export const HeartIcon = ({ size, height, width, ...props }) => {
  // avoid passing non-DOM attributes to svg
  const {isSelected, isIndeterminate, disableAnimation, ...otherProps} = props;

  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill='fill'
      xmlns="http://www.w3.org/2000/svg"
      {...otherProps}
    >
      <path
        d="M12.62 20.81c-.34.12-.9.12-1.24 0C8.48 19.82 2 15.69 2 8.69 2 5.6 4.49 3.1 7.56 3.1c1.82 0 3.43.88 4.44 2.24a5.53 5.53 0 0 1 4.44-2.24C19.51 3.1 22 5.6 22 8.69c0 7-6.48 11.13-9.38 12.12Z"
        fill='currentColor'
      />
    </svg>
  );
};
`;

const PlusIcon = `export const PlusIcon = ({ size, height, width, ...props }) => {
  // avoid passing non-DOM attributes to svg
  const {isSelected, isIndeterminate, disableAnimation, ...otherProps} = props;

  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...otherProps}
    >
      <path
        d="M6 12H18"
        stroke="currentColor"
        stroke-width="3"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
      <path
        d="M12 18V6"
        stroke="currentColor"
        stroke-width="3"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
    </svg>
  );
};`;

const App = `import {Checkbox} from "@nextui-org/react";
import {HeartIcon} from './HeartIcon.jsx';  
import {PlusIcon} from './PlusIcon.jsx';

export default function App() {
  return (
    <div className="flex gap-4">
      <Checkbox defaultSelected icon={<HeartIcon/>}>Option</Checkbox>
      <Checkbox defaultSelected icon={<PlusIcon/>} color="warning">Option</Checkbox>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/HeartIcon.jsx": HeartIcon,
  "/PlusIcon.jsx": PlusIcon,
};

export default {
  ...react,
};

const CheckIcon = `export const CheckIcon = (props) =>
  (
    <svg
      aria-hidden="true"
      fill="none"
      focusable="false"
      height="1em"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      viewBox="0 0 24 24"
      width="1em"
      {...props}
    >
      <polyline points="20 6 9 17 4 12" />
    </svg>
  );`;

const App = `import {useCheckbox, Chip, VisuallyHidden, tv} from "@nextui-org/react";
import {CheckIcon} from './CheckIcon.jsx'

const checkbox = tv({
  slots: {
    base: "border-default hover:bg-default-200",
    content: "text-default-500"
  },
  variants: {
    isSelected: {
      true: {
        base: "border-primary bg-primary hover:bg-primary-500 hover:border-primary-500",
        content: "text-primary-foreground pl-1"
      }
    },
    isFocusVisible: {
      true: { 
        base: "outline-none ring-2 ring-focus ring-offset-2 ring-offset-background",
      }
    }
  }
})

export default function App() {
  const {
    children,
    isSelected,
    isFocusVisible,
    getBaseProps,
    getLabelProps,
    getInputProps,
  } = useCheckbox({
    defaultSelected: true,
  })

  const styles = checkbox({ isSelected, isFocusVisible })

  return (
    <label {...getBaseProps()}>
      <VisuallyHidden>
        <input {...getInputProps()} />
      </VisuallyHidden>
      <Chip
        classNames={{
          base: styles.base(),
          content: styles.content(),
        }}
        color="primary"
        startContent={isSelected ? <CheckIcon className="ml-1" /> : null}
        variant="faded"
        {...getLabelProps()}
      >
        {children ? children : isSelected ? "Enabled" : "Disabled"}
      </Chip>
    </label>
  );
}`;

const react = {
  "/App.jsx": App,
  "./CheckIcon.jsx": CheckIcon,
};

export default {
  ...react,
};

const App = `import {Checkbox, Link, User, Chip, cn} from "@nextui-org/react";

export default function App() {
  const [isSelected, setIsSelected] = React.useState(false);

  const user = {
    name: "Junior Garcia",
    avatar: "https://avatars.githubusercontent.com/u/30373425?v=4",
    username: "jrgarciadev",
    url: "https://twitter.com/jrgarciadev",
    role: "Software Developer",
    status: "Active",
  }

  return (
    <Checkbox       
      aria-label={user.name}
      classNames={{
        base: cn(
          "inline-flex w-full max-w-md bg-content1",
          "hover:bg-content2 items-center justify-start",
          "cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent",
          "data-[selected=true]:border-primary",
        ),
        label: "w-full",
      }}
      isSelected={isSelected}
      onValueChange={setIsSelected}
    >
      <div className="w-full flex justify-between gap-2">
        <User
          avatarProps={{size: "md", src: user.avatar}}
          description={
            <Link isExternal href={user.url} size="sm">
              @{user.username}
            </Link>
          }
          name={user.name}
        />
        <div className="flex flex-col items-end gap-1">
          <span className="text-tiny text-default-500">{user.role}</span>
          <Chip color="success" size="sm" variant="flat">
            {user.status}
          </Chip>
        </div>
      </div>
    </Checkbox>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Checkbox isDisabled>Option</Checkbox>
      <Checkbox isDisabled defaultSelected>Option</Checkbox>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <Checkbox isIndeterminate>Option</Checkbox>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";
import disabled from "./disabled";
import radius from "./radius";
import indeterminate from "./indeterminate";
import lineThrough from "./line-through";
import customCheckIcon from "./custom-check-icon";
import controlled from "./controlled";
import customStyles from "./custom-styles";
import customImplementation from "./custom-implementation";

export const checkboxContent = {
  usage,
  sizes,
  colors,
  disabled,
  radius,
  indeterminate,
  lineThrough,
  customCheckIcon,
  controlled,
  customStyles,
  customImplementation,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <Checkbox defaultSelected lineThrough>Option</Checkbox>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Checkbox defaultSelected radius="full">Full</Checkbox>
      <Checkbox defaultSelected radius="lg">Large</Checkbox>
      <Checkbox defaultSelected radius="md">Medium</Checkbox>
      <Checkbox defaultSelected radius="sm">Small</Checkbox>
      <Checkbox defaultSelected radius="none">None</Checkbox>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Checkbox defaultSelected size="sm">Small</Checkbox>
      <Checkbox defaultSelected size="md">Medium</Checkbox>
      <Checkbox defaultSelected size="lg">Large</Checkbox>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <Checkbox defaultSelected>Option</Checkbox>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CheckboxGroup, Checkbox} from "@nextui-org/react";

export default function App() {
  const [selected, setSelected] = React.useState(["buenos-aires", "sydney"]);

  return (
    <div className="flex flex-col gap-3">
      <CheckboxGroup
        label="Select cities"
        color="warning"
        value={selected}
        onValueChange={setSelected}
      >
        <Checkbox value="buenos-aires">Buenos Aires</Checkbox>
        <Checkbox value="sydney">Sydney</Checkbox>
        <Checkbox value="san-francisco">San Francisco</Checkbox>
      </CheckboxGroup>
      <p className="text-default-500 text-small">Selected: {selected.join(", ")}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const CheckIcon = `export const CheckIcon = (props) =>
  (
    <svg
      aria-hidden="true"
      fill="none"
      focusable="false"
      height="1em"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      viewBox="0 0 24 24"
      width="1em"
      {...props}
    >
      <polyline points="20 6 9 17 4 12" />
    </svg>
  );`;

const CustomCheckbox = `import {useCheckbox, Chip, VisuallyHidden, tv} from "@nextui-org/react";
import {CheckIcon} from './CheckIcon.jsx'

const checkbox = tv({
  slots: {
    base: "border-default hover:bg-default-200",
    content: "text-default-500"
  },
  variants: {
    isSelected: {
      true: {
        base: "border-primary bg-primary hover:bg-primary-500 hover:border-primary-500",
        content: "text-primary-foreground pl-1"
      }
    },
    isFocusVisible: {
      true: { 
        base: "outline-none ring-2 ring-focus ring-offset-2 ring-offset-background",
      }
    }
  }
})

export const CustomCheckbox = (props) => {
  const {
    children,
    isSelected,
    isFocusVisible,
    getBaseProps,
    getLabelProps,
    getInputProps,
  } = useCheckbox({
    ...props
  })

  const styles = checkbox({ isSelected, isFocusVisible })

  return (
    <label {...getBaseProps()}>
      <VisuallyHidden>
        <input {...getInputProps()} />
      </VisuallyHidden>
      <Chip
        classNames={{
          base: styles.base(),
          content: styles.content(),
        }}
        color="primary"
        startContent={isSelected ? <CheckIcon className="ml-1" /> : null}
        variant="faded"
        {...getLabelProps()}
      >
        {children ? children : isSelected ? "Enabled" : "Disabled"}
      </Chip>
    </label>
  );
}`;

const App = `import {CheckboxGroup} from "@nextui-org/react";
import {CustomCheckbox} from "./CustomCheckbox";

export default function App() {
  const [groupSelected, setGroupSelected] = React.useState([]);

  return (
    <div className="flex flex-col gap-1 w-full">
      <CheckboxGroup
        className="gap-1"
        label="Select amenities"
        orientation="horizontal"
        value={groupSelected}
        onChange={setGroupSelected}
      >
        <CustomCheckbox value="wifi">Wifi</CustomCheckbox>
        <CustomCheckbox value="tv">TV</CustomCheckbox>
        <CustomCheckbox value="kitchen">Kitchen</CustomCheckbox>
        <CustomCheckbox value="parking">Parking</CustomCheckbox>
        <CustomCheckbox value="pool">Pool</CustomCheckbox>
        <CustomCheckbox value="gym">Gym</CustomCheckbox>
      </CheckboxGroup>
      <p className="mt-4 ml-1 text-default-500">
        Selected: {groupSelected.join(", ")}
      </p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/CustomCheckbox.jsx": CustomCheckbox,
  "/CheckIcon.jsx": CheckIcon,
};

export default {
  ...react,
};

const CustomCheckbox = `import {Checkbox, Link, User, Chip, cn} from "@nextui-org/react";

export const CustomCheckbox = ({ user, statusColor, value }) => {
  return (
    <Checkbox
      aria-label={user.name}
      classNames={{
        base: cn(
          "inline-flex max-w-md w-full bg-content1 m-0",
          "hover:bg-content2 items-center justify-start",
          "cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent",
          "data-[selected=true]:border-primary"
        ),
        label: "w-full",
      }}
      value={value}
    >
      <div className="w-full flex justify-between gap-2">
        <User
          avatarProps={{ size: "md", src: user.avatar }}
          description={
            <Link isExternal href={user.url} size="sm">
              @{user.username}
            </Link>
          }
          name={user.name}
        />
        <div className="flex flex-col items-end gap-1">
          <span className="text-tiny text-default-500">{user.role}</span>
          <Chip color={statusColor} size="sm" variant="flat">
            {user.status}
          </Chip>
        </div>
      </div>
    </Checkbox>
  );
};`;

const App = `import {CheckboxGroup} from "@nextui-org/react";
import {CustomCheckbox} from "./CustomCheckbox";

export default function App() {
  const [groupSelected, setGroupSelected] = React.useState([]);

  return (
    <div className="flex flex-col gap-1 w-full">
      <CheckboxGroup
        label="Select employees"
        value={groupSelected}
        onChange={setGroupSelected}
        classNames={{
          base: "w-full"
        }}
      >
        <CustomCheckbox
          value="junior"
          user={{
            name: "Junior Garcia",
            avatar: "https://avatars.githubusercontent.com/u/30373425?v=4",
            username: "jrgarciadev",
            url: "https://twitter.com/jrgarciadev",
            role: "Software Developer",
            status: "Active",
          }}
          statusColor="secondary"
        />
        <CustomCheckbox
          value="johndoe"
          user={{
            name: "John Doe",
            avatar: "https://i.pravatar.cc/300?u=a042581f4e29026707d",
            username: "johndoe",
            url: "#",
            role: "Product Designer",
            status: "Vacation",
          }}
          statusColor="warning"
        />
        <CustomCheckbox
          value="zoeylang"
          user={{
            name: "Zoey Lang",
            avatar: "https://i.pravatar.cc/300?u=a042581f4e29026704d",
            username: "zoeylang",
            url: "#",
            role: "Technical Writer",
            status: "Out of office",
          }}
          statusColor="danger"
        />
        <CustomCheckbox
          value="william"
          user={{
            name: "William Howard",
            avatar: "https://i.pravatar.cc/300?u=a048581f4e29026701d",
            username: "william",
            url: "#",
            role: "Sales Manager",
            status: "Active",
          }}
          statusColor="secondary"
        />
      </CheckboxGroup>
      <p className="mt-4 ml-1 text-default-500">
        Selected: {groupSelected.join(", ")}
      </p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/CustomCheckbox.jsx": CustomCheckbox,
};

export default {
  ...react,
};

const App = `import {CheckboxGroup, Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <CheckboxGroup
      isDisabled
      label="Select cities"
      defaultValue={["buenos-aires", "london"]}
    >
      <Checkbox value="buenos-aires">Buenos Aires</Checkbox>
      <Checkbox value="sydney">Sydney</Checkbox>
      <Checkbox value="san-francisco">San Francisco</Checkbox>
      <Checkbox value="london">London</Checkbox>
      <Checkbox value="tokyo">Tokyo</Checkbox>
    </CheckboxGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CheckboxGroup, Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <CheckboxGroup
      label="Select cities"
      orientation="horizontal"
      color="secondary"
      defaultValue={["buenos-aires", "san-francisco"]}
    >
      <Checkbox value="buenos-aires">Buenos Aires</Checkbox>
      <Checkbox value="sydney">Sydney</Checkbox>
      <Checkbox value="san-francisco">San Francisco</Checkbox>
      <Checkbox value="london">London</Checkbox>
      <Checkbox value="tokyo">Tokyo</Checkbox>
    </CheckboxGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import horizontal from "./horizontal";
import controlled from "./controlled";
import customStyles from "./custom-styles";
import customImplementation from "./custom-implementation";
import invalid from "./invalid";

export const checkboxGroupContent = {
  usage,
  disabled,
  horizontal,
  controlled,
  customStyles,
  invalid,
  customImplementation,
};

const App = `import {CheckboxGroup, Checkbox} from "@nextui-org/react";

export default function App() {
  const [isInvalid, setIsInvalid] = React.useState(true);

  return (
    <CheckboxGroup
      isRequired
      description="Select the cities you want to visit"
      isInvalid={isInvalid}
      label="Select cities"
      onValueChange={(value) => {
        setIsInvalid(value.length < 1);
      }}
    >
      <Checkbox value="buenos-aires">Buenos Aires</Checkbox>
      <Checkbox value="sydney">Sydney</Checkbox>
      <Checkbox value="san-francisco">San Francisco</Checkbox>
      <Checkbox value="london">London</Checkbox>
      <Checkbox value="tokyo">Tokyo</Checkbox>
    </CheckboxGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CheckboxGroup, Checkbox} from "@nextui-org/react";

export default function App() {
  return (
    <CheckboxGroup
      label="Select cities"
      defaultValue={["buenos-aires", "london"]}
    >
      <Checkbox value="buenos-aires">Buenos Aires</Checkbox>
      <Checkbox value="sydney">Sydney</Checkbox>
      <Checkbox value="san-francisco">San Francisco</Checkbox>
      <Checkbox value="london">London</Checkbox>
      <Checkbox value="tokyo">Tokyo</Checkbox>
    </CheckboxGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip
        variant="flat"
        avatar={
          <Avatar
            name="JW"
            src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
          />
        }
      >
        Avatar
      </Chip>
      <Chip
        variant="flat"
        avatar={
          <Avatar name="JW" size="sm" getInitials={(name) => name.charAt(0)} />
        }
      >
        Avatar
      </Chip>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip onClose={() => console.log("close")}>Chip</Chip>
      <Chip onClose={() => console.log("close")} variant="bordered">
        Chip
      </Chip>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip color="default">Default</Chip>
      <Chip color="primary">Primary</Chip>
      <Chip color="secondary">Secondary</Chip>
      <Chip color="success">Success</Chip>
      <Chip color="warning">Warning</Chip>
      <Chip color="danger">Danger</Chip>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <Chip
      variant="shadow"
      classNames={{
        base: "bg-gradient-to-br from-indigo-500 to-pink-500 border-small border-white/50 shadow-pink-500/30",
        content: "drop-shadow shadow-black text-white",
      }}
    >
      New
    </Chip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <Chip isDisabled color="primary">Chip</Chip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import sizes from "./sizes";
import colors from "./colors";
import radius from "./radius";
import variants from "./variants";
import startEndContent from "./start-end-content";
import closeButton from "./close-button";
import avatar from "./avatar";
import list from "./list";
import customStyles from "./custom-styles";

export const chipContent = {
  usage,
  disabled,
  sizes,
  colors,
  radius,
  variants,
  startEndContent,
  closeButton,
  avatar,
  list,
  customStyles,
};

const App = `import {Chip} from "@nextui-org/react";

const initialFruits = ["Apple", "Banana", "Cherry", "Watermelon", "Orange"]

export default function App() {
  const [fruits, setFruits] = React.useState(initialFruits);

  const handleClose = (fruitToRemove) => {
    setFruits(fruits.filter(fruit => fruit !== fruitToRemove));
    if (fruits.length === 1) {
      setFruits(initialFruits);
    }
  };

  return (
    <div className="flex gap-2">
      {fruits.map((fruit, index) => (
        <Chip key={index} onClose={() => handleClose(fruit)} variant="flat">
          {fruit}
        </Chip>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip radius="full">Full</Chip>
      <Chip radius="lg">Large</Chip>
      <Chip radius="md">Medium</Chip>
      <Chip radius="sm">Small</Chip>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip size="sm">Small</Chip>
      <Chip size="md">Medium</Chip>
      <Chip size="lg">Large</Chip>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

export const NotificationIcon = `export const NotificationIcon = ({size, height, width, ...props}) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        clipRule="evenodd"
        d="M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z"
        fill='currentColor'
        fillRule="evenodd"
      />
    </svg>
  );
};`;

export const CheckIcon = `export const CheckIcon = ({
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.78 9.7L11.11 15.37C10.97 15.51 10.78 15.59 10.58 15.59C10.38 15.59 10.19 15.51 10.05 15.37L7.22 12.54C6.93 12.25 6.93 11.77 7.22 11.48C7.51 11.19 7.99 11.19 8.28 11.48L10.58 13.78L15.72 8.64C16.01 8.35 16.49 8.35 16.78 8.64C17.07 8.93 17.07 9.4 16.78 9.7Z" fill="currentColor"/>
    </svg>
  );
};`;

const App = `import {Chip} from "@nextui-org/react";
import {NotificationIcon} from "./NotificationIcon";
import {CheckIcon} from "./CheckIcon";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip
        startContent={<CheckIcon size={18} />}
        variant="faded"
        color="success"
      >
        Chip
      </Chip>
      <Chip
        endContent={<NotificationIcon size={18} />}
        variant="flat"
        color="secondary"
      >
        Chip
      </Chip>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/NotificationIcon.jsx": NotificationIcon,
  "/CheckIcon.jsx": CheckIcon,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <Chip>Chip</Chip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Chip} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Chip color="warning" variant="solid">Solid</Chip>
      <Chip color="warning" variant="bordered">Bordered</Chip>
      <Chip color="warning" variant="light">Light</Chip>
      <Chip color="warning" variant="flat">Flat</Chip>
      <Chip color="warning" variant="faded">Faded</Chip>
      <Chip color="warning" variant="shadow">Shadow</Chip>
      <Chip color="warning" variant="dot">Dot</Chip>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <CircularProgress color="default" aria-label="Loading..."/>
      <CircularProgress color="primary" aria-label="Loading..."/>
      <CircularProgress color="secondary" aria-label="Loading..."/>
      <CircularProgress color="success" aria-label="Loading..."/>
      <CircularProgress color="warning" aria-label="Loading..."/>
      <CircularProgress color="danger" aria-label="Loading..."/>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress, Card, CardBody, CardFooter, Chip} from "@nextui-org/react";

export default function App() {
  return (
    <Card className="w-[240px] h-[240px] border-none bg-gradient-to-br from-violet-500 to-fuchsia-500">
      <CardBody className="justify-center items-center pb-0">
        <CircularProgress
          classNames={{
            svg: "w-36 h-36 drop-shadow-md",
            indicator: "stroke-white",
            track: "stroke-white/10",
            value: "text-3xl font-semibold text-white",
          }}
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </CardBody>
      <CardFooter className="justify-center items-center pt-0">
        <Chip
          classNames={{
            base: "border-1 border-white/30",
            content: "text-white/90 text-small font-semibold",
          }}
          variant="bordered"
        >
          2800 Data points
        </Chip>
      </CardFooter>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";
import label from "./label";
import value from "./value";
import valueFormatting from "./value-formatting";
import customStyles from "./custom-styles";

export const circularProgressContent = {
  usage,
  sizes,
  colors,
  label,
  value,
  valueFormatting,
  customStyles,
};

const App = `import {CircularProgress} from "@nextui-org/react";

export default function App() {
  return (
    <CircularProgress label="Loading..." />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <CircularProgress size="sm" aria-label="Loading..."/>
      <CircularProgress size="md" aria-label="Loading..."/>
      <CircularProgress size="lg" aria-label="Loading..."/>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress} from "@nextui-org/react";

export default function App() {
  return (
    <CircularProgress aria-label="Loading..." />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress} from "@nextui-org/react";

export default function App() {
  return (
    <CircularProgress
      label="Speed"
      size="lg"
      value={70}
      color="success"
      formatOptions={{ style: "unit", unit: "kilometer" }}
      showValueLabel={true}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState(0);

  React.useEffect(() => {
    const interval = setInterval(() => {
      setValue((v) => (v >= 100 ? 0 : v + 10));
    }, 500);

    return () => clearInterval(interval);
  }, []);

  return (
    <CircularProgress
      aria-label="Loading..."
      size="lg"
      value={value}
      color="warning"
      showValueLabel={true}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Code} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4">
      <Code color="default">npm install @nextui-org/react</Code>
      <Code color="primary">npm install @nextui-org/react</Code>
      <Code color="secondary">npm install @nextui-org/react</Code>
      <Code color="success">npm install @nextui-org/react</Code>
      <Code color="warning">npm install @nextui-org/react</Code>
      <Code color="danger">npm install @nextui-org/react</Code>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";

export const codeContent = {
  usage,
  sizes,
  colors,
};

const App = `import {Code} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-4">
      <Code size="sm">npm install @nextui-org/react</Code>
      <Code size="md">npm install @nextui-org/react</Code>
      <Code size="lg">npm install @nextui-org/react</Code>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Code} from "@nextui-org/react";

export default function App() {
  return (
    <Code>npm install @nextui-org/react</Code>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {parseDate, getLocalTimeZone} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  const [value, setValue] = React.useState(parseDate("2024-04-04"));

  let formatter = useDateFormatter({dateStyle: "full"});

  return (
    <div className="w-full flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <DateInput label="Date (controlled)" value={value} onChange={setValue} />
        <p className="text-default-500 text-sm">
          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
        </p>
      </div>
    </div>
  );
}`;

const AppTs = `import {DateInput} from "@nextui-org/react";
import {DateValue, parseDate, getLocalTimeZone} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  const [value, setValue] = React.useState<DateValue>(parseDate("2024-04-04"));

  let formatter = useDateFormatter({dateStyle: "full"});

  return (
    <div className="w-full flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <DateInput label="Date (controlled)" value={value} onChange={setValue} />
        <p className="text-default-500 text-sm">
          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
        </p>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateInput 
        label={"Birth date"} 
        placeholderValue={new CalendarDate(1995, 11, 6)} 
        description={"This is my birth date."}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate, parseDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
        <DateInput 
          label={"Birth date"} 
          isDisabled
          defaultValue={parseDate("2024-04-04")} 
          placeholderValue={new CalendarDate(1995, 11, 6)} 
        />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate, parseDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateInput 
        label={"Birth date"} 
        defaultValue={parseDate("2024-04-04")} 
        placeholderValue={new CalendarDate(1995, 11, 6)} 
        description={"This is my birth date."}
        isInvalid
        errorMessage={(value) => {
          if (value.isInvalid) {
            return "Please enter a valid date.";
          }
        }}
        className="max-w-xs"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate, parseDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateInput 
        label={"Birth date"} 
        defaultValue={parseDate("2024-04-04")} 
        placeholderValue={new CalendarDate(1995, 11, 6)} 
        description={"Thiis is my birth date."}
        isInvalid
        errorMessage="Please enter a valid date."
        className="max-w-xs"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DateInput
        granularity="second"
        label="Date and time"
        value={date}
        onChange={setDate}
      />
      <DateInput granularity="day" label="Date" value={date} onChange={setDate} />
      <DateInput granularity="second" label="Event date" />
      <DateInput
        granularity="second"
        label="Event date"
        placeholderValue={now("America/New_York")}
      />
    </div>
  );
}`;

const AppTs = `import {DateInput} from "@nextui-org/react";
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DateInput
        granularity="second"
        label="Date and time"
        value={date}
        onChange={setDate}
      />
      <DateInput granularity="day" label="Date" value={date} onChange={setDate} />
      <DateInput granularity="second" label="Event date" />
      <DateInput
        granularity="second"
        label="Event date"
        placeholderValue={now("America/New_York")}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {parseZonedDateTime} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <DateInput
        label="Appointment time"
        hideTimeZone
        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {parseZonedDateTime} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <DateInput
        label="Appointment time"
        hourCycle={24}
        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
        granularity={"minute"}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import readOnly from "./readonly";
import required from "./required";
import variants from "./variants";
import labelPlacements from "./label-placements";
import description from "./description";
import startEndContent from "./start-end-content";
import errorMessage from "./error-message";
import errorMessageFunction from "./error-message-function";
import controlled from "./controlled";
import timeZones from "./time-zones";
import granularity from "./granularity";
import minAndMaxDate from "./min-and-max-date";
import internationalCalendar from "./international-calendar";
import hideTimeZone from "./hide-timezone";
import hourlyCycle from "./hourly-cycle";

export const dateInputContent = {
  usage,
  disabled,
  readOnly,
  required,
  variants,
  labelPlacements,
  description,
  startEndContent,
  errorMessage,
  errorMessageFunction,
  controlled,
  timeZones,
  granularity,
  minAndMaxDate,
  internationalCalendar,
  hideTimeZone,
  hourlyCycle,
};

const App = `import {DateInput} from "@nextui-org/react";
import {now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  const [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="flex flex-col gap-4">
      <I18nProvider locale="hi-IN-u-ca-indian">
        <DateInput label="Appointment date" value={date} onChange={setDate} />
      </I18nProvider>
    </div>
  );
}`;

const AppTs = `import {DateInput} from "@nextui-org/react";
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  const [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="flex flex-col gap-4">
      <I18nProvider locale="hi-IN-u-ca-indian">
        <DateInput label="Appointment date" value={date} onChange={setDate} />
      </I18nProvider>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate} from "@internationalized/date";

export default function App() {
  const placements = [
    "inside",
    "outside",
    "outside-left",
  ];

  return (
    <div className="w-full flex flex-col max-w-sm gap-4">
      {placements.map((placement) => (
        <DateInput 
          label="Birth date" 
          placeholderValue={new CalendarDate(1995, 11, 6)} 
          description={placement}
          labelPlacement={placement}
        />
      ))}
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <div className="w-full flex flex-col gap-1">
        <h3>Min date</h3>
        <DateInput
          label="Date and time"
          minValue={today(getLocalTimeZone())}
          defaultValue={today(getLocalTimeZone()).subtract({ days: 1 })}
        />
      </div>
      <div className="w-full flex flex-col gap-2">
        <h3>Max date</h3>
        <DateInput
          label="Date and time"
          maxValue={today(getLocalTimeZone())}
          defaultValue={today(getLocalTimeZone()).add({ days: 1 })}
        />
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate, parseDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
        <DateInput 
          label={"Birth date"} 
          isReadOnly
          defaultValue={parseDate("2024-04-04")} 
          placeholderValue={new CalendarDate(1995, 11, 6)} 
        />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate, parseDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
        <DateInput 
          label={"Birth date"} 
          isRequired
          defaultValue={parseDate("2024-04-04")} 
          placeholderValue={new CalendarDate(1995, 11, 6)} 
        />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const CalendarIcon = `export const CalendarIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.75 2.5a.75.75 0 0 0-1.5 0v1.58c-1.44.115-2.384.397-3.078 1.092c-.695.694-.977 1.639-1.093 3.078h19.842c-.116-1.44-.398-2.384-1.093-3.078c-.694-.695-1.639-.977-3.078-1.093V2.5a.75.75 0 0 0-1.5 0v1.513C15.585 4 14.839 4 14 4h-4c-.839 0-1.585 0-2.25.013z"
      fill="currentColor"
    />
    <path
      clipRule="evenodd"
      d="M2 12c0-.839 0-1.585.013-2.25h19.974C22 10.415 22 11.161 22 12v2c0 3.771 0 5.657-1.172 6.828C19.657 22 17.771 22 14 22h-4c-3.771 0-5.657 0-6.828-1.172C2 19.657 2 17.771 2 14zm15 2a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2m-4-5a1 1 0 1 1-2 0a1 1 0 0 1 2 0m0 4a1 1 0 1 1-2 0a1 1 0 0 1 2 0m-6-3a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate, parseDate} from "@internationalized/date";
import {CalendarIcon} from './CalendarIcon';

export default function App() {
  return (
    <div className="flex w-full flex-col gap-4">
      <div className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
        <DateInput
          label="Date Input"
          defaultValue={parseDate("2024-04-04")} 
          placeholderValue={new CalendarDate(1995, 11, 6)} 
          labelPlacement="outside"
          startContent={
           <CalendarIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
          }
        />
        <DateInput
          label="Date Input"
          defaultValue={parseDate("2024-04-04")} 
          placeholderValue={new CalendarDate(1995, 11, 6)} 
          labelPlacement="outside"
          endContent={
           <CalendarIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
          }
        />
      </div>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/CalendarIcon.jsx": CalendarIcon,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {parseZonedDateTime, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  return (
     <div className="w-full max-w-xl flex flex-col items-end gap-4">
      <DateInput
        label={"Event date"}
        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
        labelPlacement="outside"
      />
      <DateInput
        label={"Event date"}
        defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
        labelPlacement="outside"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateInput label={"Birth date"} placeholderValue={new CalendarDate(1995, 11, 6)} className="max-w-sm" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateInput} from "@nextui-org/react";
import {CalendarDate} from "@internationalized/date";

export default function App() {
  const variants = ["flat", "bordered", "underlined", "faded"];

  return (
    <div className="w-full flex flex-col gap-4">
      {variants.map((variant) => (
        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <DateInput variant={variant} label={"Birth date"} placeholderValue={new CalendarDate(1995, 11, 6)}  />
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {parseDate, getLocalTimeZone} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  const [value, setValue] = React.useState(parseDate("2024-04-04"));

  let formatter = useDateFormatter({dateStyle: "full"});

  return (
    <div className="flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <DatePicker className="max-w-[284px]" label="Date (controlled)" value={value} onChange={setValue} />
        <p className="text-default-500 text-sm">
          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
        </p>
      </div>
      <DatePicker className="max-w-[284px]" defaultValue={parseDate("2024-04-04")} label="Date (uncontrolled)" />
    </div>
  );
}`;

const AppTs = `import {DatePicker} from "@nextui-org/react";
import {DateValue, parseDate, getLocalTimeZone} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  const [value, setValue] = React.useState<DateValue>(parseDate("2024-04-04"));

  let formatter = useDateFormatter({dateStyle: "full"});

  return (
    <div className="flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <DatePicker className="max-w-[284px]" label="Date (controlled)" value={value} onChange={setValue} />
        <p className="text-default-500 text-sm">
          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
        </p>
      </div>
      <DatePicker className="max-w-[284px]" defaultValue={parseDate("2024-04-04")} label="Date (uncontrolled)" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DatePicker 
        label="Birth date"
        className="max-w-[284px]"
        description={"Thiis is my birth date."}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
        <DatePicker 
          label="Birth date"
          className="max-w-[284px]"
          isDisabled
        />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DatePicker 
        label="Birth date"
        className="max-w-[284px]"
        isInvalid
        errorMessage={(value) => {
          if (value.isInvalid) {
            return "Please enter a valid date.";
          }
        }}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DatePicker 
        label="Birth date"
        className="max-w-[284px]"
        isInvalid
        errorMessage="Please enter a valid date."
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {now, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DatePicker
        className="max-w-md"
        granularity="second"
        label="Date and time"
        value={date}
        onChange={setDate}
      />
      <DatePicker
        className="max-w-md"
        granularity="day"
        label="Date"
        value={date}
        onChange={setDate}
      />
      <DatePicker className="max-w-md" granularity="second" label="Event date" />
      <DatePicker
        className="max-w-md"
        granularity="second"
        label="Event date"
        placeholderValue={now("America/New_York")}
      />
    </div>
  );
}`;

const AppTs = `import {DatePicker} from "@nextui-org/react";
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DatePicker
        className="max-w-md"
        granularity="second"
        label="Date and time"
        value={date}
        onChange={setDate}
      />
      <DatePicker
        className="max-w-md"
        granularity="day"
        label="Date"
        value={date}
        onChange={setDate}
      />
      <DatePicker className="max-w-md" granularity="second" label="Event date" />
      <DatePicker
        className="max-w-md"
        granularity="second"
        label="Event date"
        placeholderValue={now("America/New_York")}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import readOnly from "./readonly";
import required from "./required";
import variants from "./variants";
import labelPlacements from "./label-placements";
import description from "./description";
import errorMessage from "./error-message";
import errorMessageFunction from "./error-message-function";
import withMonthAndYearPickers from "./with-month-and-year-pickers";
import withTimeField from "./with-time-field";
import selectorIcon from "./selector-icon";
import controlled from "./controlled";
import timeZones from "./time-zones";
import granularity from "./granularity";
import minAndMaxDate from "./min-and-max-date";
import internationalCalendar from "./international-calendar";
import unavailableDates from "./unavailable-dates";
import visibleMonth from "./visible-month";
import pageBehavior from "./page-behavior";
import preset from "./preset";

export const datePickerContent = {
  usage,
  disabled,
  readOnly,
  required,
  variants,
  labelPlacements,
  description,
  errorMessage,
  errorMessageFunction,
  withMonthAndYearPickers,
  withTimeField,
  selectorIcon,
  controlled,
  timeZones,
  granularity,
  minAndMaxDate,
  internationalCalendar,
  unavailableDates,
  visibleMonth,
  pageBehavior,
  preset,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="flex flex-col gap-4">
      <I18nProvider locale="hi-IN-u-ca-indian">
        <DatePicker
          showMonthAndYearPickers
          variant="bordered"
          className="max-w-md"
          label="Appointment date"
          value={date}
          onChange={setDate}
        />
      </I18nProvider>
    </div>
  );
}`;

const AppTs = `import {DatePicker} from "@nextui-org/react";
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="flex flex-col gap-4">
      <I18nProvider locale="hi-IN-u-ca-indian">
        <DatePicker
          showMonthAndYearPickers
          variant="bordered"
          className="max-w-md"
          label="Appointment date"
          value={date}
          onChange={setDate}
        />
      </I18nProvider>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  const placements = [
    "inside",
    "outside",
    "outside-left",
  ];

  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-col gap-2">
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <DatePicker 
              label={"Birth date"} 
              className="max-w-[284px]"
              description={placement}
              labelPlacement={placement}
            />
          ))}
        </div>
      </div>  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {getLocalTimeZone, today} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <div className="w-full flex flex-col gap-1">
        <h3>Min date</h3>
        <DatePicker
          label="Date and time"
          minValue={today(getLocalTimeZone())}
          defaultValue={today(getLocalTimeZone()).subtract({ days: 1 })}
        />
      </div>
      <div className="w-full flex flex-col gap-1">
        <h3>Max date</h3>
        <DatePicker
          label="Date and time"
          maxValue={today(getLocalTimeZone())}
          defaultValue={today(getLocalTimeZone()).add({ days: 1 })}
        />
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DatePicker 
        label="Birth date"
        visibleMonths={2}
        pageBehavior="single"
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker, RadioGroup, Radio, ButtonGroup, Button, cn} from "@nextui-org/react";
import {startOfWeek, startOfMonth, getLocalTimeZone, today} from "@internationalized/date";
import {useLocale, useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let defaultDate = today(getLocalTimeZone());

  const [value, setValue] = React.useState(defaultDate);

  let {locale} = useLocale();
  let formatter = useDateFormatter({dateStyle: "full"});

  let now = today(getLocalTimeZone());
  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);
  let nextMonth = startOfMonth(now.add({months: 1}));

  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4 w-full max-w-sm">
      <DatePicker
        CalendarBottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[380px] overflow-x-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        CalendarTopContent={
          <ButtonGroup
            fullWidth
            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button onPress={() => setValue(now)}>Today</Button>
            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
          </ButtonGroup>
        }
        calendarProps={{
          focusedValue: value,
          onFocusChange: setValue,
          nextButtonProps: {
            variant: "bordered",
          },
          prevButtonProps: {
            variant: "bordered",
          },
        }}
        value={value}
        onChange={setValue}
        label="Event date"
      />
      <p className="text-default-500 text-sm">
        Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
      </p>
    </div>
  );
}`;

const AppTs = `import {DatePicker, RadioGroup, Radio, ButtonGroup, Button, cn} from "@nextui-org/react";
import {DateValue, startOfWeek, startOfMonth, getLocalTimeZone, today} from "@internationalized/date";
import {useLocale, useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let defaultDate = today(getLocalTimeZone());

  const [value, setValue] = React.useState<DateValue>(defaultDate);

  let {locale} = useLocale();
  let formatter = useDateFormatter({dateStyle: "full"});

  let now = today(getLocalTimeZone());
  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);
  let nextMonth = startOfMonth(now.add({months: 1}));

  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4 w-full max-w-sm">
      <DatePicker
        CalendarBottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[380px] overflow-x-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        CalendarTopContent={
          <ButtonGroup
            fullWidth
            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button onPress={() => setValue(now)}>Today</Button>
            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
          </ButtonGroup>
        }
        calendarProps={{
          focusedValue: value,
          onFocusChange: setValue,
          nextButtonProps: {
            variant: "bordered",
          },
          prevButtonProps: {
            variant: "bordered",
          },
        }}
        value={value}
        onChange={setValue}
        label="Event date"
      />
      <p className="text-default-500 text-sm">
        Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
      </p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
        <DatePicker 
          label="Birth date"
          className="max-w-[284px]"
          isReadOnly
        />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
        <DatePicker 
          label="Birth date"
          className="max-w-[284px]"
          isRequired
        />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const SelectorIcon = `export const SelectorIcon = () => (
  <svg height="1em" viewBox="0 0 24 24" width="1em">
    <g
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    >
      <path d="M8 2v4m8-4v4" />
      <rect height="18" rx="2" width="18" x="3" y="4" />
      <path d="M3 10h18M8 14h.01M12 14h.01M16 14h.01M8 18h.01M12 18h.01M16 18h.01" />
    </g>
  </svg>
);`;

const App = `import {DatePicker} from "@nextui-org/react";
import {SelectorIcon} from './SelectorIcon';

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DatePicker 
        label="Birth date"
        selectorIcon={<SelectorIcon />}
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
  "/SelectorIcon.jsx": SelectorIcon,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {parseZonedDateTime, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  return (
     <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DatePicker
        label="Zoned Date Time"
        className="max-w-xs"
        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
        labelPlacement="outside"
      />
      <DatePicker
        label="Zoned Date Time"
        className="max-w-xs"
        defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
        labelPlacement="outside"
      />
  </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let now = today(getLocalTimeZone());

  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();

  let isDateUnavailable = (date) =>
    isWeekend(date, locale) ||
    disabledRanges.some(
      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
    );

  return (
    <DatePicker
      label="Appointment date"
      aria-label="Appointment date"
      isDateUnavailable={isDateUnavailable}
      minValue={today(getLocalTimeZone())}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <DatePicker label="Birth date" className="max-w-[284px]" />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  const variants = ["flat", "bordered", "underlined", "faded"];

  return (
    <div className="w-full flex flex-col gap-4">
      {variants.map((variant) => (
        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <DatePicker label={"Birth date"} variant={variant} />
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DatePicker 
        label="Birth date"
        visibleMonths={2}
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <DatePicker
        label="Birth Date"
        variant="bordered"
        showMonthAndYearPickers
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DatePicker} from "@nextui-org/react";
import {now, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <DatePicker
        label="Event Date"
        variant="bordered"
        hideTimeZone
        showMonthAndYearPickers
        defaultValue={now(getLocalTimeZone())}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate, getLocalTimeZone} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  const [value, setValue] = React.useState({
    start: parseDate("2024-04-01"),
    end: parseDate("2024-04-08"),
  });

  let formatter = useDateFormatter({dateStyle: "long"});

  return (
    <div className="flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <DateRangePicker
          label="Date range (controlled)"
          value={value}
          onChange={setValue}
        />
        <p className="text-default-500 text-sm">
          Selected date:{" "}
          {value
            ? formatter.formatRange(
                value.start.toDate(getLocalTimeZone()),
                value.end.toDate(getLocalTimeZone()),
              )
            : "--"}
        </p>
      </div>
      <DateRangePicker
        defaultValue={{
          start: parseDate("2024-04-01"),
          end: parseDate("2024-04-08"),
        }}
        label="Date range (uncontrolled)"
      />
    </div>
  );
}`;

const AppTs = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate, getLocalTimeZone} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
import {RangeValue} from "@react-types/shared";
import {DateValue} from "@react-types/datepicker";

export default function App() {
  const [value, setValue] = React.useState<RangeValue<DateValue>>({
    start: parseDate("2024-04-01"),
    end: parseDate("2024-04-08"),
  });

  let formatter = useDateFormatter({dateStyle: "long"});

  return (
    <div className="flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <DateRangePicker
          label="Date range (controlled)"
          value={value}
          onChange={setValue}
        />
        <p className="text-default-500 text-sm">
          Selected date:{" "}
          {value
            ? formatter.formatRange(
                value.start.toDate(getLocalTimeZone()),
                value.end.toDate(getLocalTimeZone()),
              )
            : "--"}
        </p>
      </div>
      <DateRangePicker
        defaultValue={{
          start: parseDate("2024-04-01"),
          end: parseDate("2024-04-08"),
        }}
        label="Date range (uncontrolled)"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  return (
    <DateRangePicker
        calendarProps={{
          classNames: {
            base: "bg-background",
            headerWrapper: "pt-4 bg-background",
            prevButton: "border-1 border-default-200 rounded-small",
            nextButton: "border-1 border-default-200 rounded-small",
            gridHeader: "bg-background shadow-none border-b-1 border-default-100",
            cellButton: [
              "data-[today=true]:bg-default-100 data-[selected=true]:bg-transparent rounded-small",
              // start (pseudo)
              "data-[range-start=true]:before:rounded-l-small",
              "data-[selection-start=true]:before:rounded-l-small",
              // end (pseudo)
              "data-[range-end=true]:before:rounded-r-small",
              "data-[selection-end=true]:before:rounded-r-small",
              // start (selected)
              "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:rounded-small",
              // end (selected)
              "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:rounded-small",
            ],
          },
      }}
      className="max-w-xs"
      label="Stay duration"
      variant="bordered"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  return (
    <DateRangePicker
      label="Stay duration"
      description="Please enter your stay duration"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate} from "@internationalized/date";

export default function App() {
  return (
    <DateRangePicker 
      label="Stay duration" 
      isDisabled
      defaultValue={{
        start: parseDate("2024-04-01"),
        end: parseDate("2024-04-08"),
      }}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate} from "@internationalized/date";

export default function App() {
  return (
    <DateRangePicker 
      isInvalid
      label="Stay duration" 
      variant="bordered"
      errorMessage={(value) => {
        if (value.isInvalid) {
          return "Please enter your stay duration";
        }
      }}
      defaultValue={{
        start: parseDate("2024-04-01"),
        end: parseDate("2024-04-08"),
      }}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate} from "@internationalized/date";

export default function App() {
  return (
    <DateRangePicker 
      isInvalid
      label="Stay duration" 
      variant="bordered"
      errorMessage="Please enter your stay duration"
      defaultValue={{
        start: parseDate("2024-04-01"),
        end: parseDate("2024-04-08"),
      }}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  let [date, setDate] = React.useState({
    start: parseAbsoluteToLocal("2024-04-01T18:45:22Z"),
    end: parseAbsoluteToLocal("2024-04-08T19:15:22Z"),
  });

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DateRangePicker
        fullWidth
        granularity="second"
        label="Date and time range"
        value={date}
        onChange={setDate}
      />
      <DateRangePicker
        fullWidth
        granularity="day"
        label="Date range"
        value={date}
        onChange={setDate}
      />
    </div>
  );
}`;

const AppTs = `import {DateRangePicker} from "@nextui-org/react";
import {DateValue, parseAbsoluteToLocal} from "@internationalized/date";
import {RangeValue} from "@react-types/shared";

export default function App() {
  let [date, setDate] = React.useState<RangeValue<DateValue>>({
    start: parseAbsoluteToLocal("2024-04-01T18:45:22Z"),
    end: parseAbsoluteToLocal("2024-04-08T19:15:22Z"),
  });

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DateRangePicker
        fullWidth
        granularity="second"
        label="Date and time range"
        value={date}
        onChange={setDate}
      />
      <DateRangePicker
        fullWidth
        granularity="day"
        label="Date range"
        value={date}
        onChange={setDate}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import readOnly from "./readonly";
import required from "./required";
import variants from "./variants";
import labelPlacements from "./label-placements";
import description from "./description";
import errorMessage from "./error-message";
import errorMessageFunction from "./error-message-function";
import withTimeField from "./with-time-field";
import selectorIcon from "./selector-icon";
import controlled from "./controlled";
import timeZones from "./time-zones";
import granularity from "./granularity";
import minAndMaxDate from "./min-and-max-date";
import internationalCalendar from "./international-calendar";
import unavailableDates from "./unavailable-dates";
import visibleMonth from "./visible-month";
import pageBehavior from "./page-behavior";
import nonContigous from "./non-contiguous";
import presets from "./presets";
import customStyles from "./custom-styles";

export const dateRangePickerContent = {
  usage,
  disabled,
  readOnly,
  required,
  variants,
  labelPlacements,
  description,
  errorMessage,
  errorMessageFunction,
  withTimeField,
  selectorIcon,
  controlled,
  timeZones,
  granularity,
  minAndMaxDate,
  internationalCalendar,
  unavailableDates,
  visibleMonth,
  pageBehavior,
  nonContigous,
  presets,
  customStyles,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  let [date, setDate] = React.useState({
    start: parseAbsoluteToLocal("2021-04-01T18:45:22Z"),
    end: parseAbsoluteToLocal("2021-04-14T19:15:22Z"),
  });

  return (
    <div className="flex flex-col gap-4">
      <I18nProvider locale="hi-IN-u-ca-indian">
        <DateRangePicker label="Stay duration" value={date} onChange={setDate} />
      </I18nProvider>
    </div>
  );
}`;

const AppTs = `import {DateRangePicker} from "@nextui-org/react";
import {DateValue, parseAbsoluteToLocal} from "@internationalized/date";
import {RangeValue} from "@react-types/shared";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  let [date, setDate] = React.useState<RangeValue<DateValue>>({
    start: parseAbsoluteToLocal("2021-04-01T18:45:22Z"),
    end: parseAbsoluteToLocal("2021-04-14T19:15:22Z"),
  });

  return (
    <div className="flex flex-col gap-4">
      <I18nProvider locale="hi-IN-u-ca-indian">
        <DateRangePicker label="Stay duration" value={date} onChange={setDate} />
      </I18nProvider>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  const placements = [
    "inside",
    "outside",
    "outside-left",
  ];

  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-col gap-2">
        {placements.map((placement) => (
          <DateRangePicker
            key={placement}
            label="Stay duration"
            labelPlacement={placement}
            description={placement}
          />
        ))}
      </div>  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <div className="w-full flex flex-col gap-1">
        <h3>Min date</h3>
        <DateRangePicker
          label="Date and time"
          minValue={today(getLocalTimeZone())}
          defaultValue={{
            start: today(getLocalTimeZone()).subtract({days: 1}),
            end: parseDate("2024-04-08"),
          }}
        />
      </div>
      <div className="w-full flex flex-col gap-1">
        <h3>Max date</h3>
        <DateRangePicker
          label="Date and time"
          maxValue={today(getLocalTimeZone())}
          defaultValue={{
            start: today(getLocalTimeZone()).subtract({days: 1}),
            end: parseDate("2024-04-08"),
          }}
        />
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {isWeekend, today, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let {locale} = useLocale();

  return (
    <DateRangePicker
      allowsNonContiguousRanges
      isDateUnavailable={(date) => isWeekend(date, locale)}
      label="Time off request"
      minValue={today(getLocalTimeZone())}
      visibleMonths={2}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateRangePicker 
        label="Birth date"
        visibleMonths={2}
        pageBehavior="single"
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
import {today, startOfWeek, startOfMonth, endOfWeek, endOfMonth, getLocalTimeZone} from "@internationalized/date";
import {useLocale, useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let defaultDate = {
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({days: 7}),
  };
  let [value, setValue] = React.useState(defaultDate);

  let {locale} = useLocale();
  let formatter = useDateFormatter({dateStyle: "full"});
  let now = today(getLocalTimeZone());
  let nextWeek = {
    start: startOfWeek(now.add({weeks: 1}), locale),
    end: endOfWeek(now.add({weeks: 1}), locale),
  };
  let nextMonth = {
    start: startOfMonth(now.add({months: 1})),
    end: endOfMonth(now.add({months: 1})),
  };

  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4 w-full max-w-sm">
      <DateRangePicker
        CalendarBottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper:
                "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[w-[calc(var(--visible-months)_*_var(--calendar-width))]] overflow-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        CalendarTopContent={
          <ButtonGroup
            fullWidth
            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button
              onPress={() =>
                setValue({
                  start: now,
                  end: now.add({days: 7}),
                })
              }
            >
              This week
            </Button>
            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
          </ButtonGroup>
        }
        calendarProps={{
          focusedValue: value?.start,
          onFocusChange: (val) => setValue({...value, start: val}),
          nextButtonProps: {
            variant: "bordered",
          },
          prevButtonProps: {
            variant: "bordered",
          },
        }}
        value={value}
        onChange={setValue}
        label="Event date"
      />
      <p className="text-default-500 text-sm">
        Selected date:{" "}
        {value
          ? formatter.formatRange(
              value.start.toDate(getLocalTimeZone()),
              value.end.toDate(getLocalTimeZone()),
            )
          : "--"}
      </p>
    </div>
  );
}`;

// const AppTs = `import {DateRangePicker} from "@nextui-org/react";
// import {now, today, startOfWeek, startOfMonth, useDateFormatter, getLocalTimeZone} from "@internationalized/date";
// import {useLocale} from "@react-aria/i18n";
// import {RangeValue} from "@react-types/shared";

// export default function App() {
//   let defaultDate = {
//     start: today(getLocalTimeZone()),
//     end: today(getLocalTimeZone()).add({days: 7}),
//   };

//   const [value, setValue] = React.useState<RangeValue<DateValue>>(defaultDate);

//   let {locale} = useLocale();
//   let formatter = useDateFormatter({dateStyle: "full"});

//   let now = today(getLocalTimeZone());
//   let nextWeek = {
//     start: startOfWeek(now.add({weeks: 1}), locale),
//     end: endOfWeek(now.add({weeks: 1}), locale),
//   };
//   let nextMonth = {
//     start: startOfMonth(now.add({months: 1})),
//     end: endOfMonth(now.add({months: 1})),
//   };

//   const CustomRadio = (props) => {
//     const {children, ...otherProps} = props;

//     return (
//       <Radio
//         {...otherProps}
//         classNames={{
//           base: cn(
//             "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
//             "cursor-pointer rounded-full border-2 border-default-200/60",
//             "data-[selected=true]:border-primary",
//           ),
//           label: "text-tiny text-default-500",
//           labelWrapper: "px-1 m-0",
//           wrapper: "hidden",
//         }}
//       >
//         {children}
//       </Radio>
//     );
//   };

//   return (
//     <div className="flex flex-col gap-4 w-full max-w-sm">
//       <DateRangePicker
//         CalendarBottomContent={
//           <RadioGroup
//             aria-label="Date precision"
//             classNames={{
//               base: "w-full pb-2",
//               wrapper:
//                 "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[w-[calc(var(--visible-months)_*_var(--calendar-width))]] overflow-scroll",
//             }}
//             defaultValue="exact_dates"
//             orientation="horizontal"
//           >
//             <CustomRadio value="exact_dates">Exact dates</CustomRadio>
//             <CustomRadio value="1_day">1 day</CustomRadio>
//             <CustomRadio value="2_days">2 days</CustomRadio>
//             <CustomRadio value="3_days">3 days</CustomRadio>
//             <CustomRadio value="7_days">7 days</CustomRadio>
//             <CustomRadio value="14_days">14 days</CustomRadio>
//           </RadioGroup>
//         }
//         CalendarTopContent={
//           <ButtonGroup
//             fullWidth
//             className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
//             radius="full"
//             size="sm"
//             variant="bordered"
//           >
//             <Button
//               onPress={() =>
//                 setValue({
//                   start: now,
//                   end: now.add({days: 7}),
//                 })
//               }
//             >
//               This week
//             </Button>
//             <Button onPress={() => setValue(nextWeek)}>Next week</Button>
//             <Button onPress={() => setValue(nextMonth)}>Next month</Button>
//           </ButtonGroup>
//         }
//         calendarProps={{
//           focusedValue: value.start,
//           onFocusChange: (val) => setValue({...value, start: val}),
//           nextButtonProps: {
//             variant: "bordered",
//           },
//           prevButtonProps: {
//             variant: "bordered",
//           },
//         }}
//         value={value}
//         onChange={setValue}
//         label="Event date"
//       />
//       <p className="text-default-500 text-sm">
//         Selected date:{" "}
//         {value
//           ? formatter.formatRange(
//               value.start.toDate(getLocalTimeZone()),
//               value.end.toDate(getLocalTimeZone()),
//             )
//           : "--"}
//       </p>
//     </div>
//   );
// }`;

const react = {
  "/App.jsx": App,
  // "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate} from "@internationalized/date";

export default function App() {
  return (
    <DateRangePicker 
      label="Stay duration" 
      isReadOnly
      defaultValue={{
        start: parseDate("2024-04-01"),
        end: parseDate("2024-04-08"),
      }}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseDate} from "@internationalized/date";

export default function App() {
  return (
    <DateRangePicker 
      label="Stay duration" 
      isRequired
      defaultValue={{
        start: parseDate("2024-04-01"),
        end: parseDate("2024-04-08"),
      }}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const SelectorIcon = `export const SelectorIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" {...props}>
    <g
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    >
      <path d="M8 2v4m8-4v4" />
      <rect height="18" rx="2" width="18" x="3" y="4" />
      <path d="M3 10h18M8 14h.01M12 14h.01M16 14h.01M8 18h.01M12 18h.01M16 18h.01" />
    </g>
  </svg>
);`;

const App = `import {DateRangePicker} from "@nextui-org/react";
import {SelectorIcon} from './SelectorIcon';
export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateRangePicker 
        label="Stay duration"
        selectorIcon={<SelectorIcon className="text-xl" />}
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
  "/SelectorIcon.jsx": SelectorIcon,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseZonedDateTime, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <DateRangePicker
        defaultValue={{
          start: parseZonedDateTime("2024-04-01T00:45[America/Los_Angeles]"),
          end: parseZonedDateTime("2024-04-14T11:15[America/Los_Angeles]"),
        }}
        label="Stay duration"
        labelPlacement="outside"
      />
      <DateRangePicker
        defaultValue={{
          start: parseAbsoluteToLocal("2024-04-01T07:45:00Z"),
          end: parseAbsoluteToLocal("2024-04-14T19:15:00Z"),
        }}
        label="Stay duration"
        labelPlacement="outside"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  let now = today(getLocalTimeZone());

  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  return (
    <DateRangePicker
      label="Stay duration"
      isDateUnavailable={(date) =>
        disabledRanges.some(
          (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
        )
      }
      minValue={today(getLocalTimeZone())}
      validate={(value) =>
        disabledRanges.some(
          (interval) =>
            value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0,
        )
          ? "Selected date range may not include unavailable dates."
          : null
      }
      validationBehavior="native"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  return (
    <DateRangePicker 
      label="Stay duration" 
      className="max-w-xs" 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  const variants = ["flat", "bordered", "underlined", "faded"];

  return (
    <div className="w-full flex flex-col gap-4">
      {variants.map((variant) => (
        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <DateRangePicker 
            variant={variant} 
            label="Stay duration" 
            className="max-w-xs" 
          />
        </div>
      ))}
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <DateRangePicker 
        label="Stay duration"
        visibleMonths={2}
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {DateRangePicker} from "@nextui-org/react";
import {parseZonedDateTime} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-row gap-4">
      <DateRangePicker
        label="Event duration"
        hideTimeZone
        visibleMonths={2}
        defaultValue={{
          start: parseZonedDateTime("2024-04-01T00:45[America/Los_Angeles]"),
          end: parseZonedDateTime("2024-04-08T11:15[America/Los_Angeles]"),
        }}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";

export const dividerContent = {
  usage,
};

const App = `import {Divider} from "@nextui-org/react";

export default function App() {
  return (
    <div className="max-w-md">
      <div className="space-y-1">
        <h4 className="text-medium font-medium">NextUI Components</h4>
        <p className="text-small text-default-400">Beautiful, fast and modern React UI library.</p>
      </div>
      <Divider className="my-4" />
      <div className="flex h-5 items-center space-x-4 text-small">
        <div>Blog</div>
        <Divider orientation="vertical" />
        <div>Docs</div>
        <Divider orientation="vertical" />
        <div>Source</div>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu 
        aria-label="Action event example" 
        onAction={(key) => alert(key)}
      >
        <DropdownItem key="new">New file</DropdownItem>
        <DropdownItem key="copy">Copy link</DropdownItem>
        <DropdownItem key="edit">Edit file</DropdownItem>
        <DropdownItem key="delete" className="text-danger" color="danger">
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Dropdown, Link, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Dropdown backdrop="blur">
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu variant="faded" aria-label="Static Actions">
        <DropdownItem key="new">New file</DropdownItem>
        <DropdownItem key="copy">Copy link</DropdownItem>
        <DropdownItem key="edit">Edit file</DropdownItem>
        <DropdownItem key="delete" className="text-danger" color="danger">
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const PlusIcon = `export const PlusIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <g
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    >
      <path d="M6 12h12" />
      <path d="M12 18V6" />
    </g>
  </svg>
);`;

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownSection, DropdownItem, Button, User} from "@nextui-org/react";
import {PlusIcon} from "./PlusIcon.jsx";
export default function App() {
  return (
    <Dropdown
      showArrow
      radius="sm"
      classNames={{
        base: "before:bg-default-200", // change arrow background
        content: "p-0 border-small border-divider bg-background",
      }}
    >
      <DropdownTrigger>
        <Button variant="ghost" disableRipple>Open Menu</Button>
      </DropdownTrigger>
      <DropdownMenu
        aria-label="Custom item styles"
        disabledKeys={["profile"]}
        className="p-3"
        itemClasses={{
          base: [
            "rounded-md",
            "text-default-500",
            "transition-opacity",
            "data-[hover=true]:text-foreground",
            "data-[hover=true]:bg-default-100",
            "dark:data-[hover=true]:bg-default-50",
            "data-[selectable=true]:focus:bg-default-50",
            "data-[pressed=true]:opacity-70",
            "data-[focus-visible=true]:ring-default-500",
          ],
        }}
      >
        <DropdownSection aria-label="Profile & Actions" showDivider>
          <DropdownItem
            isReadOnly
            key="profile"
            className="h-14 gap-2"
            className="opacity-100"
          >
            <User
              name="Junior Garcia"
              description="@jrgarciadev"
              classNames={{
                name: "text-default-600",
                description: "text-default-500",
              }}
              avatarProps={{
                size: "sm",
                src: "https://avatars.githubusercontent.com/u/30373425?v=4",
              }}
            />
          </DropdownItem>
          <DropdownItem key="dashboard">
            Dashboard
          </DropdownItem>
          <DropdownItem key="settings">Settings</DropdownItem>
          <DropdownItem
            key="new_project"
            endContent={<PlusIcon className="text-large" />}
          >
            New Project
          </DropdownItem>
        </DropdownSection>

        <DropdownSection aria-label="Preferences" showDivider>
          <DropdownItem key="quick_search" shortcut="⌘K">
            Quick search
          </DropdownItem>
          <DropdownItem
            isReadOnly
            key="theme"
            className="cursor-default"
            endContent={
              <select
                className="z-10 outline-none w-16 py-0.5 rounded-md text-tiny group-data-[hover=true]:border-default-500 border-small border-default-300 dark:border-default-200 bg-transparent text-default-500"
                id="theme"
                name="theme"
              >
                <option>System</option>
                <option>Dark</option>
                <option>Light</option>
              </select>
            }
          >
            Theme
          </DropdownItem>
        </DropdownSection>  

        <DropdownSection aria-label="Help & Feedback">
          <DropdownItem key="help_and_feedback">
            Help & Feedback
          </DropdownItem>
          <DropdownItem key="logout">Log Out</DropdownItem>
        </DropdownSection> 
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
  "/PlusIcon.jsx": PlusIcon,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button, cn} from "@nextui-org/react";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <Dropdown
      showArrow
      classNames={{
        base: "before:bg-default-200", // change arrow background
        content: "py-1 px-1 border border-default-200 bg-gradient-to-br from-white to-default-200 dark:from-default-50 dark:to-black",
      }}
    >
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu variant="faded" aria-label="Dropdown menu with description">
      <DropdownSection title="Actions">  
        <DropdownItem
            key="new"
            shortcut="⌘N"
            description="Create a new file"
            startContent={<AddNoteIcon className={iconClasses} />}
          >
            New file
          </DropdownItem>
          <DropdownItem
            key="copy"
            shortcut="⌘C"
            description="Copy the file link"
            startContent={<CopyDocumentIcon className={iconClasses} />}
          >
            Copy link
          </DropdownItem>
          <DropdownItem
            key="edit"
            shortcut="⌘⇧E"
            description="Allows you to edit the file"
            startContent={<EditDocumentIcon className={iconClasses} />}
          >
            Edit file
          </DropdownItem>
        </DropdownSection>
        <DropdownSection title="Danger zone">  
          <DropdownItem
            key="delete"
            className="text-danger"
            color="danger"
            shortcut="⌘⇧D"
            description="Permanently delete the file"
            startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
          >
            Delete file
          </DropdownItem>
        </DropdownSection>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Avatar, User} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex items-center gap-4">
      <Dropdown placement="bottom-end">
        <DropdownTrigger>
          <Avatar
            isBordered
            as="button"
            className="transition-transform"
            src="https://i.pravatar.cc/150?u=a042581f4e29026704d"
          />
        </DropdownTrigger>
        <DropdownMenu aria-label="Profile Actions" variant="flat">
          <DropdownItem key="profile" className="h-14 gap-2">
            <p className="font-semibold">Signed in as</p>
            <p className="font-semibold">zoey@example.com</p>
          </DropdownItem>
          <DropdownItem key="settings">
            My Settings
          </DropdownItem>
          <DropdownItem key="team_settings">Team Settings</DropdownItem>
          <DropdownItem key="analytics">
            Analytics
          </DropdownItem>
          <DropdownItem key="system">System</DropdownItem>
          <DropdownItem key="configurations">Configurations</DropdownItem>
          <DropdownItem key="help_and_feedback">
            Help & Feedback
          </DropdownItem>
          <DropdownItem key="logout" color="danger">
            Log Out
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
      <Dropdown placement="bottom-start">
        <DropdownTrigger>
          <User
            as="button"
            avatarProps={{
              isBordered: true,
              src: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
            }}
            className="transition-transform"
            description="@tonyreichert"
            name="Tony Reichert"
          />
        </DropdownTrigger>
        <DropdownMenu aria-label="User Actions" variant="flat">
          <DropdownItem key="profile" className="h-14 gap-2">
            <p className="font-bold">Signed in as</p>
            <p className="font-bold">@tonyreichert</p>
          </DropdownItem>
          <DropdownItem key="settings">
            My Settings
          </DropdownItem>
          <DropdownItem key="team_settings">Team Settings</DropdownItem>
          <DropdownItem key="analytics">
            Analytics
          </DropdownItem>
          <DropdownItem key="system">System</DropdownItem>
          <DropdownItem key="configurations">Configurations</DropdownItem>
          <DropdownItem key="help_and_feedback">
            Help & Feedback
          </DropdownItem>
          <DropdownItem key="logout" color="danger">
            Log Out
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button, cn} from "@nextui-org/react";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu variant="faded" aria-label="Dropdown menu with description">
        <DropdownItem
          key="new"
          shortcut="⌘N"
          description="Create a new file"
          startContent={<AddNoteIcon className={iconClasses} />}
        >
          New file
        </DropdownItem>
        <DropdownItem
          key="copy"
          shortcut="⌘C"
          description="Copy the file link"
          startContent={<CopyDocumentIcon className={iconClasses} />}
        >
          Copy link
        </DropdownItem>
        <DropdownItem
          key="edit"
          shortcut="⌘⇧E"
          showDivider
          description="Allows you to edit the file"
          startContent={<EditDocumentIcon className={iconClasses} />}
        >
          Edit file
        </DropdownItem>
        <DropdownItem
          key="delete"
          className="text-danger"
          color="danger"
          shortcut="⌘⇧D"
          description="Permanently delete the file"
          startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
        >
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Dropdown >
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu aria-label="Example with disabled actions" disabledKeys={["edit", "delete"]}>
        <DropdownItem key="new">New file</DropdownItem>
        <DropdownItem key="copy">Copy link</DropdownItem>
        <DropdownItem key="edit">Edit file</DropdownItem>
        <DropdownItem key="delete" className="text-danger" color="danger">
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  const items = [
    {
      key: "new",
      label: "New file",
    },
    {
      key: "copy",
      label: "Copy link",
    },
    {
      key: "edit",
      label: "Edit file",
    },
    {
      key: "delete",
      label: "Delete file",
    }
  ];

  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu aria-label="Dynamic Actions" items={items}>
        {(item) => (
          <DropdownItem
            key={item.key}
            color={item.key === "delete" ? "danger" : "default"}
            className={item.key === "delete" ? "text-danger" : ""}
          >
            {item.label}
          </DropdownItem>
        )}
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button, cn} from "@nextui-org/react";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu variant="faded" aria-label="Dropdown menu with icons">
        <DropdownItem
          key="new"
          shortcut="⌘N"
          startContent={<AddNoteIcon className={iconClasses} />}
        >
          New file
        </DropdownItem>
        <DropdownItem
          key="copy"
          shortcut="⌘C"
          startContent={<CopyDocumentIcon className={iconClasses} />}
        >
          Copy link
        </DropdownItem>
        <DropdownItem
          key="edit"
          shortcut="⌘⇧E"
          startContent={<EditDocumentIcon className={iconClasses} />}
        >
          Edit file
        </DropdownItem>
        <DropdownItem
          key="delete"
          className="text-danger"
          color="danger"
          shortcut="⌘⇧D"
          startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
        >
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import dynamic from "./dynamic";
import disabledKeys from "./disabled-keys";
import action from "./action";
import variants from "./variants";
import singleSelection from "./single-selection";
import multipleSelection from "./multiple-selection";
import shortcut from "./shortcut";
import icons from "./icons";
import description from "./description";
import sections from "./sections";
import customTrigger from "./custom-trigger";
import backdrop from "./backdrop";
import customPopoverStyles from "./custom-popover-styles";
import customItemsStyles from "./custom-items-styles";

export const dropdownContent = {
  usage,
  dynamic,
  disabledKeys,
  action,
  variants,
  singleSelection,
  multipleSelection,
  shortcut,
  icons,
  description,
  sections,
  customTrigger,
  backdrop,
  customPopoverStyles,
  customItemsStyles,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["text"]));

  const selectedValue = React.useMemo(
    () => Array.from(selectedKeys).join(", ").replaceAll("_", " "),
    [selectedKeys]
  );

  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
          className="capitalize"
        >
          {selectedValue}
        </Button>
      </DropdownTrigger>
      <DropdownMenu 
        aria-label="Multiple selection example"
        variant="flat"
        closeOnSelect={false}
        disallowEmptySelection
        selectionMode="multiple"
        selectedKeys={selectedKeys}
        onSelectionChange={setSelectedKeys}
      >
        <DropdownItem key="text">Text</DropdownItem>
        <DropdownItem key="number">Number</DropdownItem>
        <DropdownItem key="date">Date</DropdownItem>
        <DropdownItem key="single_date">Single Date</DropdownItem>
        <DropdownItem key="iteration">Iteration</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownSection, DropdownItem, Button, cn} from "@nextui-org/react";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu variant="faded" aria-label="Dropdown menu with description">
      <DropdownSection title="Actions" showDivider>  
        <DropdownItem
            key="new"
            shortcut="⌘N"
            description="Create a new file"
            startContent={<AddNoteIcon className={iconClasses} />}
          >
            New file
          </DropdownItem>
          <DropdownItem
            key="copy"
            shortcut="⌘C"
            description="Copy the file link"
            startContent={<CopyDocumentIcon className={iconClasses} />}
          >
            Copy link
          </DropdownItem>
          <DropdownItem
            key="edit"
            shortcut="⌘⇧E"
            description="Allows you to edit the file"
            startContent={<EditDocumentIcon className={iconClasses} />}
          >
            Edit file
          </DropdownItem>
        </DropdownSection>
        <DropdownSection title="Danger zone">  
          <DropdownItem
            key="delete"
            className="text-danger"
            color="danger"
            shortcut="⌘⇧D"
            description="Permanently delete the file"
            startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
          >
            Delete file
          </DropdownItem>
        </DropdownSection>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu variant="flat" aria-label="Dropdown menu with shortcut">
        <DropdownItem key="new" shortcut="⌘N">New file</DropdownItem>
        <DropdownItem key="copy" shortcut="⌘C">Copy link</DropdownItem>
        <DropdownItem key="edit" shortcut="⌘⇧E">Edit file</DropdownItem>
        <DropdownItem key="delete" shortcut="⌘⇧D" className="text-danger" color="danger">
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["text"]));

  const selectedValue = React.useMemo(
    () => Array.from(selectedKeys).join(", ").replaceAll("_", " "),
    [selectedKeys]
  );

  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
          className="capitalize"
        >
          {selectedValue}
        </Button>
      </DropdownTrigger>
      <DropdownMenu 
        aria-label="Single selection example"
        variant="flat"
        disallowEmptySelection
        selectionMode="single"
        selectedKeys={selectedKeys}
        onSelectionChange={setSelectedKeys}
      >
        <DropdownItem key="text">Text</DropdownItem>
        <DropdownItem key="number">Number</DropdownItem>
        <DropdownItem key="date">Date</DropdownItem>
        <DropdownItem key="single_date">Single Date</DropdownItem>
        <DropdownItem key="iteration">Iteration</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          variant="bordered" 
        >
          Open Menu
        </Button>
      </DropdownTrigger>
      <DropdownMenu aria-label="Static Actions">
        <DropdownItem key="new">New file</DropdownItem>
        <DropdownItem key="copy">Copy link</DropdownItem>
        <DropdownItem key="edit">Edit file</DropdownItem>
        <DropdownItem key="delete" className="text-danger" color="danger">
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button, RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const [selectedColor, setSelectedColor] = React.useState("default")

  const variants = ["solid", "bordered", "light", "flat", "faded", "shadow"];

  const DropdownContent = ({variant, color}) => (
    <Dropdown>
      <DropdownTrigger>
        <Button 
          color={color}
          variant={variant}
          className="capitalize"
        >
          {variant}
        </Button>
      </DropdownTrigger>
      <DropdownMenu 
        aria-label="Dropdown Variants"
        color={color} 
        variant={variant}
      >
        <DropdownItem key="new">New file</DropdownItem>
        <DropdownItem key="copy">Copy link</DropdownItem>
        <DropdownItem key="edit">Edit file</DropdownItem>
        <DropdownItem key="delete" className="text-danger" color="danger">
          Delete file
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )

  return (
    <div className="flex flex-wrap gap-4">
      {variants.map((variant) => (
        <DropdownContent key={variant} color={selectedColor} variant={variant} />
      ))}
      <RadioGroup
        label="Select dropdown color"
        orientation="horizontal"
        color={selectedColor}
        defaultValue="default"
        onValueChange={setSelectedColor}
      >
        <Radio value="default">Default</Radio>
        <Radio value="primary">Primary</Radio>
        <Radio value="secondary">Secondary</Radio>
        <Radio value="success">Success</Radio>
        <Radio value="warning">Warning</Radio>
        <Radio value="danger">Danger</Radio>
      </RadioGroup>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Image} from "@nextui-org/react";

export default function App() {
  return (
    <Image
      isBlurred
      width={240}
      src="https://nextui-docs-v2.vercel.app/images/album-cover.png"
      alt="NextUI Album Cover"
      className="m-5"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Image} from "@nextui-org/react";

export default function App() {
  return (
    <Image
      width={300}
      height={200}
      src="https://app.requestly.io/delay/1000/https://nextui-docs-v2.vercel.app/images/fruit-4.jpeg"
      fallbackSrc="https://via.placeholder.com/300x200"
      alt="NextUI Image with fallback"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import blurred from "./blurred";
import zoomed from "./zoomed";
import loading from "./loading";
import fallback from "./fallback";
import nextjs from "./nextjs";

export const imageContent = {
  usage,
  blurred,
  zoomed,
  loading,
  fallback,
  nextjs,
};

const App = `import {Image} from "@nextui-org/react";

export default function App() {
  return (
    <Image
      width={300}
      height={200}
      alt="NextUI hero Image with delay"
      src="https://app.requestly.io/delay/5000/https://nextui-docs-v2.vercel.app/images/hero-card-complete.jpeg"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Image} from "@nextui-org/react";
import NextImage from "next/image";

export default function App() {
  return (
    <Image
      as={NextImage}
      width={300}
      height={200}
      src="https://nextui-docs-v2.vercel.app/images/hero-card-complete.jpeg"
      alt="NextUI hero Image"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Image} from "@nextui-org/react";

export default function App() {
  return (
    <Image
      width={300}
      alt="NextUI hero Image"
      src="https://nextui-docs-v2.vercel.app/images/hero-card-complete.jpeg"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Image} from "@nextui-org/react";

export default function App() {
  return (
    <Image
      isZoomed
      width={240}
      alt="NextUI Fruit Image with Zoom"
      src="https://nextui-docs-v2.vercel.app/images/fruit-1.jpeg"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

export * from "./avatar";
export * from "./button";
export * from "./card";
export * from "./accordion";
export * from "./badge";
export * from "./checkbox";
export * from "./checkbox-group";
export * from "./chip";
export * from "./circular-progress";
export * from "./code";
export * from "./divider";
export * from "./kbd";
export * from "./spacer";
export * from "./spinner";
export * from "./link";
export * from "./progress";
export * from "./user";
export * from "./skeleton";
export * from "./snippet";
export * from "./input";
export * from "./textarea";
export * from "./image";
export * from "./radio-group";
export * from "./switch";
export * from "./popover";
export * from "./tooltip";
export * from "./tabs";
export * from "./modal";
export * from "./pagination";
export * from "./dropdown";
export * from "./navbar";
export * from "./table";
export * from "./autocomplete";

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <Input
      isClearable
      type="email"
      label="Email"
      variant="bordered"
      placeholder="Enter your email"
      defaultValue="junior@nextui.org"
      onClear={() => console.log("input cleared")}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  const colors = [
    "default",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger",
  ];

  return (
    <div className="w-full flex flex-row flex-wrap gap-4">
      {colors.map((color) => (
        <Input
          key={color}
          type="email"
          color={color}
          label="Email"
          placeholder="Enter your email"
          defaultValue="junior@nextui.org"
          className="max-w-[220px]"
        />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState("");

  return (
    <div className="w-full flex flex-col gap-2 max-w-[240px]">
      <Input
        label="Email"
        placeholder="Enter your email"
        value={value}
        onValueChange={setValue}
      />
      <p className="text-default-500 text-small">Input value: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const SearchIcon = `export const SearchIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const CloseFilledIcon = `export const CloseFilledIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M12 2a10 10 0 1010 10A10.016 10.016 0 0012 2zm3.36 12.3a.754.754 0 010 1.06.748.748 0 01-1.06 0l-2.3-2.3-2.3 2.3a.748.748 0 01-1.06 0 .754.754 0 010-1.06l2.3-2.3-2.3-2.3A.75.75 0 019.7 8.64l2.3 2.3 2.3-2.3a.75.75 0 011.06 1.06l-2.3 2.3z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import React, {forwardRef} from "react";
import {useInput} from "@nextui-org/react";
import {SearchIcon} from "./SearchIcon";
import {CloseFilledIcon} from "./CloseFilledIcon";

const styles = {
  label: "text-black/50 dark:text-white/90",
  input: [
    "bg-transparent",
    "text-black/90 dark:text-white/90",
    "placeholder:text-default-700/50 dark:placeholder:text-white/60",
  ],
  innerWrapper: "bg-transparent",
  inputWrapper: [
    "shadow-xl",
    "bg-default-200/50",
    "dark:bg-default/60",
    "backdrop-blur-xl",
    "backdrop-saturate-200",
    "hover:bg-default-200/70",
    "focus-within:!bg-default-200/50",
    "dark:hover:bg-default/70",
    "dark:focus-within:!bg-default/60",
    "!cursor-text",
  ],
};

const MyInput = forwardRef((props, ref) => {
  const {
    Component,
    label,
    domRef,
    description,
    isClearable,
    startContent,
    endContent,
    shouldLabelBeOutside,
    shouldLabelBeInside,
    errorMessage,
    getBaseProps,
    getLabelProps,
    getInputProps,
    getInnerWrapperProps,
    getInputWrapperProps,
    getDescriptionProps,
    getErrorMessageProps,
    getClearButtonProps,
  } = useInput({
    ...props,
    ref,
    // this is just for the example, the props bellow should be passed by the parent component
    label: "Search",
    type: "search",
    placeholder: "Type to search...",
    startContent: (
      <SearchIcon className="text-black/50 mb-0.5 dark:text-white/90 text-slate-400 pointer-events-none flex-shrink-0" />
    ),
    // custom styles
    classNames: {
      ...styles,
    },
  });

  const labelContent = <label {...getLabelProps()}>{label}</label>;

  const end = React.useMemo(() => {
    if (isClearable) {
      return <span {...getClearButtonProps()}>{endContent || <CloseFilledIcon />}</span>;
    }

    return endContent;
  }, [isClearable, getClearButtonProps]);

  const innerWrapper = React.useMemo(() => {
    if (startContent || end) {
      return (
        <div {...getInnerWrapperProps()}>
          {startContent}
          <input {...getInputProps()} />
          {end}
        </div>
      );
    }

    return <input {...getInputProps()} />;
  }, [startContent, end, getInputProps, getInnerWrapperProps]);

  return (
    <div className="w-[340px] h-[300px] px-8 rounded-2xl flex justify-center items-center bg-gradient-to-tr from-pink-500 to-yellow-500 text-white shadow-lg">
      <Component {...getBaseProps()}>
        {shouldLabelBeOutside ? labelContent : null}
        <div
          {...getInputWrapperProps()}
          role="button"
          onClick={() => {
            domRef.current?.focus();
          }}
        >
          {shouldLabelBeInside ? labelContent : null}
          {innerWrapper}
        </div>
        {description && <div {...getDescriptionProps()}>{description}</div>}
        {errorMessage && <div {...getErrorMessageProps()}>{errorMessage}</div>}
      </Component>
    </div>
  );
});

MyInput.displayName = "MyInput";

export default MyInput;`;

const react = {
  "/App.jsx": App,
  "/SearchIcon.jsx": SearchIcon,
  "/CloseFilledIcon.jsx": CloseFilledIcon,
};

export default {
  ...react,
};

const SearchIcon = `export const SearchIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const App = `import {Input} from "@nextui-org/react";
import {SearchIcon} from "./SearchIcon";

export default function App() {
  return (
    <div className="w-[340px] h-[240px] px-8 rounded-2xl flex justify-center items-center bg-gradient-to-tr from-pink-500 to-yellow-500 text-white shadow-lg">
      <Input
        label="Search"
        isClearable
        radius="lg"
        classNames={{
          label: "text-black/50 dark:text-white/90",
          input: [
            "bg-transparent",
            "text-black/90 dark:text-white/90",
            "placeholder:text-default-700/50 dark:placeholder:text-white/60",
          ],
          innerWrapper: "bg-transparent",
          inputWrapper: [
            "shadow-xl",
            "bg-default-200/50",
            "dark:bg-default/60",
            "backdrop-blur-xl",
            "backdrop-saturate-200",
            "hover:bg-default-200/70",
            "dark:hover:bg-default/70",
            "group-data-[focus=true]:bg-default-200/50",
            "dark:group-data-[focus=true]:bg-default/60",
            "!cursor-text",
          ],
        }}
        placeholder="Type to search..."
        startContent={
          <SearchIcon className="text-black/50 mb-0.5 dark:text-white/90 text-slate-400 pointer-events-none flex-shrink-0" />
        }
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/SearchIcon.jsx": SearchIcon,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <Input
      type="email"
      label="Email"
      defaultValue="junior@nextui.org"
      description="We'll never share your email with anyone else."
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <Input
      isDisabled
      type="email"
      label="Email"
      defaultValue="junior@nextui.org"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <Input
      type="email"
      label="Email"
      variant="bordered"
      defaultValue="junior2nextui.org"
      isInvalid={true}
      errorMessage="Please enter a valid email"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import readOnly from "./readonly";
import required from "./required";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import radius from "./radius";
import labelPlacements from "./label-placements";
import description from "./description";
import password from "./password";
import clearButton from "./clear-button";
import startEndContent from "./start-end-content";
import errorMessage from "./error-message";
import regexValidation from "./regex-validation";
import controlled from "./controlled";
import customStyles from "./custom-styles";
import customImpl from "./custom-impl";

export const inputContent = {
  usage,
  disabled,
  readOnly,
  required,
  sizes,
  colors,
  variants,
  radius,
  labelPlacements,
  description,
  password,
  clearButton,
  startEndContent,
  errorMessage,
  regexValidation,
  controlled,
  customStyles,
  customImpl,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  const placements = [
    "inside",
    "outside",
    "outside-left",
  ];

  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-col gap-2">
        <h3 className="text-default-500 text-small">Without placeholder</h3>
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <Input
              key={placement}
              type="email"
              label="Email"
              labelPlacement={placement}
              description={placement}
            />
          ))}
        </div>
      </div>  
      <div className="flex flex-col gap-2">
        <h3 className="text-default-500 text-small">With placeholder</h3>
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <Input
              key={placement}
              type="email"
              label="Email"
              labelPlacement={placement}
              placeholder="Enter your email"
              description={placement}
            />
          ))}
        </div>
      </div>  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const EyeSlashFilledIcon = `export const EyeSlashFilledIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.2714 9.17834C20.9814 8.71834 20.6714 8.28834 20.3514 7.88834C19.9814 7.41834 19.2814 7.37834 18.8614 7.79834L15.8614 10.7983C16.0814 11.4583 16.1214 12.2183 15.9214 13.0083C15.5714 14.4183 14.4314 15.5583 13.0214 15.9083C12.2314 16.1083 11.4714 16.0683 10.8114 15.8483C10.8114 15.8483 9.38141 17.2783 8.35141 18.3083C7.85141 18.8083 8.01141 19.6883 8.68141 19.9483C9.75141 20.3583 10.8614 20.5683 12.0014 20.5683C13.7814 20.5683 15.5114 20.0483 17.0914 19.0783C18.7014 18.0783 20.1514 16.6083 21.3214 14.7383C22.2714 13.2283 22.2214 10.6883 21.2714 9.17834Z"
      fill="currentColor"
    />
    <path
      d="M14.0206 9.98062L9.98062 14.0206C9.47062 13.5006 9.14062 12.7806 9.14062 12.0006C9.14062 10.4306 10.4206 9.14062 12.0006 9.14062C12.7806 9.14062 13.5006 9.47062 14.0206 9.98062Z"
      fill="currentColor"
    />
    <path
      d="M18.25 5.74969L14.86 9.13969C14.13 8.39969 13.12 7.95969 12 7.95969C9.76 7.95969 7.96 9.76969 7.96 11.9997C7.96 13.1197 8.41 14.1297 9.14 14.8597L5.76 18.2497H5.75C4.64 17.3497 3.62 16.1997 2.75 14.8397C1.75 13.2697 1.75 10.7197 2.75 9.14969C3.91 7.32969 5.33 5.89969 6.91 4.91969C8.49 3.95969 10.22 3.42969 12 3.42969C14.23 3.42969 16.39 4.24969 18.25 5.74969Z"
      fill="currentColor"
    />
    <path
      d="M14.8581 11.9981C14.8581 13.5681 13.5781 14.8581 11.9981 14.8581C11.9381 14.8581 11.8881 14.8581 11.8281 14.8381L14.8381 11.8281C14.8581 11.8881 14.8581 11.9381 14.8581 11.9981Z"
      fill="currentColor"
    />
    <path
      d="M21.7689 2.22891C21.4689 1.92891 20.9789 1.92891 20.6789 2.22891L2.22891 20.6889C1.92891 20.9889 1.92891 21.4789 2.22891 21.7789C2.37891 21.9189 2.56891 21.9989 2.76891 21.9989C2.96891 21.9989 3.15891 21.9189 3.30891 21.7689L21.7689 3.30891C22.0789 3.00891 22.0789 2.52891 21.7689 2.22891Z"
      fill="currentColor"
    />
  </svg>
);`;

const EyeFilledIcon = `export const EyeFilledIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.25 9.14969C18.94 5.51969 15.56 3.42969 12 3.42969C10.22 3.42969 8.49 3.94969 6.91 4.91969C5.33 5.89969 3.91 7.32969 2.75 9.14969C1.75 10.7197 1.75 13.2697 2.75 14.8397C5.06 18.4797 8.44 20.5597 12 20.5597C13.78 20.5597 15.51 20.0397 17.09 19.0697C18.67 18.0897 20.09 16.6597 21.25 14.8397C22.25 13.2797 22.25 10.7197 21.25 9.14969ZM12 16.0397C9.76 16.0397 7.96 14.2297 7.96 11.9997C7.96 9.76969 9.76 7.95969 12 7.95969C14.24 7.95969 16.04 9.76969 16.04 11.9997C16.04 14.2297 14.24 16.0397 12 16.0397Z"
      fill="currentColor"
    />
    <path
      d="M11.9984 9.14062C10.4284 9.14062 9.14844 10.4206 9.14844 12.0006C9.14844 13.5706 10.4284 14.8506 11.9984 14.8506C13.5684 14.8506 14.8584 13.5706 14.8584 12.0006C14.8584 10.4306 13.5684 9.14062 11.9984 9.14062Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Input} from "@nextui-org/react";
import {EyeFilledIcon} from "./EyeFilledIcon";
import {EyeSlashFilledIcon} from "./EyeSlashFilledIcon";

export default function App() {
  const [isVisible, setIsVisible] = React.useState(false);

  const toggleVisibility = () => setIsVisible(!isVisible);

  return (
    <Input
      label="Password"
      variant="bordered"
      placeholder="Enter your password"
      endContent={
        <button className="focus:outline-none" type="button" onClick={toggleVisibility} aria-label="toggle password visibility">
          {isVisible ? (
            <EyeSlashFilledIcon className="text-2xl text-default-400 pointer-events-none" />
          ) : (
            <EyeFilledIcon className="text-2xl text-default-400 pointer-events-none" />
          )}
        </button>
      }
      type={isVisible ? "text" : "password"}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/EyeSlashFilledIcon.jsx": EyeSlashFilledIcon,
  "/EyeFilledIcon.jsx": EyeFilledIcon,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  const radius = [
    "full",
    "lg",
    "md",
    "sm",
    "none",
  ];

  return (
    <div className="w-full flex flex-row flex-wrap gap-4">
      {radius.map((r) => (
        <Input
          key={r}
          radius={r}
          type="email"
          label="Email"
          placeholder="Enter your email"
          defaultValue="junior@nextui.org"
          className="max-w-[220px]"
        />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <Input
      isReadOnly
      type="email"
      label="Email"
      variant="bordered"
      defaultValue="junior@nextui.org"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState("junior2nextui.org");

  const validateEmail = (value) => value.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i);

  const isInvalid = React.useMemo(() => {
    if (value === "") return false;

    return validateEmail(value) ? false : true;
  }, [value]);

  return (
    <Input
      value={value}
      type="email"
      label="Email"
      variant="bordered"
      isInvalid={isInvalid}
      color={isInvalid ? "danger" : "success"}
      errorMessage="Please enter a valid email"
      onValueChange={setValue}
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <Input
      isRequired
      type="email"
      label="Email"
      defaultValue="junior@nextui.org"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {

  const sizes = ["sm", "md", "lg"];

  return (
    <div className="w-full flex flex-col gap-4">
      {sizes.map((size) => (
        <div key={size} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <Input size={size} type="email" label="Email" />
          <Input size={size} type="email" label="Email" placeholder="Enter your email" />
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const MailIcon = `export const MailIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M17 3.5H7C4 3.5 2 5 2 8.5V15.5C2 19 4 20.5 7 20.5H17C20 20.5 22 19 22 15.5V8.5C22 5 20 3.5 17 3.5ZM17.47 9.59L14.34 12.09C13.68 12.62 12.84 12.88 12 12.88C11.16 12.88 10.31 12.62 9.66 12.09L6.53 9.59C6.21 9.33 6.16 8.85 6.41 8.53C6.67 8.21 7.14 8.15 7.46 8.41L10.59 10.91C11.35 11.52 12.64 11.52 13.4 10.91L16.53 8.41C16.85 8.15 17.33 8.2 17.58 8.53C17.84 8.85 17.79 9.33 17.47 9.59Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Input} from "@nextui-org/react";
import {MailIcon} from './MailIcon';

export default function App() {
  return (
    <div className="flex flex-col gap-4">
      <div className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
        <Input
          type="email"
          label="Email"
          placeholder="you@example.com"
          labelPlacement="outside"
          startContent={
            <MailIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
          }
        />
        <Input
          type="number"
          label="Price"
          placeholder="0.00"
          labelPlacement="outside"
          startContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">$</span>
            </div>
          }
        />
        <Input
          type="url"
          label="Website"
          placeholder="nextui.org"
          labelPlacement="outside"
          startContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">https://</span>
            </div>
          }
        />
      </div>
      <div className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
        <Input
          type="email"
          label="Email"
          placeholder="you@example.com"
          labelPlacement="outside"
          endContent={
            <MailIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
          }
        />
        <Input
          type="number"
          label="Price"
          placeholder="0.00"
          labelPlacement="outside"
          endContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">$</span>
            </div>
          }
        />
        <Input
          type="url"
          label="Website"
          placeholder="nextui"
          labelPlacement="outside"
          endContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">.org/</span>
            </div>
          }
        />
      </div>
      <div className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
        <Input
          label="Email"
          placeholder="nextui"
          labelPlacement="outside"
          startContent={
            <MailIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
          }
          endContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">@gmail.com</span>
            </div>
          }
        />
        <Input
          label="Price"
          placeholder="0.00"
          labelPlacement="outside"
          startContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">$</span>
            </div>
          }
          endContent={
            <div className="flex items-center">
              <label className="sr-only" htmlFor="currency">
                Currency
              </label>
              <select
                className="outline-none border-0 bg-transparent text-default-400 text-small"
                id="currency"
                name="currency"
              >
                <option>USD</option>
                <option>ARS</option>
                <option>EUR</option>
              </select>
            </div>
          }
          type="number"
        />
        <Input
          type="url"
          label="Website"
          placeholder="nextui"
          labelPlacement="outside"
          startContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">https://</span>
            </div>
          }
          endContent={
            <div className="pointer-events-none flex items-center">
              <span className="text-default-400 text-small">.org</span>
            </div>
          }
        />
      </div>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/MailIcon.jsx": MailIcon,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <Input type="email" label="Email" />
      <Input type="email" label="Email" placeholder="Enter your email" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Input} from "@nextui-org/react";

export default function App() {
  const variants = ["flat", "bordered", "underlined", "faded"];

  return (
    <div className="w-full flex flex-col gap-4">
      {variants.map((variant) => (
        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <Input type="email" variant={variant} label="Email" />
          <Input type="email" variant={variant} label="Email" placeholder="Enter your email" />
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import keys from "./keys";

export const kbdContent = {
  usage,
  keys,
};

const App = `import {Kbd} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Kbd keys={["command"]}>K</Kbd>
      <Kbd keys={["command", "shift"]}>N</Kbd>
      <Kbd keys={["option", "command"]}>P</Kbd>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Kbd} from "@nextui-org/react";

export default function App() {
  return (
    <Kbd keys={["command"]}>K</Kbd>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-2">
      <Link isBlock showAnchorIcon href="#" color="foreground">
        Foreground
      </Link>
      <Link isBlock showAnchorIcon href="#" color="primary">
        Primary
      </Link>
      <Link isBlock showAnchorIcon href="#" color="secondary">
        Secondary
      </Link>
      <Link isBlock showAnchorIcon href="#" color="success">
        Success
      </Link>
      <Link isBlock showAnchorIcon href="#" color="warning">
        Warning
      </Link>
      <Link isBlock showAnchorIcon href="#" color="danger">
        Danger
      </Link>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Link href="#" color="foreground">Foreground</Link>
      <Link href="#" color="primary">Primary</Link>
      <Link href="#" color="secondary">Secondary</Link>
      <Link href="#" color="success">Success</Link>
      <Link href="#" color="warning">Warning</Link>
      <Link href="#" color="danger">Danger</Link>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const AnchorIcon = `export const AnchorIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    {...props}
  >
    <path
      d="M8.465,11.293c1.133-1.133,3.109-1.133,4.242,0L13.414,12l1.414-1.414l-0.707-0.707c-0.943-0.944-2.199-1.465-3.535-1.465 S7.994,8.935,7.051,9.879L4.929,12c-1.948,1.949-1.948,5.122,0,7.071c0.975,0.975,2.255,1.462,3.535,1.462 c1.281,0,2.562-0.487,3.536-1.462l0.707-0.707l-1.414-1.414l-0.707,0.707c-1.17,1.167-3.073,1.169-4.243,0 c-1.169-1.17-1.169-3.073,0-4.243L8.465,11.293z"
      fill="currentColor"
    />
    <path
      d="M12,4.929l-0.707,0.707l1.414,1.414l0.707-0.707c1.169-1.167,3.072-1.169,4.243,0c1.169,1.17,1.169,3.073,0,4.243 l-2.122,2.121c-1.133,1.133-3.109,1.133-4.242,0L10.586,12l-1.414,1.414l0.707,0.707c0.943,0.944,2.199,1.465,3.535,1.465 s2.592-0.521,3.535-1.465L19.071,12c1.948-1.949,1.948-5.122,0-7.071C17.121,2.979,13.948,2.98,12,4.929z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Link} from "@nextui-org/react";
import {AnchorIcon} from "./AnchorIcon";

export default function App() {
  return (
    <Link
      isExternal
      showAnchorIcon
      href="https://github.com/nextui-org/nextui"
      anchorIcon={<AnchorIcon />}
    >
      Custom Icon
    </Link>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AnchorIcon.jsx": AnchorIcon,
};

export default {
  ...react,
};

const App = `import {forwardRef} from "react";
import {LinkIcon} from "@nextui-org/shared-icons";
import {linkAnchorClasses} from "@nextui-org/theme";

import {useLink} from "@nextui-org/react";

const MyLink = forwardRef((props, ref) => {
  const {
    Component,
    children,
    showAnchorIcon,
    anchorIcon = <LinkIcon className={linkAnchorClasses} />,
    getLinkProps,
  } = useLink({
    ...props,
    ref,
  });

  return (
    <Component {...getLinkProps()}>
      <>
        {children}
        {showAnchorIcon && anchorIcon}
      </>
    </Component>
  );
});

MyLink.displayName = "MyLink";

export default MyLink;`;

const AppTs = `import {forwardRef} from "react";
import {LinkIcon} from "@nextui-org/shared-icons";
import {linkAnchorClasses} from "@nextui-org/theme";

import {LinkProps, useLink} from "@nextui-org/react";

export interface MyLinkProps extends LinkProps {}

const MyLink = forwardRef<HTMLAnchorElement, MyLinkProps>((props, ref) => {
  const {
    Component,
    children,
    showAnchorIcon,
    anchorIcon = <LinkIcon className={linkAnchorClasses} />,
    getLinkProps,
  } = useLink({
    ...props,
    ref,
  });

  return (
    <Component {...getLinkProps()}>
      <>
        {children}
        {showAnchorIcon && anchorIcon}
      </>
    </Component>
  );
});

MyLink.displayName = "MyLink";

export default MyLink;`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <Link href="#" isDisabled>Disabled Link</Link>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Link isExternal href="https://github.com/nextui-org/nextui">
        External Link
      </Link>
      <Link
        isExternal
        href="https://github.com/nextui-org/nextui"
        showAnchorIcon
      >
        External Link Anchor
      </Link>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import sizes from "./sizes";
import colors from "./colors";
import underline from "./underline";
import external from "./external";
import customAnchorIcon from "./custom-anchor-icon";
import block from "./block";
import nextjs from "./nextjs";
import customImpl from "./custom-impl";
import polymorphic from "./polymorphic";

export const linkContent = {
  usage,
  disabled,
  sizes,
  colors,
  underline,
  external,
  customAnchorIcon,
  block,
  nextjs,
  customImpl,
  polymorphic,
};

const App = `import {Link} from "@nextui-org/react";
import NextLink from "next/link";

export default function App() {
  return (
    <Link href="/route" as={NextLink}>
      Next.js Link
    </Link>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import { Link, Button } from "@nextui-org/react";

export default function App() {
  return (
    <Button
      href="https://github.com/nextui-org/nextui"
      as={Link}
      color="primary"
      showAnchorIcon
      variant="solid"
    >
      Button Link
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Link href="#" size="sm">Small</Link>
      <Link href="#" size="md">Medium</Link>
      <Link href="#" size="lg">Large</Link>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Link href="#" underline="none">None</Link>
      <Link href="#" underline="hover">Hover</Link>
      <Link href="#" underline="always">Always</Link>
      <Link href="#" underline="active">Active</Link>
      <Link href="#" underline="focus">Focus</Link>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Link} from "@nextui-org/react";

export default function App() {
  return (
    <Link href="#">Default Link</Link>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const BugIcon = `export const BugIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M16.895,6.519l2.813-2.812l-1.414-1.414l-2.846,2.846c-0.233-0.166-0.473-0.321-0.723-0.454 c-1.723-0.91-3.726-0.911-5.45,0c-0.25,0.132-0.488,0.287-0.722,0.453L5.707,2.293L4.293,3.707l2.813,2.812 C6.53,7.242,6.08,8.079,5.756,9H2v2h2.307C4.242,11.495,4.2,11.997,4.2,12.5c0,0.507,0.042,1.013,0.107,1.511H2v2h2.753 c0.013,0.039,0.021,0.08,0.034,0.118c0.188,0.555,0.421,1.093,0.695,1.6c0.044,0.081,0.095,0.155,0.141,0.234l-2.33,2.33 l1.414,1.414l2.11-2.111c0.235,0.254,0.478,0.498,0.736,0.716c0.418,0.354,0.867,0.657,1.332,0.903 c0.479,0.253,0.982,0.449,1.496,0.58C10.911,21.931,11.455,22,12,22s1.089-0.069,1.618-0.204c0.514-0.131,1.017-0.327,1.496-0.58 c0.465-0.246,0.914-0.55,1.333-0.904c0.258-0.218,0.5-0.462,0.734-0.716l2.111,2.111l1.414-1.414l-2.33-2.33 c0.047-0.08,0.098-0.155,0.142-0.236c0.273-0.505,0.507-1.043,0.694-1.599c0.013-0.039,0.021-0.079,0.034-0.118H22v-2h-2.308 c0.065-0.499,0.107-1.004,0.107-1.511c0-0.503-0.042-1.005-0.106-1.5H22V9h-3.756C17.92,8.079,17.47,7.242,16.895,6.519z M8.681,7.748c0.445-0.558,0.96-0.993,1.528-1.294c1.141-0.603,2.442-0.602,3.581,0c0.569,0.301,1.084,0.736,1.53,1.295 c0.299,0.373,0.54,0.8,0.753,1.251H7.927C8.141,8.549,8.381,8.121,8.681,7.748z M17.8,12.5c0,0.522-0.042,1.044-0.126,1.553 c-0.079,0.49-0.199,0.973-0.355,1.436c-0.151,0.449-0.34,0.882-0.559,1.288c-0.217,0.399-0.463,0.772-0.733,1.11 c-0.267,0.333-0.56,0.636-0.869,0.898c-0.31,0.261-0.639,0.484-0.979,0.664s-0.695,0.317-1.057,0.41 c-0.04,0.01-0.082,0.014-0.122,0.023V14h-2v5.881c-0.04-0.009-0.082-0.013-0.122-0.023c-0.361-0.093-0.717-0.23-1.057-0.41 s-0.669-0.403-0.978-0.664c-0.311-0.263-0.604-0.565-0.871-0.899c-0.27-0.337-0.516-0.71-0.731-1.108 c-0.22-0.407-0.408-0.84-0.56-1.289c-0.156-0.463-0.276-0.946-0.356-1.438C6.242,13.544,6.2,13.022,6.2,12.5 c0-0.505,0.041-1.009,0.119-1.5h11.361C17.759,11.491,17.8,11.995,17.8,12.5z"
      fill="currentColor"
    />
  </svg>
);
`;

const PullRequestIcon = `export const PullRequestIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M19.01 15.163V7.997C19.005 6.391 17.933 4 15 4V2l-4 3 4 3V6c1.829 0 2.001 1.539 2.01 2v7.163c-1.44.434-2.5 1.757-2.5 3.337 0 1.93 1.57 3.5 3.5 3.5s3.5-1.57 3.5-3.5c0-1.58-1.06-2.903-2.5-3.337zm-1 4.837c-.827 0-1.5-.673-1.5-1.5s.673-1.5 1.5-1.5 1.5.673 1.5 1.5-.673 1.5-1.5 1.5zM9.5 5.5C9.5 3.57 7.93 2 6 2S2.5 3.57 2.5 5.5c0 1.58 1.06 2.903 2.5 3.337v6.326c-1.44.434-2.5 1.757-2.5 3.337C2.5 20.43 4.07 22 6 22s3.5-1.57 3.5-3.5c0-1.58-1.06-2.903-2.5-3.337V8.837C8.44 8.403 9.5 7.08 9.5 5.5zm-5 0C4.5 4.673 5.173 4 6 4s1.5.673 1.5 1.5S6.827 7 6 7s-1.5-.673-1.5-1.5zm3 13c0 .827-.673 1.5-1.5 1.5s-1.5-.673-1.5-1.5S5.173 17 6 17s1.5.673 1.5 1.5z"
      fill="currentColor"
    />
  </svg>
);`;

const ChatIcon = `export const ChatIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M5 18v3.766l1.515-.909L11.277 18H16c1.103 0 2-.897 2-2V8c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v8c0 1.103.897 2 2 2h1zM4 8h12v8h-5.277L7 18.234V16H4V8z"
      fill="currentColor"
    />
    <path
      d="M20 2H8c-1.103 0-2 .897-2 2h12c1.103 0 2 .897 2 2v8c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2z"
      fill="currentColor"
    />
  </svg>
);`;

const PlayCircleIcon = `export const PlayCircleIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"
      fill="currentColor"
    />
    <path d="m9 17 8-5-8-5z" fill="currentColor" />
  </svg>
);`;

const LayoutIcon = `export const LayoutIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M19 3H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2zm0 2 .001 4H5V5h14zM5 11h8v8H5v-8zm10 8v-8h4.001l.001 8H15z"
      fill="currentColor"
    />
  </svg>
);`;

const TagIcon = `export const TagIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M11.707 2.293A.997.997 0 0 0 11 2H6a.997.997 0 0 0-.707.293l-3 3A.996.996 0 0 0 2 6v5c0 .266.105.52.293.707l10 10a.997.997 0 0 0 1.414 0l8-8a.999.999 0 0 0 0-1.414l-10-10zM13 19.586l-9-9V6.414L6.414 4h4.172l9 9L13 19.586z"
      fill="currentColor"
    />
    <circle cx="8.353" cy="8.353" fill="currentColor" r="1.647" />
  </svg>
);`;

const UsersIcon = `export const UsersIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M16.604 11.048a5.67 5.67 0 0 0 .751-3.44c-.179-1.784-1.175-3.361-2.803-4.44l-1.105 1.666c1.119.742 1.8 1.799 1.918 2.974a3.693 3.693 0 0 1-1.072 2.986l-1.192 1.192 1.618.475C18.951 13.701 19 17.957 19 18h2c0-1.789-.956-5.285-4.396-6.952z"
      fill="currentColor"
    />
    <path
      d="M9.5 12c2.206 0 4-1.794 4-4s-1.794-4-4-4-4 1.794-4 4 1.794 4 4 4zm0-6c1.103 0 2 .897 2 2s-.897 2-2 2-2-.897-2-2 .897-2 2-2zm1.5 7H8c-3.309 0-6 2.691-6 6v1h2v-1c0-2.206 1.794-4 4-4h3c2.206 0 4 1.794 4 4v1h2v-1c0-3.309-2.691-6-6-6z"
      fill="currentColor"
    />
  </svg>
);`;

const WatchersIcon = `export const WatchersIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="m21.977 13.783-2-9A1.002 1.002 0 0 0 19 4h-3v2h2.198l.961 4.326A4.467 4.467 0 0 0 17.5 10c-1.953 0-3.603 1.258-4.224 3h-2.553c-.621-1.742-2.271-3-4.224-3-.587 0-1.145.121-1.659.326L5.802 6H8V4H5a1 1 0 0 0-.976.783l-2 9 .047.011A4.552 4.552 0 0 0 2 14.5C2 16.981 4.019 19 6.5 19c2.31 0 4.197-1.756 4.449-4h2.102c.252 2.244 2.139 4 4.449 4 2.481 0 4.5-2.019 4.5-4.5 0-.242-.034-.475-.071-.706l.048-.011zM6.5 17C5.122 17 4 15.878 4 14.5S5.122 12 6.5 12 9 13.122 9 14.5 7.878 17 6.5 17zm11 0c-1.379 0-2.5-1.122-2.5-2.5s1.121-2.5 2.5-2.5 2.5 1.122 2.5 2.5-1.121 2.5-2.5 2.5z"
      fill="currentColor"
    />
  </svg>
);`;

const BookIcon = `export const BookIcon = (props) => (
  <svg height="1em" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg" {...props}>
    <path
      d="M6 22h15v-2H6.012C5.55 19.988 5 19.805 5 19s.55-.988 1.012-1H21V4c0-1.103-.897-2-2-2H6c-1.206 0-3 .799-3 3v14c0 2.201 1.794 3 3 3zM5 8V5c0-.805.55-.988 1-1h13v12H5V8z"
      fill="currentColor"
    />
    <path d="M8 6h9v2H8z" fill="currentColor" />
  </svg>
);`;

const ChevronRightIcon = `export const ChevronRightIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    stroke="currentColor"
    strokeLinecap="round"
    strokeLinejoin="round"
    strokeWidth="1.5"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path d="m9 18 6-6-6-6" />
  </svg>
);`;

const IconWrapper = `import {cn} from "@nextui-org/react";

export const IconWrapper = ({children, className}) => (
  <div className={cn(className, "flex items-center rounded-small justify-center w-7 h-7")}>
    {children}
  </div>
);`;

const ItemCounter = `export const ItemCounter = ({number}) => (
  <div className="flex items-center gap-1 text-default-400">
    <span className="text-small">{number}</span>
    <ChevronRightIcon className="text-xl" />
  </div>
);`;

const App = `import {Listbox, ListboxItem} from "@nextui-org/react";
import {IconWrapper} from "./IconWrapper";
import {ItemCounter} from "./ItemCounter";
import {BugIcon} from "./BugIcon";
import {PullRequestIcon} from "./PullRequestIcon";
import {ChatIcon} from "./ChatIcon";
import {PlayCircleIcon} from "./PlayCircleIcon";
import {LayoutIcon} from "./LayoutIcon";
import {TagIcon} from "./TagIcon";
import {UsersIcon} from "./UsersIcon";
import {WatchersIcon} from "./WatchersIcon";
import {BookIcon} from "./BookIcon";
import {ChevronRightIcon} from "./ChevronRightIcon";

export default function App() {
  return (
    <Listbox
      aria-label="User Menu"
      onAction={(key) => alert(key)}
      className="p-0 gap-0 divide-y divide-default-300/50 dark:divide-default-100/80 bg-content1 max-w-[300px] overflow-visible shadow-small rounded-medium"
      itemClasses={{
        base: "px-3 first:rounded-t-medium last:rounded-b-medium rounded-none gap-3 h-12 data-[hover=true]:bg-default-100/80",
      }}
    >
      <ListboxItem
        key="issues"
        endContent={<ItemCounter number={13} />}
        startContent={
          <IconWrapper className="bg-success/10 text-success">
            <BugIcon className="text-lg " />
          </IconWrapper>
        }
      >
        Issues
      </ListboxItem>
      <ListboxItem
        key="pull_requests"
        endContent={<ItemCounter number={6} />}
        startContent={
          <IconWrapper className="bg-primary/10 text-primary">
            <PullRequestIcon className="text-lg " />
          </IconWrapper>
        }
      >
        Pull Requests
      </ListboxItem>
      <ListboxItem
        key="discussions"
        endContent={<ItemCounter number={293} />}
        startContent={
          <IconWrapper className="bg-secondary/10 text-secondary">
            <ChatIcon className="text-lg " />
          </IconWrapper>
        }
      >
        Discussions
      </ListboxItem>
      <ListboxItem
        key="actions"
        endContent={<ItemCounter number={2} />}
        startContent={
          <IconWrapper className="bg-warning/10 text-warning">
            <PlayCircleIcon className="text-lg " />
          </IconWrapper>
        }
      >
        Actions
      </ListboxItem>
      <ListboxItem
        key="projects"
        endContent={<ItemCounter number={4} />}
        startContent={
          <IconWrapper className="bg-default/50 text-foreground">
            <LayoutIcon className="text-lg " />
          </IconWrapper>
        }
      >
        Projects
      </ListboxItem>
      <ListboxItem
        key="releases"
        className="group h-auto py-3"
        endContent={<ItemCounter number={399} />}
        startContent={
          <IconWrapper className="bg-primary/10 text-primary">
            <TagIcon className="text-lg" />
          </IconWrapper>
        }
        textValue="Releases"
      >
        <div className="flex flex-col gap-1">
          <span>Releases</span>
          <div className="px-2 py-1 rounded-small bg-default-100 group-data-[hover=true]:bg-default-200">
            <span className="text-tiny text-default-600">@nextui-org/react@2.0.10</span>
            <div className="flex gap-2 text-tiny">
              <span className="text-default-500">49 minutes ago</span>
              <span className="text-success">Latest</span>
            </div>
          </div>
        </div>
      </ListboxItem>
      <ListboxItem
        key="contributors"
        endContent={<ItemCounter number={79} />}
        startContent={
          <IconWrapper className="bg-warning/10 text-warning">
            <UsersIcon />
          </IconWrapper>
        }
      >
        Contributors
      </ListboxItem>
      <ListboxItem
        key="watchers"
        endContent={<ItemCounter number={82} />}
        startContent={
          <IconWrapper className="bg-default/50 text-foreground">
            <WatchersIcon />
          </IconWrapper>
        }
      >
        Watchers
      </ListboxItem>
      <ListboxItem
        key="license"
        endContent={<span className="text-small text-default-400">MIT</span>}
        startContent={
          <IconWrapper className="bg-danger/10 text-danger dark:text-danger-500">
            <BookIcon />
          </IconWrapper>
        }
      >
        License
      </ListboxItem>
    </Listbox>
  );
}`;

const react = {
  "/App.jsx": App,
  "/IconWrapper.jsx": IconWrapper,
  "/ItemCounter.jsx": ItemCounter,
  "/BugIcon.jsx": BugIcon,
  "/PullRequestIcon.jsx": PullRequestIcon,
  "/ChatIcon.jsx": ChatIcon,
  "/PlayCircleIcon.jsx": PlayCircleIcon,
  "/LayoutIcon.jsx": LayoutIcon,
  "/TagIcon.jsx": TagIcon,
  "/UsersIcon.jsx": UsersIcon,
  "/WatchersIcon.jsx": WatchersIcon,
  "/BookIcon.jsx": BookIcon,
  "/ChevronRightIcon.jsx": ChevronRightIcon,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem, cn} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <ListboxWrapper>
      <Listbox variant="flat" aria-label="Listbox menu with descriptions">
        <ListboxItem
          key="new"
          description="Create a new file"
          startContent={<AddNoteIcon className={iconClasses} />}
        >
          New file
        </ListboxItem>
        <ListboxItem
          key="copy"
          description="Copy the file link"
          startContent={<CopyDocumentIcon className={iconClasses} />}
        >
          Copy link
        </ListboxItem>
        <ListboxItem
          key="edit"
          showDivider
          description="Allows you to edit the file"
          startContent={<EditDocumentIcon className={iconClasses} />}
        >
          Edit file
        </ListboxItem>
        <ListboxItem
          key="delete"
          className="text-danger"
          color="danger"
          description="Permanently delete the file"
          startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
        >
          Delete file
        </ListboxItem>
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";

export default function App() {
  return (
    <ListboxWrapper>
      <Listbox
        aria-label="Example with disabled actions" 
        disabledKeys={["edit", "delete"]}
        onAction={(key) => alert(key)}
      >
        <ListboxItem key="new">New file</ListboxItem>
        <ListboxItem key="copy">Copy link</ListboxItem>
        <ListboxItem key="edit">Edit file</ListboxItem>
        <ListboxItem key="delete" className="text-danger" color="danger">
          Delete file
        </ListboxItem>
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
};

export default {
  ...react,
};

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";

export default function App() {
  const items = [
    {
      key: "new",
      label: "New file",
    },
    {
      key: "copy",
      label: "Copy link",
    },
    {
      key: "edit",
      label: "Edit file",
    },
    {
      key: "delete",
      label: "Delete file",
    }
  ];

  return (
    <ListboxWrapper>
      <Listbox
        items={items}
        aria-label="Dynamic Actions"
        onAction={(key) => alert(key)}
      >
        {(item) => (
          <ListboxItem
            key={item.key}
            color={item.key === "delete" ? "danger" : "default"}
            className={item.key === "delete" ? "text-danger" : ""}
          >
            {item.label}
          </ListboxItem>
        )}
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem, cn} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <ListboxWrapper>
      <Listbox variant="faded" aria-label="Listbox menu with icons">
        <ListboxItem
          key="new"
          startContent={<AddNoteIcon className={iconClasses} />}
        >
          New file
        </ListboxItem>
        <ListboxItem
          key="copy"
          startContent={<CopyDocumentIcon className={iconClasses} />}
        >
          Copy link
        </ListboxItem>
        <ListboxItem
          key="edit"
          showDivider
          startContent={<EditDocumentIcon className={iconClasses} />}
        >
          Edit file
        </ListboxItem>
        <ListboxItem
          key="delete"
          className="text-danger"
          color="danger"
          startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
        >
          Delete file
        </ListboxItem>
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import dynamic from "./dynamic";
import disabledKeys from "./disabled-keys";
import variants from "./variants";
import singleSelection from "./single-selection";
import multipleSelection from "./multiple-selection";
import icons from "./icons";
import description from "./description";
import sections from "./sections";
import customStyles from "./custom-styles";
import topContent from "./top-content";

export const listboxContent = {
  usage,
  dynamic,
  disabledKeys,
  variants,
  singleSelection,
  multipleSelection,
  icons,
  description,
  sections,
  customStyles,
  topContent,
};

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["text"]));

  const selectedValue = React.useMemo(
    () => Array.from(selectedKeys).join(", "),
    [selectedKeys]
  );

  return (
    <div className="flex flex-col gap-2">
      <ListboxWrapper>
        <Listbox 
          aria-label="Multiple selection example"
          variant="flat"
          disallowEmptySelection
          selectionMode="multiple"
          selectedKeys={selectedKeys}
          onSelectionChange={setSelectedKeys}
        >
          <ListboxItem key="text">Text</ListboxItem>
          <ListboxItem key="number">Number</ListboxItem>
          <ListboxItem key="date">Date</ListboxItem>
          <ListboxItem key="single_date">Single Date</ListboxItem>
          <ListboxItem key="iteration">Iteration</ListboxItem>
        </Listbox>
      </ListboxWrapper>
      <p className="text-small text-default-500">Selected value: {selectedValue}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
};

export default {
  ...react,
};

const AddNoteIcon = `export const AddNoteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"
      fill="currentColor"
    />
  </svg>
);`;

const CopyDocumentIcon = `export const CopyDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z"
      fill="currentColor"
    />
    <path
      d="M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z"
      fill="currentColor"
    />
  </svg>
);`;

const EditDocumentIcon = `export const EditDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z"
      fill="currentColor"
      opacity={0.4}
    />
    <path
      d="M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z"
      fill="currentColor"
    />
  </svg>
);`;

const DeleteDocumentIcon = `export const DeleteDocumentIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z"
      fill="currentColor"
    />
    <path
      d="M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z"
      fill="currentColor"
      opacity={0.399}
    />
    <path
      clipRule="evenodd"
      d="M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem, ListboxSection, cn} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";
import {AddNoteIcon} from "./AddNoteIcon.jsx";
import {CopyDocumentIcon} from "./CopyDocumentIcon.jsx";
import {EditDocumentIcon} from "./EditDocumentIcon.jsx";
import {DeleteDocumentIcon} from "./DeleteDocumentIcon.jsx";

export default function App() {
  const iconClasses = "text-xl text-default-500 pointer-events-none flex-shrink-0";

  return (
    <ListboxWrapper>
      <Listbox variant="flat" aria-label="Listbox menu with sections">
        <ListboxSection title="Actions" showDivider>  
          <ListboxItem
            key="new"
            description="Create a new file"
            startContent={<AddNoteIcon className={iconClasses} />}
          >
            New file
          </ListboxItem>
          <ListboxItem
            key="copy"
            description="Copy the file link"
            startContent={<CopyDocumentIcon className={iconClasses} />}
          >
            Copy link
          </ListboxItem>
          <ListboxItem
            key="edit"
            description="Allows you to edit the file"
            startContent={<EditDocumentIcon className={iconClasses} />}
          >
            Edit file
          </ListboxItem>
        </ListboxSection> 
        <ListboxSection title="Danger zone">  
          <ListboxItem
            key="delete"
            className="text-danger"
            color="danger"
            description="Permanently delete the file"
            startContent={<DeleteDocumentIcon className={cn(iconClasses, "text-danger")} />}
          >
            Delete file
          </ListboxItem>
        </ListboxSection> 
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
  "/AddNoteIcon.jsx": AddNoteIcon,
  "/CopyDocumentIcon.jsx": CopyDocumentIcon,
  "/EditDocumentIcon.jsx": EditDocumentIcon,
  "/DeleteDocumentIcon.jsx": DeleteDocumentIcon,
};

export default {
  ...react,
};

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["text"]));

  const selectedValue = React.useMemo(
    () => Array.from(selectedKeys).join(", "),
    [selectedKeys]
  );

  return (
    <div className="flex flex-col gap-2">
      <ListboxWrapper>
        <Listbox 
          aria-label="Single selection example"
          variant="flat"
          disallowEmptySelection
          selectionMode="single"
          selectedKeys={selectedKeys}
          onSelectionChange={setSelectedKeys}
        >
          <ListboxItem key="text">Text</ListboxItem>
          <ListboxItem key="number">Number</ListboxItem>
          <ListboxItem key="date">Date</ListboxItem>
          <ListboxItem key="single_date">Single Date</ListboxItem>
          <ListboxItem key="iteration">Iteration</ListboxItem>
        </Listbox>
      </ListboxWrapper>
      <p className="text-small text-default-500">Selected value: {selectedValue}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const ListboxWrapperTs = `export const ListboxWrapper = ({children}: { children: React.ReactNode }) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem, Chip, ScrollShadow, Avatar} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";
import {users} from "./data";

export default function App() {
  const [values, setValues] = React.useState(new Set(["1"]));

  const arrayValues = Array.from(values);

  const topContent = React.useMemo(() => {
    if (!arrayValues.length) {
      return null;
    }

    return (
      <ScrollShadow
        hideScrollBar
        className="w-full flex py-0.5 px-2 gap-1"
        orientation="horizontal"
      >
        {arrayValues.map((value) => (
          <Chip key={value}>{users.find((user) => \`\${user.id}\` === \`\${value}\`).name}</Chip>
        ))}
      </ScrollShadow>
    );
  }, [arrayValues.length]);

  return (
    <ListboxWrapper>
      <Listbox
        topContent={topContent}
        classNames={{
          base: "max-w-xs",
          list: "max-h-[300px] overflow-scroll",
        }}
        defaultSelectedKeys={["1"]}
        items={users}
        label="Assigned to"
        selectionMode="multiple"
        onSelectionChange={setValues}
        variant="flat"
      >
        {(item) => (
          <ListboxItem key={item.id} textValue={item.name}>
            <div className="flex gap-2 items-center">
              <Avatar alt={item.name} className="flex-shrink-0" size="sm" src={item.avatar} />
              <div className="flex flex-col">
                <span className="text-small">{item.name}</span>
                <span className="text-tiny text-default-400">{item.email}</span>
              </div>
            </div>
          </ListboxItem>
        )}
      </Listbox>
    </ListboxWrapper>
  );
}`;

const AppTs = `import {Listbox, ListboxItem, Chip, ScrollShadow, Avatar, Selection} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";
import {users} from "./data";

export default function App() {
  const [values, setValues] = React.useState<Selection>(new Set(["1"]));

  const arrayValues = Array.from(values);

  const topContent = React.useMemo(() => {
    if (!arrayValues.length) {
      return null;
    }

    return (
      <ScrollShadow
        hideScrollBar
        className="w-full flex py-0.5 px-2 gap-1"
        orientation="horizontal"
      >
        {arrayValues.map((value) => (
          <Chip key={value}>{users.find((user) => \`\${user.id}\` === \`\${value}\`).name}</Chip>
        ))}
      </ScrollShadow>
    );
  }, [arrayValues.length]);

  return (
    <ListboxWrapper>
      <Listbox
        topContent={topContent}
        classNames={{
          base: "max-w-xs",
          list: "max-h-[300px] overflow-scroll",
        }}
        defaultSelectedKeys={["1"]}
        items={users}
        label="Assigned to"
        selectionMode="multiple"
        onSelectionChange={setValues}
        variant="flat"
      >
        {(item) => (
          <ListboxItem key={item.id} textValue={item.name}>
            <div className="flex gap-2 items-center">
              <Avatar alt={item.name} className="flex-shrink-0" size="sm" src={item.avatar} />
              <div className="flex flex-col">
                <span className="text-small">{item.name}</span>
                <span className="text-tiny text-default-400">{item.email}</span>
              </div>
            </div>
          </ListboxItem>
        )}
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/ListboxWrapper.tsx": ListboxWrapperTs,
  "/data.ts": data,
};

export default {
  ...react,
  ...reactTs,
};

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";

export default function App() {
  return (
    <ListboxWrapper>
      <Listbox
        aria-label="Actions"
        onAction={(key) => alert(key)}
      >
        <ListboxItem key="new">New file</ListboxItem>
        <ListboxItem key="copy">Copy link</ListboxItem>
        <ListboxItem key="edit">Edit file</ListboxItem>
        <ListboxItem key="delete" className="text-danger" color="danger">
          Delete file
        </ListboxItem>
      </Listbox>
    </ListboxWrapper>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
};

export default {
  ...react,
};

const ListboxWrapper = `export const ListboxWrapper = ({children}) => (
  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
    {children}
  </div>
);`;

const App = `import {Listbox, ListboxItem, RadioGroup, Radio} from "@nextui-org/react";
import {ListboxWrapper} from "./ListboxWrapper";

export default function App() {
  const [selectedVariant, setSelectedVariant] = React.useState("solid")
  const [selectedColor, setSelectedColor] = React.useState("default")

  const variants = ["solid", "bordered", "light", "flat", "faded", "shadow"];
  const colors = ["default", "primary", "secondary", "success", "warning", "danger"];

  return (
    <div className="flex flex-col gap-4">
      <ListboxWrapper>
        <Listbox
          aria-label="Listbox Variants"
          color={selectedColor} 
          variant={selectedVariant}
        >
          <ListboxItem key="new">New file</ListboxItem>
          <ListboxItem key="copy">Copy link</ListboxItem>
          <ListboxItem key="edit">Edit file</ListboxItem>
          <ListboxItem key="delete" className="text-danger" color="danger">
            Delete file
          </ListboxItem>
        </Listbox>
      </ListboxWrapper>  
      <div className="flex flex-col gap-2">
        <RadioGroup
          label="Select listbox item variant"
          orientation="horizontal"
          color={selectedVariant}
          defaultValue="solid"
          onValueChange={setSelectedVariant}
        >
          {variants.map((variant) => (
            <Radio key={variant} value={variant} className="capitalize">
              {variant}
            </Radio>
          ))}
        </RadioGroup>
        <RadioGroup
          label="Select listbox item color"
          orientation="horizontal"
          color={selectedColor}
          defaultValue="default"
          onValueChange={setSelectedColor}
        >
          {colors.map((color) => (
            <Radio key={color} value={color} className="capitalize">
              {color}
            </Radio>
          ))}
        </RadioGroup>
      </div> 
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ListboxWrapper.jsx": ListboxWrapper,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onClose} = useDisclosure();
  const [backdrop, setBackdrop] = React.useState('opaque')

  const backdrops = ["opaque", "blur", "transparent"];

  const handleOpen = (backdrop) => {
    setBackdrop(backdrop)
    onOpen();
  }

  return (
    <>
      <div className="flex flex-wrap gap-3">
        {backdrops.map((b) => (
          <Button  
            key={b}
            variant="flat" 
            color="warning" 
            onPress={() => handleOpen(b)}
            className="capitalize"
          >
           {b}
          </Button>
        ))}  
      </div>
      <Modal backdrop={backdrop} isOpen={isOpen} onClose={onClose}>
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur 
                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  return (
    <>
      <Button onPress={onOpen}>Open Modal</Button>
      <Modal 
        backdrop="opaque" 
        isOpen={isOpen} 
        onOpenChange={onOpenChange}
        classNames={{
          backdrop: "bg-gradient-to-t from-zinc-900 to-zinc-900/10 backdrop-opacity-20"
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur 
                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  return (
    <>
      <Button onPress={onOpen}>Open Modal</Button>
      <Modal 
        backdrop="opaque" 
        isOpen={isOpen} 
        onOpenChange={onOpenChange}
        motionProps={{
          variants: {
            enter: {
              y: 0,
              opacity: 1,
              transition: {
                duration: 0.3,
                ease: "easeOut",
              },
            },
            exit: {
              y: -20,
              opacity: 0,
              transition: {
                duration: 0.2,
                ease: "easeIn",
              },
            },
          }
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur 
                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  return (
    <>
      <Button onPress={onOpen} color="secondary">Open Modal</Button>
      <Modal 
        backdrop="opaque" 
        isOpen={isOpen} 
        onOpenChange={onOpenChange}
        radius="lg"
        classNames={{
          body: "py-6",
          backdrop: "bg-[#292f46]/50 backdrop-opacity-40",
          base: "border-[#292f46] bg-[#19172c] dark:bg-[#19172c] text-[#a8b0d3]",
          header: "border-b-[1px] border-[#292f46]",
          footer: "border-t-[1px] border-[#292f46]",
          closeButton: "hover:bg-white/5 active:bg-white/10",
        }}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur 
                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="foreground" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button className="bg-[#6f4ef2] shadow-lg shadow-indigo-500/20" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const MailIcon = `export const MailIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M17 3.5H7C4 3.5 2 5 2 8.5V15.5C2 19 4 20.5 7 20.5H17C20 20.5 22 19 22 15.5V8.5C22 5 20 3.5 17 3.5ZM17.47 9.59L14.34 12.09C13.68 12.62 12.84 12.88 12 12.88C11.16 12.88 10.31 12.62 9.66 12.09L6.53 9.59C6.21 9.33 6.16 8.85 6.41 8.53C6.67 8.21 7.14 8.15 7.46 8.41L10.59 10.91C11.35 11.52 12.64 11.52 13.4 10.91L16.53 8.41C16.85 8.15 17.33 8.2 17.58 8.53C17.84 8.85 17.79 9.33 17.47 9.59Z"
      fill="currentColor"
    />
  </svg>
);
`;

const LockIcon = `export const LockIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M12.0011 17.3498C12.9013 17.3498 13.6311 16.6201 13.6311 15.7198C13.6311 14.8196 12.9013 14.0898 12.0011 14.0898C11.1009 14.0898 10.3711 14.8196 10.3711 15.7198C10.3711 16.6201 11.1009 17.3498 12.0011 17.3498Z"
      fill="currentColor"
    />
    <path
      d="M18.28 9.53V8.28C18.28 5.58 17.63 2 12 2C6.37 2 5.72 5.58 5.72 8.28V9.53C2.92 9.88 2 11.3 2 14.79V16.65C2 20.75 3.25 22 7.35 22H16.65C20.75 22 22 20.75 22 16.65V14.79C22 11.3 21.08 9.88 18.28 9.53ZM12 18.74C10.33 18.74 8.98 17.38 8.98 15.72C8.98 14.05 10.34 12.7 12 12.7C13.66 12.7 15.02 14.06 15.02 15.72C15.02 17.39 13.67 18.74 12 18.74ZM7.35 9.44C7.27 9.44 7.2 9.44 7.12 9.44V8.28C7.12 5.35 7.95 3.4 12 3.4C16.05 3.4 16.88 5.35 16.88 8.28V9.45C16.8 9.45 16.73 9.45 16.65 9.45H7.35V9.44Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure, Checkbox, Input, Link} from "@nextui-org/react";
import {MailIcon} from './MailIcon.jsx';
import {LockIcon} from './LockIcon.jsx';

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  return (
    <>
      <Button onPress={onOpen} color="primary">Open Modal</Button>
      <Modal 
        isOpen={isOpen} 
        onOpenChange={onOpenChange}
        placement="top-center"
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Log in</ModalHeader>
              <ModalBody>
                <Input
                  autoFocus
                  endContent={
                    <MailIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
                  }
                  label="Email"
                  placeholder="Enter your email"
                  variant="bordered"
                />
                <Input
                  endContent={
                    <LockIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
                  }
                  label="Password"
                  placeholder="Enter your password"
                  type="password"
                  variant="bordered"
                />
                <div className="flex py-2 px-1 justify-between">
                  <Checkbox
                    classNames={{
                      label: "text-small",
                    }}
                  >
                    Remember me
                  </Checkbox>
                  <Link color="primary" href="#" size="sm">
                    Forgot password?
                  </Link>
                </div>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="flat" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Sign in
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
  "/MailIcon.jsx": MailIcon,
  "/LockIcon.jsx": LockIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import nonDismissable from "./non-dismissable";
import placement from "./placement";
import overflow from "./overflow";
import form from "./form";
import backdrop from "./backdrop";
import customBackdrop from "./custom-backdrop";
import customMotion from "./custom-motion";
import customStyles from "./custom-styles";

export const modalContent = {
  usage,
  sizes,
  nonDismissable,
  placement,
  overflow,
  form,
  backdrop,
  customBackdrop,
  customMotion,
  customStyles,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  return (
    <>
      <Button onPress={onOpen}>Open Modal</Button>
      <Modal isOpen={isOpen} onOpenChange={onOpenChange} isDismissable={false} isKeyboardDismissDisabled={true}>
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur 
                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure, RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();
  const [scrollBehavior, setScrollBehavior] = React.useState("inside");

  return (
    <div className="flex flex-col gap-2">
      <Button onPress={onOpen}>Open Modal</Button>
      <RadioGroup
        label="Select scroll behavior"
        orientation="horizontal"
        value={scrollBehavior}
        onValueChange={setScrollBehavior}
      >
        <Radio value="inside">inside</Radio>
        <Radio value="outside">outside</Radio>
      </RadioGroup>
      <Modal
        isOpen={isOpen}
        onOpenChange={onOpenChange}
        scrollBehavior={scrollBehavior}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Modal Title
              </ModalHeader>
              <ModalBody>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat
                  consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex
                  incididunt cillum quis. Velit duis sit officia eiusmod Lorem
                  aliqua enim laboris do dolor eiusmod. Et mollit incididunt
                  nisi consectetur esse laborum eiusmod pariatur proident Lorem
                  eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                  Magna exercitation reprehenderit magna aute tempor cupidatat
                  consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex
                  incididunt cillum quis. Velit duis sit officia eiusmod Lorem
                  aliqua enim laboris do dolor eiusmod. Et mollit incididunt
                  nisi consectetur esse laborum eiusmod pariatur proident Lorem
                  eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
                <p>
                  Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit
                  duis sit officia eiusmod Lorem aliqua enim laboris do dolor
                  eiusmod. Et mollit incididunt nisi consectetur esse laborum
                  eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt
                  nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur
                  adipiscing elit. Nullam pulvinar risus non risus hendrerit
                  venenatis. Pellentesque sit amet hendrerit risus, sed
                  porttitor quam. Magna exercitation reprehenderit magna aute
                  tempor cupidatat consequat elit dolor adipisicing. Mollit
                  dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit
                  officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et
                  mollit incididunt nisi consectetur esse laborum eiusmod
                  pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad
                  veniam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat
                  consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex
                  incididunt cillum quis. Velit duis sit officia eiusmod Lorem
                  aliqua enim laboris do dolor eiusmod. Et mollit incididunt
                  nisi consectetur esse laborum eiusmod pariatur proident Lorem
                  eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
                <p>
                  Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit
                  duis sit officia eiusmod Lorem aliqua enim laboris do dolor
                  eiusmod. Et mollit incididunt nisi consectetur esse laborum
                  eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt
                  nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur
                  adipiscing elit. Nullam pulvinar risus non risus hendrerit
                  venenatis. Pellentesque sit amet hendrerit risus, sed
                  porttitor quam. Magna exercitation reprehenderit magna aute
                  tempor cupidatat consequat elit dolor adipisicing. Mollit
                  dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit
                  officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et
                  mollit incididunt nisi consectetur esse laborum eiusmod
                  pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad
                  veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </div>
  );
}`;

const AppTs = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, ModalProps, Button, useDisclosure, RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();
  const [scrollBehavior, setScrollBehavior] = React.useState<ModalProps["scrollBehavior"]>("inside");

  return (
    <div className="flex flex-col gap-2">
      <Button onPress={onOpen}>Open Modal</Button>
      <RadioGroup
        label="Select scroll behavior"
        orientation="horizontal"
        value={scrollBehavior}
        onValueChange={setScrollBehavior}
      >
        <Radio value="inside">inside</Radio>
        <Radio value="outside">outside</Radio>
      </RadioGroup>
      <Modal
        isOpen={isOpen}
        onOpenChange={onOpenChange}
        scrollBehavior={scrollBehavior}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Modal Title
              </ModalHeader>
              <ModalBody>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat
                  consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex
                  incididunt cillum quis. Velit duis sit officia eiusmod Lorem
                  aliqua enim laboris do dolor eiusmod. Et mollit incididunt
                  nisi consectetur esse laborum eiusmod pariatur proident Lorem
                  eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                  Magna exercitation reprehenderit magna aute tempor cupidatat
                  consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex
                  incididunt cillum quis. Velit duis sit officia eiusmod Lorem
                  aliqua enim laboris do dolor eiusmod. Et mollit incididunt
                  nisi consectetur esse laborum eiusmod pariatur proident Lorem
                  eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
                <p>
                  Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit
                  duis sit officia eiusmod Lorem aliqua enim laboris do dolor
                  eiusmod. Et mollit incididunt nisi consectetur esse laborum
                  eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt
                  nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur
                  adipiscing elit. Nullam pulvinar risus non risus hendrerit
                  venenatis. Pellentesque sit amet hendrerit risus, sed
                  porttitor quam. Magna exercitation reprehenderit magna aute
                  tempor cupidatat consequat elit dolor adipisicing. Mollit
                  dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit
                  officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et
                  mollit incididunt nisi consectetur esse laborum eiusmod
                  pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad
                  veniam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat
                  consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex
                  incididunt cillum quis. Velit duis sit officia eiusmod Lorem
                  aliqua enim laboris do dolor eiusmod. Et mollit incididunt
                  nisi consectetur esse laborum eiusmod pariatur proident Lorem
                  eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
                <p>
                  Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit
                  duis sit officia eiusmod Lorem aliqua enim laboris do dolor
                  eiusmod. Et mollit incididunt nisi consectetur esse laborum
                  eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt
                  nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur
                  adipiscing elit. Nullam pulvinar risus non risus hendrerit
                  venenatis. Pellentesque sit amet hendrerit risus, sed
                  porttitor quam. Magna exercitation reprehenderit magna aute
                  tempor cupidatat consequat elit dolor adipisicing. Mollit
                  dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit
                  officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et
                  mollit incididunt nisi consectetur esse laborum eiusmod
                  pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad
                  veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure, RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();
  const [modalPlacement, setModalPlacement] = React.useState("auto");

  return (
    <div className="flex flex-col gap-2">
      <Button onPress={onOpen} className="max-w-fit">Open Modal</Button>
      <RadioGroup
        label="Select modal placement"
        orientation="horizontal"
        value={modalPlacement}
        onValueChange={setModalPlacement}
      >
        <Radio value="auto">auto</Radio>
        <Radio value="top">top</Radio>
        <Radio value="bottom">bottom</Radio>
        <Radio value="center">center</Radio>
        <Radio value="top-center">top-center</Radio>
        <Radio value="bottom-center">bottom-center</Radio>
      </RadioGroup>
      <Modal 
        isOpen={isOpen} 
        placement={modalPlacement}
        onOpenChange={onOpenChange} 
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onClose} = useDisclosure();
  const [size, setSize] = React.useState('md')

  const sizes = ["xs", "sm", "md", "lg", "xl", "2xl", "3xl", "4xl", "5xl", "full"];


  const handleOpen = (size) => {
    setSize(size)
    onOpen();
  }

  return (
    <>
      <div className="flex flex-wrap gap-3">
        {sizes.map((size) => (
          <Button key={size} onPress={() => handleOpen(size)}>Open {size}</Button>
        ))}  
      </div>
      <Modal 
        size={size} 
        isOpen={isOpen} 
        onClose={onClose} 
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure} from "@nextui-org/react";

export default function App() {
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  return (
    <>
      <Button onPress={onOpen}>Open Modal</Button>
      <Modal isOpen={isOpen} onOpenChange={onOpenChange}>
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">Modal Title</ModalHeader>
              <ModalBody>
                <p> 
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Nullam pulvinar risus non risus hendrerit venenatis.
                  Pellentesque sit amet hendrerit risus, sed porttitor quam.
                </p>
                <p>
                  Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit
                  dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. 
                  Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. 
                  Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur 
                  proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
                </p>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Action
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar isBordered>
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarMenuToggle, NavbarMenuItem, NavbarMenu, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);

  const menuItems = [
    "Profile",
    "Dashboard",
    "Activity",
    "Analytics",
    "System",
    "Deployments",
    "My Settings",
    "Team Settings",
    "Help & Feedback",
    "Log Out",
  ];

  return (
    <Navbar
      isBordered
      isMenuOpen={isMenuOpen}
      onMenuOpenChange={setIsMenuOpen}
    >
      <NavbarContent className="sm:hidden" justify="start">
        <NavbarMenuToggle aria-label={isMenuOpen ? "Close menu" : "Open menu"} />
      </NavbarContent>

      <NavbarContent className="sm:hidden pr-3" justify="center">
        <NavbarBrand>
          <AcmeLogo />
          <p className="font-bold text-inherit">ACME</p>
        </NavbarBrand>
      </NavbarContent>

      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarBrand>
          <AcmeLogo />
          <p className="font-bold text-inherit">ACME</p>
        </NavbarBrand>
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>

      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="warning" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>

      <NavbarMenu>
        {menuItems.map((item, index) => (
          <NavbarMenuItem key={\`\${item}-\${index}\`}>
            <Link
              className="w-full"
              color={
                index === 2 ? "warning" : index === menuItems.length - 1 ? "danger" : "foreground"
              }
              href="#"
              size="lg"
            >
              {item}
            </Link>
          </NavbarMenuItem>
        ))}
      </NavbarMenu>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar
      classNames={{
        item: [
          "flex",
          "relative",
          "h-full",
          "items-center",
          "data-[active=true]:after:content-['']",
          "data-[active=true]:after:absolute",
          "data-[active=true]:after:bottom-0",
          "data-[active=true]:after:left-0",
          "data-[active=true]:after:right-0",
          "data-[active=true]:after:h-[2px]",
          "data-[active=true]:after:rounded-[2px]",
          "data-[active=true]:after:bg-primary",
        ],
      }}
    >
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarMenuToggle, NavbarMenu, NavbarMenuItem, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  const menuItems = [
    "Profile",
    "Dashboard",
    "Activity",
    "Analytics",
    "System",
    "Deployments",
    "My Settings",
    "Team Settings",
    "Help & Feedback",
    "Log Out",
  ];

  return (
    <Navbar disableAnimation isBordered>
      <NavbarContent className="sm:hidden" justify="start">
        <NavbarMenuToggle />
      </NavbarContent>

      <NavbarContent className="sm:hidden pr-3" justify="center">
        <NavbarBrand>
          <AcmeLogo />
          <p className="font-bold text-inherit">ACME</p>
        </NavbarBrand>
      </NavbarContent>

      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarBrand>
          <AcmeLogo />
          <p className="font-bold text-inherit">ACME</p>
        </NavbarBrand>
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page" color="warning">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>

      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="warning" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>

      <NavbarMenu>
        {menuItems.map((item, index) => (
          <NavbarMenuItem key={\`\${item}-\${index}\`}>
            <Link
              className="w-full"
              color={
                index === 2 ? "warning" : index === menuItems.length - 1 ? "danger" : "foreground"
              }
              href="#"
              size="lg"
            >
              {item}
            </Link>
          </NavbarMenuItem>
        ))}
      </NavbarMenu>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar isBordered isBlurred={false}>
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar shouldHideOnScroll>
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

import usage from "./usage";
import bordered from "./bordered";
import disabledBlur from "./disabled-blur";
import staticPosition from "./static";
import hideOnScroll from "./hide-on-scroll";
import withMenu from "./with-menu";
import controlledMenu from "./controlled-menu";
import disableMenuAnimation from "./disable-menu-animation";
import withAvatar from "./with-avatar";
import withDropdownMenu from "./with-dropdown-menu";
import withSearchInput from "./with-search-input";
import customActiveItem from "./custom-active-item";

export const navbarContent = {
  usage,
  bordered,
  staticPosition,
  hideOnScroll,
  disabledBlur,
  withMenu,
  controlledMenu,
  disableMenuAnimation,
  withAvatar,
  withDropdownMenu,
  withSearchInput,
  customActiveItem,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar position="static">
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar>
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, DropdownItem, DropdownTrigger, Dropdown, DropdownMenu, Avatar} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  return (
    <Navbar>
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>

      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page" color="secondary">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>

      <NavbarContent as="div" justify="end">
        <Dropdown placement="bottom-end">
          <DropdownTrigger>
            <Avatar
              isBordered
              as="button"
              className="transition-transform"
              color="secondary"
              name="Jason Hughes"
              size="sm"
              src="https://i.pravatar.cc/150?u=a042581f4e29026704d"
            />
          </DropdownTrigger>
          <DropdownMenu aria-label="Profile Actions" variant="flat">
            <DropdownItem key="profile" className="h-14 gap-2">
              <p className="font-semibold">Signed in as</p>
              <p className="font-semibold">zoey@example.com</p>
            </DropdownItem>
            <DropdownItem key="settings">My Settings</DropdownItem>
            <DropdownItem key="team_settings">Team Settings</DropdownItem>
            <DropdownItem key="analytics">Analytics</DropdownItem>
            <DropdownItem key="system">System</DropdownItem>
            <DropdownItem key="configurations">Configurations</DropdownItem>
            <DropdownItem key="help_and_feedback">Help & Feedback</DropdownItem>
            <DropdownItem key="logout" color="danger">
              Log Out
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const Icons = `export const ChevronDown = ({fill, size, height, width, ...props}) => {
  return (
    <svg
      fill="none"
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit={10}
        strokeWidth={1.5}
      />
    </svg>
  );
};

export const Lock = ({fill, size, height, width, ...props}) => {
  const color = fill;

  return (
    <svg
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g transform="translate(3.5 2)">
        <path
          d="M9.121,6.653V4.5A4.561,4.561,0,0,0,0,4.484V6.653"
          fill="none"
          stroke={color}
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeMiterlimit="10"
          strokeWidth={1.5}
          transform="translate(3.85 0.75)"
        />
        <path
          d="M.5,0V2.221"
          fill="none"
          stroke={color}
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeMiterlimit="10"
          strokeWidth={1.5}
          transform="translate(7.91 12.156)"
        />
        <path
          d="M7.66,0C1.915,0,0,1.568,0,6.271s1.915,6.272,7.66,6.272,7.661-1.568,7.661-6.272S13.4,0,7.66,0Z"
          fill="none"
          stroke={color}
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeMiterlimit="10"
          strokeWidth={1.5}
          transform="translate(0.75 6.824)"
        />
      </g>
    </svg>
  );
};

export const Activity = ({fill, size, height, width, ...props}) => {
  return (
    <svg
      height={size || height || 24}
      viewBox="0 0 24 24"
      width={size || width || 24}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g
        fill="none"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit={10}
        strokeWidth={1.5}
      >
        <path d="M6.918 14.854l2.993-3.889 3.414 2.68 2.929-3.78" />
        <path d="M19.668 2.35a1.922 1.922 0 11-1.922 1.922 1.921 1.921 0 011.922-1.922z" />
        <path d="M20.756 9.269a20.809 20.809 0 01.194 3.034c0 6.938-2.312 9.25-9.25 9.25s-9.25-2.312-9.25-9.25 2.313-9.25 9.25-9.25a20.931 20.931 0 012.983.187" />
      </g>
    </svg>
  );
};

export const Flash = ({
  fill = "currentColor",
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      fill="none"
      height={size || height}
      viewBox="0 0 24 24"
      width={size || width}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M6.09 13.28h3.09v7.2c0 1.68.91 2.02 2.02.76l7.57-8.6c.93-1.05.54-1.92-.87-1.92h-3.09v-7.2c0-1.68-.91-2.02-2.02-.76l-7.57 8.6c-.92 1.06-.53 1.92.87 1.92Z"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit={10}
        strokeWidth={1.5}
      />
    </svg>
  );
};

export const Server = ({
  fill = "currentColor",
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      fill="none"
      height={size || height}
      viewBox="0 0 24 24"
      width={size || width}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M19.32 10H4.69c-1.48 0-2.68-1.21-2.68-2.68V4.69c0-1.48 1.21-2.68 2.68-2.68h14.63C20.8 2.01 22 3.22 22 4.69v2.63C22 8.79 20.79 10 19.32 10ZM19.32 22H4.69c-1.48 0-2.68-1.21-2.68-2.68v-2.63c0-1.48 1.21-2.68 2.68-2.68h14.63c1.48 0 2.68 1.21 2.68 2.68v2.63c0 1.47-1.21 2.68-2.68 2.68ZM6 5v2M10 5v2M6 17v2M10 17v2M14 6h4M14 18h4"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.5}
      />
    </svg>
  );
};

export const TagUser = ({
  fill = "currentColor",
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      fill="none"
      height={size || height}
      viewBox="0 0 24 24"
      width={size || width}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M18 18.86h-.76c-.8 0-1.56.31-2.12.87l-1.71 1.69c-.78.77-2.05.77-2.83 0l-1.71-1.69c-.56-.56-1.33-.87-2.12-.87H6c-1.66 0-3-1.33-3-2.97V4.98c0-1.64 1.34-2.97 3-2.97h12c1.66 0 3 1.33 3 2.97v10.91c0 1.63-1.34 2.97-3 2.97Z"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit={10}
        strokeWidth={1.5}
      />
      <path
        d="M12 10a2.33 2.33 0 1 0 0-4.66A2.33 2.33 0 0 0 12 10ZM16 15.66c0-1.8-1.79-3.26-4-3.26s-4 1.46-4 3.26"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.5}
      />
    </svg>
  );
};


export const Scale = ({
  fill = "currentColor",
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      fill="none"
      height={size || height}
      viewBox="0 0 24 24"
      width={size || width}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M9 22h6c5 0 7-2 7-7V9c0-5-2-7-7-7H9C4 2 2 4 2 9v6c0 5 2 7 7 7ZM18 6 6 18"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.5}
      />
      <path
        d="M18 10V6h-4M6 14v4h4"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={1.5}
      />
    </svg>
  );
};`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Button, DropdownItem, DropdownTrigger, Dropdown, DropdownMenu} from "@nextui-org/react";
import {ChevronDown, Lock, Activity, Flash, Server, TagUser, Scale} from "./Icons.jsx";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  const icons = {
    chevron: <ChevronDown fill="currentColor" size={16} />,
    scale: <Scale className="text-warning" fill="currentColor" size={30} />,
    lock: <Lock className="text-success" fill="currentColor" size={30} />,
    activity: <Activity className="text-secondary" fill="currentColor" size={30} />,
    flash: <Flash className="text-primary" fill="currentColor" size={30} />,
    server: <Server className="text-success" fill="currentColor" size={30} />,
    user: <TagUser className="text-danger" fill="currentColor" size={30} />,
  };

  return (
    <Navbar>
      <NavbarBrand>
        <AcmeLogo />
        <p className="font-bold text-inherit">ACME</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <Dropdown>
          <NavbarItem>
            <DropdownTrigger>
              <Button
                disableRipple
                className="p-0 bg-transparent data-[hover=true]:bg-transparent"
                endContent={icons.chevron}
                radius="sm"
                variant="light"
              >
                Features
              </Button>
            </DropdownTrigger>
          </NavbarItem>
          <DropdownMenu
            aria-label="ACME features"
            className="w-[340px]"
            itemClasses={{
              base: "gap-4",
            }}
          >
            <DropdownItem
              key="autoscaling"
              description="ACME scales apps to meet user demand, automagically, based on load."
              startContent={icons.scale}
            >
              Autoscaling
            </DropdownItem>
            <DropdownItem
              key="usage_metrics"
              description="Real-time metrics to debug issues. Slow query added? We’ll show you exactly where."
              startContent={icons.activity}
            >
              Usage Metrics
            </DropdownItem>
            <DropdownItem
              key="production_ready"
              description="ACME runs on ACME, join us and others serving requests at web scale."
              startContent={icons.flash}
            >
              Production Ready
            </DropdownItem>
            <DropdownItem
              key="99_uptime"
              description="Applications stay on the grid with high availability and high uptime guarantees."
              startContent={icons.server}
            >
              +99% Uptime
            </DropdownItem>
            <DropdownItem
              key="supreme_support"
              description="Overcome any challenge with a supporting team ready to respond."
              startContent={icons.user}
            >
              +Supreme Support
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
  "/Icons.jsx": Icons,
};

export default {
  ...react,
};

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, NavbarMenuToggle, NavbarMenu, NavbarMenuItem, Link, Button} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";

export default function App() {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);

  const menuItems = [
    "Profile",
    "Dashboard",
    "Activity",
    "Analytics",
    "System",
    "Deployments",
    "My Settings",
    "Team Settings",
    "Help & Feedback",
    "Log Out",
  ];

  return (
    <Navbar onMenuOpenChange={setIsMenuOpen}>
      <NavbarContent>
        <NavbarMenuToggle
          aria-label={isMenuOpen ? "Close menu" : "Open menu"}
          className="sm:hidden"
        />
        <NavbarBrand>
          <AcmeLogo />
          <p className="font-bold text-inherit">ACME</p>
        </NavbarBrand>
      </NavbarContent>

      <NavbarContent className="hidden sm:flex gap-4" justify="center">
        <NavbarItem>
          <Link color="foreground" href="#">
            Features
          </Link>
        </NavbarItem>
        <NavbarItem isActive>
          <Link href="#" aria-current="page">
            Customers
          </Link>
        </NavbarItem>
        <NavbarItem>
          <Link color="foreground" href="#">
            Integrations
          </Link>
        </NavbarItem>
      </NavbarContent>
      <NavbarContent justify="end">
        <NavbarItem className="hidden lg:flex">
          <Link href="#">Login</Link>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} color="primary" href="#" variant="flat">
            Sign Up
          </Button>
        </NavbarItem>
      </NavbarContent>
      <NavbarMenu>
        {menuItems.map((item, index) => (
          <NavbarMenuItem key={\`\${item}-\${index}\`}>
            <Link
              color={
                index === 2 ? "primary" : index === menuItems.length - 1 ? "danger" : "foreground"
              }
              className="w-full"
              href="#"
              size="lg"
            >
              {item}
            </Link>
          </NavbarMenuItem>
        ))}
      </NavbarMenu>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
};

export default {
  ...react,
};

const SearchIcon = `export const SearchIcon = ({
  size = 24,
  strokeWidth = 1.5,
  width,
  height,
  ...props
}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={height || size}
    role="presentation"
    viewBox="0 0 24 24"
    width={width || size}
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
  </svg>
);
`;

const AcmeLogo = `export const AcmeLogo = () => (
  <svg fill="none" height="36" viewBox="0 0 32 32" width="36">
    <path
      clipRule="evenodd"
      d="M17.6482 10.1305L15.8785 7.02583L7.02979 22.5499H10.5278L17.6482 10.1305ZM19.8798 14.0457L18.11 17.1983L19.394 19.4511H16.8453L15.1056 22.5499H24.7272L19.8798 14.0457Z"
      fill="currentColor"
      fillRule="evenodd"
    />
  </svg>
);`;

const App = `import {Navbar, NavbarBrand, NavbarContent, NavbarItem, Link, Input, DropdownItem, DropdownTrigger, Dropdown, DropdownMenu, Avatar} from "@nextui-org/react";
import {AcmeLogo} from "./AcmeLogo.jsx";
import {SearchIcon} from "./SearchIcon.jsx";

export default function App() {
  return (
    <Navbar isBordered>
      <NavbarContent justify="start">
        <NavbarBrand className="mr-4">
          <AcmeLogo />
          <p className="hidden sm:block font-bold text-inherit">ACME</p>
        </NavbarBrand>
        <NavbarContent className="hidden sm:flex gap-3">
          <NavbarItem>
            <Link color="foreground" href="#">
              Features
            </Link>
          </NavbarItem>
          <NavbarItem isActive>
            <Link href="#" aria-current="page" color="secondary">
              Customers
            </Link>
          </NavbarItem>
          <NavbarItem>
            <Link color="foreground" href="#">
              Integrations
            </Link>
          </NavbarItem>
        </NavbarContent>
      </NavbarContent>

      <NavbarContent as="div" className="items-center" justify="end">
        <Input
          classNames={{
            base: "max-w-full sm:max-w-[10rem] h-10",
            mainWrapper: "h-full",
            input: "text-small",
            inputWrapper: "h-full font-normal text-default-500 bg-default-400/20 dark:bg-default-500/20",
          }}
          placeholder="Type to search..."
          size="sm"
          startContent={<SearchIcon size={18} />}
          type="search"
        />
        <Dropdown placement="bottom-end">
          <DropdownTrigger>
            <Avatar
              isBordered
              as="button"
              className="transition-transform"
              color="secondary"
              name="Jason Hughes"
              size="sm"
              src="https://i.pravatar.cc/150?u=a042581f4e29026704d"
            />
          </DropdownTrigger>
          <DropdownMenu aria-label="Profile Actions" variant="flat">
            <DropdownItem key="profile" className="h-14 gap-2">
              <p className="font-semibold">Signed in as</p>
              <p className="font-semibold">zoey@example.com</p>
            </DropdownItem>
            <DropdownItem key="settings">My Settings</DropdownItem>
            <DropdownItem key="team_settings">Team Settings</DropdownItem>
            <DropdownItem key="analytics">Analytics</DropdownItem>
            <DropdownItem key="system">System</DropdownItem>
            <DropdownItem key="configurations">Configurations</DropdownItem>
            <DropdownItem key="help_and_feedback">Help & Feedback</DropdownItem>
            <DropdownItem key="logout" color="danger">
              Log Out
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
      </NavbarContent>
    </Navbar>
  );
}`;

const react = {
  "/App.jsx": App,
  "/AcmeLogo.jsx": AcmeLogo,
  "/SearchIcon.jsx": SearchIcon,
};

export default {
  ...react,
};

const App = `import {Pagination, Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-5">
      <p>1 Boundary (default)</p>
      <Pagination
        total={10}
        color="secondary"
      />
      <p>2 Boundaries</p>
      <Pagination
        total={10}
        boundaries={2}
        color="secondary"
      />
      <p>3 Boundaries</p>
      <Pagination
        total={10}
        boundaries={3}
        color="secondary"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {

  const colors = ["primary", "secondary", "success", "warning", "danger"]

  return (
    <div className="flex flex-wrap gap-4 items-center">
      {colors.map((color) => (
        <Pagination key={color} total={10} initialPage={1} color={color} />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination isCompact showControls total={10} initialPage={1} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination, Button} from "@nextui-org/react";

export default function App() {
  const [currentPage, setCurrentPage] = React.useState(1);

  return (
    <div className="flex flex-col gap-5">
      <p className="text-small text-default-500">Selected Page: {currentPage}</p>
      <Pagination
        total={10}
        color="secondary"
        page={currentPage}
        onChange={setCurrentPage}
      />
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="flat"
          color="secondary"
          onPress={() => setCurrentPage((prev) => (prev > 1 ? prev - 1 : prev))}
        >
          Previous
        </Button>
        <Button
          size="sm"
          variant="flat"
          color="secondary"
          onPress={() => setCurrentPage((prev) => (prev < 10 ? prev + 1 : prev))}
        >
          Next
        </Button>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination showControls total={10} initialPage={1} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const ChevronIcon = `export const ChevronIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 19l-7-7 7-7"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
  </svg>
);
`;

const App = `import {usePagination, PaginationItemType} from "@nextui-org/react";
import {ChevronIcon} from "./ChevronIcon";

export default function App() {
  const {activePage, range, setPage, onNext, onPrevious} = usePagination({
    total: 6,
    showControls: true,
    siblings: 10,
    boundaries: 10,
  });

  return (
    <div className="flex flex-col gap-2">
      <p>Active page: {activePage}</p>
      <ul className="flex gap-2 items-center">
        {range.map((page) => {
          if (page === PaginationItemType.NEXT) {
            return (
              <li key={page} aria-label="next page" className="w-4 h-4">
                <button
                  className="w-full h-full bg-default-200 rounded-full"
                  onClick={onNext}
                >
                  <ChevronIcon className="rotate-180" />
                </button>
              </li>
            );
          }

          if (page === PaginationItemType.PREV) {
            return (
              <li key={page} aria-label="previous page" className="w-4 h-4">
                <button
                  className="w-full h-full bg-default-200 rounded-full"
                  onClick={onPrevious}
                >
                  <ChevronIcon />
                </button>
              </li>
            );
          }

          if (page === PaginationItemType.DOTS) {
            return (
              <li key={page} className="w-4 h-4">
                ...
              </li>
            );
          }

          return (
            <li key={page} aria-label={\`page \${page}\`} className="w-4 h-4">
              <button
                className={cn(
                  "w-full h-full bg-default-300 rounded-full",
                  activePage === page && "bg-secondary"
                )}
                onClick={() => setPage(page)}
              />
            </li>
          );
        })}
      </ul>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/ChevronIcon.jsx": ChevronIcon,
};

export default {
  ...react,
};

const ChevronIcon = `export const ChevronIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 19l-7-7 7-7"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
  </svg>
);
`;

const ChevronIconTs = `import {SVGProps} from "react";

type IconSvgProps = SVGProps<SVGSVGElement>;

export const ChevronIcon = (props: IconSvgProps) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M15.5 19l-7-7 7-7"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
  </svg>
);
`;

const AppTs = `import {Pagination, PaginationItemType, PaginationItemRenderProps} from "@nextui-org/react";
import {ChevronIcon} from "./ChevronIcon";

export default function App() {
  const renderItem = ({
    ref,
    key,
    value,
    isActive,
    onNext,
    onPrevious,
    setPage,
    className,
  }: PaginationItemRenderProps<HTMLButtonElement>) => {
    if (value === PaginationItemType.NEXT) {
      return (
        <button key={key} className={cn(className, "bg-default-200/50 min-w-8 w-8 h-8")} onClick={onNext}>
          <ChevronIcon className="rotate-180" />
        </button>
      );
    }

    if (value === PaginationItemType.PREV) {
      return (
        <button key={key} className={cn(className, "bg-default-200/50 min-w-8 w-8 h-8")} onClick={onPrevious}>
          <ChevronIcon />
        </button>
      );
    }

    if (value === PaginationItemType.DOTS) {
      return <button key={key} className={className}>...</button>;
    }

    // cursor is the default item
    return (
      <button
        ref={ref}
        key={key}
        className={cn(
          className,
          isActive &&
            "text-white bg-gradient-to-br from-indigo-500 to-pink-500 font-bold",
        )}
        onClick={() => setPage(value)}
      >
        {value}
      </button>
    );
  };

  return (
    <Pagination
      disableCursorAnimation
      showControls
      total={10}
      initialPage={1}
      className="gap-2"
      radius="full"
      renderItem={renderItem}
      variant="light"
    />
  );
}`;

const App = `import {Pagination, PaginationItemType} from "@nextui-org/react";
import {ChevronIcon} from "./ChevronIcon";

export default function App() {
  const renderItem = ({
    ref,
    key,
    value,
    isActive,
    onNext,
    onPrevious,
    setPage,
    className,
  }) => {
    if (value === PaginationItemType.NEXT) {
      return (
        <button key={key} className={cn(className, "bg-default-200/50 min-w-8 w-8 h-8")} onClick={onNext}>
          <ChevronIcon className="rotate-180" />
        </button>
      );
    }

    if (value === PaginationItemType.PREV) {
      return (
        <button key={key} className={cn(className, "bg-default-200/50 min-w-8 w-8 h-8")} onClick={onPrevious}>
          <ChevronIcon />
        </button>
      );
    }

    if (value === PaginationItemType.DOTS) {
      return <button key={key} className={className}>...</button>;
    }

    // cursor is the default item
    return (
      <button
        key={key}
        ref={ref}
        className={cn(
          className,
          isActive &&
          "text-white bg-gradient-to-br from-indigo-500 to-pink-500 font-bold",
        )}
        onClick={() => setPage(value)}
      >
        {value}
      </button>
    );
  };

  return (
    <Pagination
      disableCursorAnimation
      showControls
      total={10}
      initialPage={1}
      className="gap-2"
      radius="full"
      renderItem={renderItem}
      variant="light"
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/ChevronIcon.jsx": ChevronIcon,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/ChevronIcon.tsx": ChevronIconTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Pagination, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination
      total={10}
      classNames={{
        wrapper: "gap-0 overflow-visible h-8 rounded border border-divider",
        item: "w-8 h-8 text-small rounded-none bg-transparent",
        cursor:
          "bg-gradient-to-b shadow-lg from-default-500 to-default-800 dark:from-default-300 dark:to-default-100 text-white font-bold",
      }}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination isDisabled total={10} initialPage={1} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import sizes from "./sizes";
import radius from "./radius";
import colors from "./colors";
import variants from "./variants";
import controls from "./controls";
import loop from "./loop";
import initialPage from "./initial-page";
import compact from "./compact";
import shadow from "./shadow";
import controlled from "./controlled";
import siblings from "./siblings";
import boundaries from "./boundaries";
import customItems from "./custom-items";
import customStyles from "./custom-styles";
import customImpl from "./custom-impl";

export const paginationContent = {
  usage,
  disabled,
  sizes,
  radius,
  colors,
  variants,
  controls,
  loop,
  shadow,
  initialPage,
  compact,
  controlled,
  siblings,
  boundaries,
  customItems,
  customStyles,
  customImpl,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination color="warning" initialPage={3} total={10} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination loop showControls color="success" total={5} initialPage={1} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {

  const radius = ["full", "xl", "lg", "md", "sm", "base", "none"]

  return (
    <div className="flex flex-wrap gap-4 items-center">
      {radius.map((r) => (
        <Pagination key={r} total={10} initialPage={1} radius={r} />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination showShadow color="warning" total={10} initialPage={1} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination, Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-5">
      <p>1 Sibling (default)</p>
      <Pagination
        total={10}
      />
      <p>2 Siblings</p>
      <Pagination
        total={10}
        siblings={2}
      />
      <p>3 Siblings</p>
      <Pagination
        total={10}
        siblings={3}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {

  const sizes = ["sm", "md", "lg"]

  return (
    <div className="flex flex-wrap gap-4 items-center">
      {sizes.map((size) => (
        <Pagination key={size} total={10} initialPage={1} size={size} />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {
  return (
    <Pagination total={10} initialPage={1} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Pagination} from "@nextui-org/react";

export default function App() {

  const variants = ["flat", "bordered", "faded", "light"]

  return (
    <div className="flex flex-wrap gap-4 items-center">
      {variants.map((variant) => (
        <Pagination key={variant} total={10} initialPage={1} variant={variant} />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Popover placement="bottom" showArrow={true}>
      <PopoverTrigger>
        <Button>Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        <div className="px-1 py-2">
          <div className="text-small font-bold">Popover Content</div>
          <div className="text-tiny">This is the popover content</div>
        </div>
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button, Input} from "@nextui-org/react";

export default function App() {

  const backdrops = ["opaque", "blur", "transparent"];

  const content = (
    <PopoverContent className="w-[240px]">
      {(titleProps) => (
        <div className="px-1 py-2 w-full">
          <p className="text-small font-bold text-foreground" {...titleProps}>
            Dimensions
          </p>
          <div className="mt-2 flex flex-col gap-2 w-full">
            <Input defaultValue="100%" label="Width" size="sm" variant="bordered" />
            <Input defaultValue="300px" label="Max. width" size="sm" variant="bordered" />
            <Input defaultValue="24px" label="Height" size="sm" variant="bordered" />
            <Input defaultValue="30px" label="Max. height" size="sm" variant="bordered" />
          </div>
        </div>
      )}
    </PopoverContent>
  )

  return (
    <div className="flex flex-wrap gap-4">
      {backdrops.map((backdrop) => (
        <Popover
          key={backdrop}
          showArrow
          offset={10}
          placement="bottom"
          backdrop={backdrop}
        >
          <PopoverTrigger>
            <Button color="warning" variant="flat" className="capitalize">
              {backdrop}
            </Button>
          </PopoverTrigger>
          {content}
        </Popover>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  const content = (
    <PopoverContent>
      <div className="px-1 py-2">
        <div className="text-small font-bold">Popover Content</div>
        <div className="text-tiny">This is the popover content</div>
      </div>
    </PopoverContent>
  );

  const colors = [
    "default",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger",
    "foreground",
  ];

  return (
    <div className="flex flex-wrap gap-4">
      {colors.map((color) => (
        <Popover key={color} placement="top" color={color}>
          <PopoverTrigger>
            <Button color={color} className="capitalize">
              {color}
            </Button>
          </PopoverTrigger>
          {content}
        </Popover>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  const [isOpen, setIsOpen] = React.useState(false);

  return (
    <div className="flex flex-col gap-2">
      <Popover isOpen={isOpen} onOpenChange={(open) => setIsOpen(open)}>
        <PopoverTrigger>
          <Button>Open Popover</Button>
        </PopoverTrigger>
        <PopoverContent>
          <div className="px-1 py-2">
            <div className="text-small font-bold">Popover Content</div>
            <div className="text-tiny">This is the popover content</div>
          </div>
        </PopoverContent>
      </Popover>
      <p className="text-small text-default-400">Open: {isOpen ? "true" : "false"}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Popover
      showArrow
      offset={10}
      placement="bottom"
      motionProps={{
        variants: {
          enter: {
            y: 0,
            opacity: 1,
            duration: 0.1,
            transition: {
              opacity: {
                duration: 0.15,
              },
            },
          },
          exit: {
            y: "10%",
            opacity: 0,
            duration: 0,
            transition: {
              opacity: {
                duration: 0.1,
              },
            },
          },
        },
      }}
    >
      <PopoverTrigger>
        <Button>Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        <div className="px-1 py-2">
          <div className="text-small font-bold">Popover Content</div>
          <div className="text-tiny">This is the popover content</div>
        </div>
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Popover 
      showArrow
      backdrop="opaque"
      placement="right"
      classNames={{
        base: [  
          // arrow color
          "before:bg-default-200"
        ],
        content: [
          "py-3 px-4 border border-default-200",
          "bg-gradient-to-br from-white to-default-300",
          "dark:from-default-100 dark:to-default-50",
        ],
      }}
    >
      <PopoverTrigger>
        <Button>Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        {(titleProps) => (
          <div className="px-1 py-2">
            <h3 className="text-small font-bold" {...titleProps}>
              Popover Content
            </h3>
            <div className="text-tiny">This is the popover content</div>
          </div>
        )}
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const UserTwitterCard = `import { Avatar, Button, Card, CardBody, CardFooter, CardHeader } from "@nextui-org/react";

export const UserTwitterCard = () => {
  const [isFollowed, setIsFollowed] = React.useState(false);

  return (
    <Card shadow="none" className="max-w-[300px] border-none bg-transparent">
      <CardHeader className="justify-between">
        <div className="flex gap-3">
          <Avatar isBordered radius="full" size="md" src="https://i.pravatar.cc/150?u=a04258114e29026702d" />
          <div className="flex flex-col items-start justify-center">
            <h4 className="text-small font-semibold leading-none text-default-600">Zoey Lang</h4>
            <h5 className="text-small tracking-tight text-default-500">@zoeylang</h5>
          </div>
        </div>
        <Button
          className={isFollowed ? "bg-transparent text-foreground border-default-200" : ""}
          color="primary"
          radius="full"
          size="sm"
          variant={isFollowed ? "bordered" : "solid"}
          onPress={() => setIsFollowed(!isFollowed)}
        >
          {isFollowed ? "Unfollow" : "Follow"}
        </Button>
      </CardHeader>
      <CardBody className="px-3 py-0">
        <p className="text-small pl-px text-default-500">
          Full-stack developer, @getnextui lover she/her
          <span aria-label="confetti" role="img">
            🎉
          </span>
        </p>
      </CardBody>
      <CardFooter className="gap-3">
        <div className="flex gap-1">
          <p className="font-semibold text-default-600 text-small">4</p>
          <p className=" text-default-500 text-small">Following</p>
        </div>
        <div className="flex gap-1">
          <p className="font-semibold text-default-600 text-small">97.1K</p>
          <p className="text-default-500 text-small">Followers</p>
        </div>
      </CardFooter>
    </Card>
  );
};`;

const App = `import {Popover, PopoverTrigger, PopoverContent, Button, User} from "@nextui-org/react";
import {UserTwitterCard} from "./UserTwitterCard";

export default function App() {
  return (
    <Popover showArrow placement="bottom">
      <PopoverTrigger>
        <User   
          as="button"
          name="Zoe Lang"
          description="Product Designer"
          className="transition-transform"
          avatarProps={{
            src: "https://i.pravatar.cc/150?u=a04258114e29026702d"
          }}
        />
      </PopoverTrigger>
      <PopoverContent className="p-1">
        <UserTwitterCard />
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
  "/UserTwitterCard.jsx": UserTwitterCard,
};

export default {
  ...react,
};

import usage from "./usage";
import arrow from "./arrow";
import offset from "./offset";
import colors from "./colors";
import controlled from "./controlled";
import variants from "./variants";
import placements from "./placements";
import titleProps from "./title-props";
import withForm from "./with-form";
import backdrop from "./backdrop";
import customMotion from "./custom-motion";
import customTrigger from "./custom-trigger";
import customStyles from "./custom-styles";

export const popoverContent = {
  usage,
  arrow,
  offset,
  colors,
  controlled,
  variants,
  placements,
  titleProps,
  withForm,
  backdrop,
  customMotion,
  customTrigger,
  customStyles,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Popover placement="bottom" offset={20} showArrow>
      <PopoverTrigger>
        <Button>Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        <div className="px-1 py-2">
          <div className="text-small font-bold">Popover Content</div>
          <div className="text-tiny">This is the popover content</div>
        </div>
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  const content = (
    <PopoverContent>
      <div className="px-1 py-2">
        <div className="text-small font-bold">Popover Content</div>
        <div className="text-tiny">This is the popover content</div>
      </div>
    </PopoverContent>
  );

  const placements = [
    "top-start",
    "top",
    "top-end",
    "bottom-start",
    "bottom",
    "bottom-end",
    "right-start",
    "right",
    "right-end",
    "left-start",
    "left",
    "left-end",
  ];

  return (
    <div className="flex flex-wrap md:inline-grid md:grid-cols-3 gap-4">
      {placements.map((placement) => (
        <Popover key={placement} placement={placement} color="secondary">
          <PopoverTrigger>
            <Button color="secondary" variant="flat" className="capitalize">
              {placement.replace("-", " ")}
            </Button>
          </PopoverTrigger>
          {content}
        </Popover>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Popover placement="right">
      <PopoverTrigger>
        <Button>Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        {(titleProps) => (
          <div className="px-1 py-2">
            <h3 className="text-small font-bold" {...titleProps}>
              Popover Content
            </h3>
            <div className="text-tiny">This is the popover content</div>
          </div>
        )}
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Popover placement="right">
      <PopoverTrigger>
        <Button>Open Popover</Button>
      </PopoverTrigger>
      <PopoverContent>
        <div className="px-1 py-2">
          <div className="text-small font-bold">Popover Content</div>
          <div className="text-tiny">This is the popover content</div>
        </div>
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button} from "@nextui-org/react";

export default function App() {
  const content = (
    <PopoverContent>
      <div className="px-1 py-2">
        <div className="text-small font-bold">Popover Content</div>
        <div className="text-tiny">This is the popover content</div>
      </div>
    </PopoverContent>
  );

  const variants = ["solid", "bordered", "flat", "faded", "shadow"];

  return (
    <div className="flex gap-2">
      {variants.map((variant) => (
        <Popover key={variant} placement="top" variant={variant}>
          <PopoverTrigger>
            <Button variant={variant} className="capitalize">
              {variant}
            </Button>
          </PopoverTrigger>
          {content}
        </Popover>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Popover, PopoverTrigger, PopoverContent, Button, Input} from "@nextui-org/react";

export default function App() {
  return (
    <Popover placement="bottom" showArrow offset={10}>
      <PopoverTrigger>
        <Button color="primary">Customize</Button>
      </PopoverTrigger>
      <PopoverContent className="w-[240px]">
        {(titleProps) => (
          <div className="px-1 py-2 w-full">
            <p className="text-small font-bold text-foreground" {...titleProps}>
              Dimensions
            </p>
            <div className="mt-2 flex flex-col gap-2 w-full">
              <Input defaultValue="100%" label="Width" size="sm" variant="bordered" />
              <Input defaultValue="300px" label="Max. width" size="sm" variant="bordered" />
              <Input defaultValue="24px" label="Height" size="sm" variant="bordered" />
              <Input defaultValue="30px" label="Max. height" size="sm" variant="bordered" />
            </div>
          </div>
        )}
      </PopoverContent>
    </Popover>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Progress} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      <Progress color="default" aria-label="Loading..." value={70} />
      <Progress color="primary" aria-label="Loading..." value={70} />
      <Progress color="secondary" aria-label="Loading..." value={70} />
      <Progress color="success" aria-label="Loading..." value={70} />
      <Progress color="warning" aria-label="Loading..." value={70} />
      <Progress color="danger" aria-label="Loading..." value={70} />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import { Progress } from "@nextui-org/react";

export default function App() {
  return (
    <Progress
      size="sm"
      radius="sm"
      classNames={{
        base: "max-w-md",
        track: "drop-shadow-md border border-default",
        indicator: "bg-gradient-to-r from-pink-500 to-yellow-500",
        label: "tracking-wider font-medium text-default-600",
        value: "text-foreground/60",
      }}
      label="Lose weight"
      value={65}
      showValueLabel={true}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import { Progress } from "@nextui-org/react";

export default function App() {
  return (
    <Progress
      size="sm"
      isIndeterminate
      aria-label="Loading..."
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";
import indeterminate from "./indeterminate";
import striped from "./striped";
import label from "./label";
import value from "./value";
import valueFormatting from "./value-formatting";
import customStyles from "./custom-styles";

export const progressContent = {
  usage,
  sizes,
  colors,
  indeterminate,
  striped,
  label,
  value,
  valueFormatting,
  customStyles,
};

const App = `import {Progress} from "@nextui-org/react";

export default function App() {
  return (
    <Progress label="Loading..." value={55}  className="max-w-md" />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Progress} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      <Progress size="sm" aria-label="Loading..." value={30} />
      <Progress size="md" aria-label="Loading..." value={40} />
      <Progress size="lg" aria-label="Loading..." value={50} />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import { Progress } from "@nextui-org/react";

export default function App() {
  return (
    <Progress
      isStriped
      aria-label="Loading..."
      color="secondary"
      value={60}
      className="max-w-md"
    />
  );
}
`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Progress} from "@nextui-org/react";

export default function App() {
  return (
    <Progress aria-label="Loading..." value={60} className="max-w-md"/>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Progress} from "@nextui-org/react";

export default function App() {
  return (
    <Progress
      label="Monthly expenses"
      size="sm"
      value={4000}
      maxValue={10000}
      color="warning"
      formatOptions={{style: "currency", currency: "ARS"}}
      showValueLabel={true}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Progress} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState(0);

  React.useEffect(() => {
    const interval = setInterval(() => {
      setValue((v) => (v >= 100 ? 0 : v + 10));
    }, 500);

    return () => clearInterval(interval);
  }, []);

  return (
    <Progress
      aria-label="Downloading..."
      size="md"
      value={value}
      color="success"
      showValueLabel={true}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const [selected, setSelected] = React.useState("london");

  return (
    <div className="flex flex-col gap-3">
      <RadioGroup
        label="Select your favorite city"
        value={selected}
        onValueChange={setSelected}
      >
        <Radio value="buenos-aires">Buenos Aires</Radio>
        <Radio value="sydney">Sydney</Radio>
        <Radio value="san-francisco">San Francisco</Radio>
        <Radio value="london">London</Radio>
        <Radio value="tokyo">Tokyo</Radio>
      </RadioGroup>
      <p className="text-default-500 text-small">Selected: {selected}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio, useRadio, VisuallyHidden, cn} from "@nextui-org/react";

export const CustomRadio = (props) => {
  const {
    Component,
    children,
    isSelected,
    description,
    getBaseProps,
    getWrapperProps,
    getInputProps,
    getLabelProps,
    getLabelWrapperProps,
    getControlProps,
  } = useRadio(props);

  return (
    <Component
      {...getBaseProps()}
      className={cn(
        "group inline-flex items-center hover:opacity-70 active:opacity-50 justify-between flex-row-reverse tap-highlight-transparent",
        "max-w-[300px] cursor-pointer border-2 border-default rounded-lg gap-4 p-4",
        "data-[selected=true]:border-primary",
      )}
    >
      <VisuallyHidden>
        <input {...getInputProps()} />
      </VisuallyHidden>
      <span {...getWrapperProps()}>
        <span {...getControlProps()} />
      </span>
      <div {...getLabelWrapperProps()}>
        {children && <span {...getLabelProps()}>{children}</span>}
        {description && (
          <span className="text-small text-foreground opacity-70">{description}</span>
        )}
      </div>
    </Component>
  );
};

export default function App() {
  return (
    <RadioGroup label="Plans">
      <CustomRadio description="Up to 20 items" value="free">
        Free
      </CustomRadio>
      <CustomRadio description="Unlimited items. $10 per month." value="pro">
        Pro
      </CustomRadio>
      <CustomRadio
        description="24/7 support. Contact us for pricing."
        value="enterprise"
      >
        Enterprise
      </CustomRadio>
    </RadioGroup>
  );
}`;

const AppTs = `import {RadioGroup, Radio, useRadio, VisuallyHidden, RadioProps, cn} from "@nextui-org/react";

export const CustomRadio = (props: RadioProps) => {
  const {
    Component,
    children,
    isSelected,
    description,
    getBaseProps,
    getWrapperProps,
    getInputProps,
    getLabelProps,
    getLabelWrapperProps,
    getControlProps,
  } = useRadio(props);

  return (
    <Component
      {...getBaseProps()}
      className={cn(
        "group inline-flex items-center justify-between hover:bg-content2 flex-row-reverse",
        "max-w-[300px] cursor-pointer border-2 border-default rounded-lg gap-4 p-4",
        "data-[selected=true]:border-primary",
      )}
    >
      <VisuallyHidden>
        <input {...getInputProps()} />
      </VisuallyHidden>
      <span {...getWrapperProps()}>
        <span {...getControlProps()} />
      </span>
      <div {...getLabelWrapperProps()}>
        {children && <span {...getLabelProps()}>{children}</span>}
        {description && (
          <span className="text-small text-foreground opacity-70">{description}</span>
        )}
      </div>
    </Component>
  );
};

export default function App() {
  return (
    <RadioGroup label="Plans">
      <CustomRadio description="Up to 20 items" value="free">
        Free
      </CustomRadio>
      <CustomRadio description="Unlimited items. $10 per month." value="pro">
        Pro
      </CustomRadio>
      <CustomRadio
        description="24/7 support. Contact us for pricing."
        value="enterprise"
      >
        Enterprise
      </CustomRadio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {RadioGroup, Radio, cn} from "@nextui-org/react";

export const CustomRadio = (props) => {
  const {children, ...otherProps} = props;

  return (
    <Radio
      {...otherProps}
      classNames={{
        base: cn(
          "inline-flex m-0 bg-content1 hover:bg-content2 items-center justify-between",
          "flex-row-reverse max-w-[300px] cursor-pointer rounded-lg gap-4 p-4 border-2 border-transparent",
          "data-[selected=true]:border-primary"
        ),
      }}
    >
      {children}
    </Radio>
  );
};

export default function App() {
  return (
    <RadioGroup label="Plans" description="Selected plan can be changed at any time.">
      <CustomRadio description="Up to 20 items" value="free">
        Free
      </CustomRadio>
      <CustomRadio description="Unlimited items. $10 per month." value="pro">
        Pro
      </CustomRadio>
      <CustomRadio
        description="24/7 support. Contact us for pricing."
        value="enterprise"
      >
        Enterprise
      </CustomRadio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  return (
    <RadioGroup
      label="Select your favorite city"
      color="secondary"
      defaultValue="london"
    >
      <Radio value="buenos-aires">Buenos Aires</Radio>
      <Radio value="sydney">Sydney</Radio>
      <Radio value="san-francisco">San Francisco</Radio>
      <Radio value="london">London</Radio>
      <Radio value="tokyo">Tokyo</Radio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  return (
    <RadioGroup
      label="Select your favorite city"
      isDisabled
    >
      <Radio value="buenos-aires">Buenos Aires</Radio>
      <Radio value="sydney">Sydney</Radio>
      <Radio value="san-francisco">San Francisco</Radio>
      <Radio value="london">London</Radio>
      <Radio value="tokyo">Tokyo</Radio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  return (
    <RadioGroup
      label="Select your favorite city"
      orientation="horizontal"
    >
      <Radio value="buenos-aires">Buenos Aires</Radio>
      <Radio value="sydney">Sydney</Radio>
      <Radio value="san-francisco">San Francisco</Radio>
      <Radio value="london">London</Radio>
      <Radio value="tokyo">Tokyo</Radio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import horizontal from "./horizontal";
import controlled from "./controlled";
import defaultValue from "./default-value";
import withDescription from "./with-description";
import customStyles from "./custom-styles";
import customImpl from "./custom-impl";
import invalid from "./invalid";

export const radioGroupContent = {
  usage,
  disabled,
  horizontal,
  controlled,
  invalid,
  defaultValue,
  withDescription,
  customStyles,
  customImpl,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const [selected, setSelected] = React.useState("london");

  const validOptions = ["buenos-aires", "san-francisco", "tokyo"];

  const isInvalid = !validOptions.includes(selected);

  return (
    <div className="flex flex-col gap-3">
      <RadioGroup
        label="Select your favorite city"
        value={selected}
        isInvalid={isInvalid}
        onValueChange={setSelected}
      >
        <Radio value="buenos-aires">Buenos Aires</Radio>
        <Radio value="sydney">Sydney</Radio>
        <Radio value="san-francisco">San Francisco</Radio>
        <Radio value="london">London</Radio>
        <Radio value="tokyo">Tokyo</Radio>
      </RadioGroup>
      <p className="text-default-500 text-small">Selected: {selected}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  return (
    <RadioGroup
      label="Select your favorite city"
    >
      <Radio value="buenos-aires">Buenos Aires</Radio>
      <Radio value="sydney">Sydney</Radio>
      <Radio value="san-francisco">San Francisco</Radio>
      <Radio value="london">London</Radio>
      <Radio value="tokyo">Tokyo</Radio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  return (
    <RadioGroup
      label="Select your favorite city"
      color="warning"
    >
      <Radio value="buenos-aires" description="The capital of Argentina">
        Buenos Aires
      </Radio>
      <Radio value="canberra" description="The capital of Australia">
        Canberra
      </Radio>
      <Radio value="london" description="The capital of England">
        London
      </Radio>
      <Radio value="tokyo" description="The capital of Japan">
        Tokyo
      </Radio>
    </RadioGroup>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  let defaultDate = today(getLocalTimeZone());
  let [focusedDate, setFocusedDate] = React.useState(defaultDate);

  return (
    <RangeCalendar
      aria-label="Date (Controlled Focused Value)"
      focusedValue={focusedDate}
      onFocusChange={setFocusedDate}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  let [value, setValue] = React.useState({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({weeks: 1}),
  });

  return (
    <RangeCalendar 
      aria-label="Date (Controlled)" 
      value={value} 
      onChange={setValue} 
    />
  );
}`;

const AppTs = `import {RangeCalendar} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import type {RangeValue} from "@react-types/shared";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  let [value, setValue] = React.useState<RangeValue<DateValue>>({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({weeks: 1}),
  });

  return (
    <RangeCalendar 
      aria-label="Date (Controlled)" 
      value={value} 
      onChange={setValue} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";

export default function App() {
  return (
    <RangeCalendar aria-label="Date (Disabled)" isDisabled />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import readonly from "./read-only";
import controlled from "./controlled";
import minDateValue from "./min-date-value";
import maxDateValue from "./max-date-value";
import unavailableDates from "./unavailable-dates";
import controlledFocusedValue from "./controlled-focused-value";
import invalidDate from "./invalid-date";
import nonContiguousRanges from "./non-contiguous-ranges";
import internationalCalendars from "./international-calendars";
import visibleMonths from "./visible-months";
import pageBehaviour from "./page-behaviour";
import presets from "./presets";

export const rangeCalendarContent = {
  usage,
  disabled,
  readonly,
  controlled,
  minDateValue,
  maxDateValue,
  unavailableDates,
  controlledFocusedValue,
  invalidDate,
  nonContiguousRanges,
  internationalCalendars,
  visibleMonths,
  pageBehaviour,
  presets,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {I18nProvider} from "@react-aria/i18n";

export default function App() {
  return (
    <I18nProvider locale="zh-CN-u-ca-chinese">
      <RangeCalendar aria-label="Date (International RangeCalendar)" />
    </I18nProvider>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";


export default function App() {
  let [date, setDate] = React.useState({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({weeks: 1}),
  });
  let {locale} = useLocale();
  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);

  return (
    <RangeCalendar
      aria-label="Date (Invalid on weekends)"
      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
      isInvalid={isInvalid}
      value={date}
      onChange={setDate}
    />
  );
}`;

const AppTs = `import {RangeCalendar} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import type {RangeValue} from "@react-types/shared";
import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";


export default function App() {
  let [date, setDate] = React.useState<RangeValue<DateValue>>({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({weeks: 1}),
  });
  let {locale} = useLocale();
  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);

  return (
    <RangeCalendar
      aria-label="Date (Invalid on weekends)"
      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
      isInvalid={isInvalid}
      value={date}
      onChange={setDate}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <RangeCalendar
      aria-label="Date (Max Date Value)"
      maxValue={today(getLocalTimeZone())}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <RangeCalendar
      aria-label="Date (Min Date Value)"
      minValue={today(getLocalTimeZone())}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let {locale} = useLocale();

  return (
    <RangeCalendar
      allowsNonContiguousRanges
      aria-label="Time off request"
      isDateUnavailable={(date) => isWeekend(date, locale)}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";

export default function App() {
  return (
    <RangeCalendar 
      aria-label="Date (Page Behaviour)" 
      pageBehavior="single" 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let [value, setValue] = React.useState({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
  });
  let [focusedValue, setFocusedValue] = React.useState(today(getLocalTimeZone()));

  let {locale} = useLocale();

  let now = today(getLocalTimeZone());
  let nextMonth = now.add({months: 1});

  let nextWeek = {
    start: startOfWeek(now.add({weeks: 1}), locale),
    end: endOfWeek(now.add({weeks: 1}), locale),
  };
  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};


  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4">
      <RangeCalendar
        bottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        classNames={{
          content: "w-full",
        }}
        focusedValue={focusedValue}
        nextButtonProps={{
          variant: "bordered",
        }}
        prevButtonProps={{
          variant: "bordered",
        }}
        topContent={
          <ButtonGroup
            fullWidth
            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button
              onPress={() => {
                setValue(nextWeek);
                setFocusedValue(nextWeek.end);
              }}
            >
              Next week
            </Button>
            <Button
              onPress={() => {
                setValue(thisMonth);
                setFocusedValue(thisMonth.start);
              }}
            >
              This month
            </Button>
            <Button
              onPress={() => {
                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
              }}
            >
              Next month
            </Button>
          </ButtonGroup>
        }
        value={value}
        onChange={setValue}
        onFocusChange={setFocusedValue}
      />
    </div>
  );
}`;

const AppTs = `import {RangeCalendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
import type {DateValue} from "@react-types/calendar";
import type {RangeValue} from "@react-types/shared";
import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";

export default function App() {
  let [value, setValue] = React.useState<RangeValue<DateValue>>({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
  });
  
  let [focusedValue, setFocusedValue] = React.useState<DateValue>(today(getLocalTimeZone()));

  let {locale} = useLocale();

  let now = today(getLocalTimeZone());
  let nextMonth = now.add({months: 1});

  let nextWeek = {
    start: startOfWeek(now.add({weeks: 1}), locale),
    end: endOfWeek(now.add({weeks: 1}), locale),
  };
  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};


  const CustomRadio = (props) => {
    const {children, ...otherProps} = props;

    return (
      <Radio
        {...otherProps}
        classNames={{
          base: cn(
            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
            "cursor-pointer rounded-full border-2 border-default-200/60",
            "data-[selected=true]:border-primary",
          ),
          label: "text-tiny text-default-500",
          labelWrapper: "px-1 m-0",
          wrapper: "hidden",
        }}
      >
        {children}
      </Radio>
    );
  };

  return (
    <div className="flex flex-col gap-4">
      <RangeCalendar
        bottomContent={
          <RadioGroup
            aria-label="Date precision"
            classNames={{
              base: "w-full pb-2",
              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
            }}
            defaultValue="exact_dates"
            orientation="horizontal"
          >
            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
            <CustomRadio value="1_day">1 day</CustomRadio>
            <CustomRadio value="2_days">2 days</CustomRadio>
            <CustomRadio value="3_days">3 days</CustomRadio>
            <CustomRadio value="7_days">7 days</CustomRadio>
            <CustomRadio value="14_days">14 days</CustomRadio>
          </RadioGroup>
        }
        focusedValue={focusedValue}
        nextButtonProps={{
          variant: "bordered",
        }}
        prevButtonProps={{
          variant: "bordered",
        }}
        topContent={
          <ButtonGroup
            fullWidth
            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
            radius="full"
            size="sm"
            variant="bordered"
          >
            <Button
              onPress={() => {
                setValue(nextWeek);
                setFocusedValue(nextWeek.end);
              }}
            >
              Next week
            </Button>
            <Button
              onPress={() => {
                setValue(thisMonth);
                setFocusedValue(thisMonth.start);
              }}
            >
              This month
            </Button>
            <Button
              onPress={() => {
                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
              }}
            >
              Next month
            </Button>
          </ButtonGroup>
        }
        value={value}
        onChange={setValue}
        onFocusChange={setFocusedValue}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from "@internationalized/date";

export default function App() {
  return (
    <RangeCalendar 
      aria-label="Date (Read Only)" 
      value={{
        start: today(getLocalTimeZone()),
        end: today(getLocalTimeZone()).add({weeks: 1}),
      }} 
      isReadOnly 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";


export default function App() {
  let now = today(getLocalTimeZone());

  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();

  let isDateUnavailable = (date) =>
    isWeekend(date, locale) ||
    disabledRanges.some(
      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
    );

  return (
    <RangeCalendar
      aria-label="Date (Unavailable)"
      isDateUnavailable={isDateUnavailable} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";
import {today, getLocalTimeZone} from '@internationalized/date';

export default function App() {
  return (
    <div className="flex gap-x-4">
      <RangeCalendar aria-label="Date (No Selection)" />
      <RangeCalendar
        aria-label="Date (Uncontrolled)"
        defaultValue={{
          start: today(getLocalTimeZone()),
          end: today(getLocalTimeZone()).add({weeks: 1}),
        }}
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {RangeCalendar} from "@nextui-org/react";

export default function App() {
  return (
    <RangeCalendar 
      aria-label="Date (Visible Month)" 
      visibleMonths={3} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const Content = `export const Content = () => (
  <div>
    <p>
      Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco minim nostrud elit officia tempor esse quis.
    </p>
    <p>
      Sunt ad dolore quis aute consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
    </p>
    <p>
      Est velit labore esse esse cupidatat. Velit id elit consequat minim. Mollit enim excepteur ea laboris adipisicing aliqua proident occaecat do do adipisicing adipisicing ut fugiat. Consequat pariatur ullamco aute sunt esse. Irure excepteur eu non eiusmod. Commodo commodo et ad ipsum elit esse pariatur sit adipisicing sunt excepteur enim.
    </p>
    <p>
      Incididunt duis commodo mollit esse veniam non exercitation dolore occaecat ea nostrud laboris. Adipisicing occaecat fugiat fugiat irure fugiat in magna non consectetur proident fugiat. Commodo magna et aliqua elit sint cupidatat. Sint aute ullamco enim cillum anim ex. Est eiusmod commodo occaecat consequat laboris est do duis. Enim incididunt non culpa velit quis aute in elit magna ullamco in consequat ex proident.
    </p>
    <p>
      Dolore incididunt mollit fugiat pariatur cupidatat ipsum laborum cillum. Commodo consequat velit cupidatat duis ex nisi non aliquip ad ea pariatur do culpa. Eiusmod proident adipisicing tempor tempor qui pariatur voluptate dolor do ea commodo. Veniam voluptate cupidatat ex nisi do ullamco in quis elit.
    </p>
    <p>
      Cillum proident veniam cupidatat pariatur laborum tempor cupidatat anim eiusmod id nostrud pariatur tempor reprehenderit. Do esse ullamco laboris sunt proident est ea exercitation cupidatat. Do Lorem eiusmod aliqua culpa ullamco consectetur veniam voluptate cillum. Dolor consequat cillum tempor laboris mollit laborum reprehenderit reprehenderit veniam aliqua deserunt cupidatat consequat id.
    </p>
    <p>
      Est id tempor excepteur enim labore sint aliquip consequat duis minim tempor proident. Dolor incididunt aliquip minim elit ea. Exercitation non officia eu id.
    </p>
    <p>
      Ipsum ipsum consequat incididunt do aliquip pariatur nostrud. Qui ut sint culpa labore Lorem. Magna deserunt aliquip aute duis consectetur magna amet anim. Magna fugiat est nostrud veniam. Officia duis ea sunt aliqua.
    </p>
    <p>
      Ipsum minim officia aute anim minim aute aliquip aute non in non. Ipsum aliquip proident ut dolore eiusmod ad fugiat fugiat ut ex. Ea velit Lorem ut et commodo nulla voluptate veniam ea et aliqua esse id. Pariatur dolor et adipisicing ea mollit. Ipsum non irure proident ipsum dolore aliquip adipisicing laborum irure dolor nostrud occaecat exercitation.
    </p>
    <p>
      Culpa qui reprehenderit nostrud aliqua reprehenderit et ullamco proident nisi commodo non ut. Ipsum quis irure nisi sint do qui velit nisi. Sunt voluptate eu reprehenderit tempor consequat eiusmod Lorem irure velit duis Lorem laboris ipsum cupidatat. Pariatur excepteur tempor veniam cillum et nulla ipsum veniam ad ipsum ad aute. Est officia duis pariatur ad eiusmod id voluptate.
    </p>
  </div>
);`;

const App = `import {ScrollShadow} from "@nextui-org/react";
import {Content} from "./Content";

export default function App() {
  return (
    <ScrollShadow size={100} className="w-[300px] h-[400px]">
      <Content />
    </ScrollShadow>
  );
}`;

const react = {
  "/App.jsx": App,
  "/Content.jsx": Content,
};

export default {
  ...react,
};

const Content = `export const Content = () => (
  <div>
    <p>
      Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco minim nostrud elit officia tempor esse quis.
    </p>
    <p>
      Sunt ad dolore quis aute consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
    </p>
    <p>
      Est velit labore esse esse cupidatat. Velit id elit consequat minim. Mollit enim excepteur ea laboris adipisicing aliqua proident occaecat do do adipisicing adipisicing ut fugiat. Consequat pariatur ullamco aute sunt esse. Irure excepteur eu non eiusmod. Commodo commodo et ad ipsum elit esse pariatur sit adipisicing sunt excepteur enim.
    </p>
    <p>
      Incididunt duis commodo mollit esse veniam non exercitation dolore occaecat ea nostrud laboris. Adipisicing occaecat fugiat fugiat irure fugiat in magna non consectetur proident fugiat. Commodo magna et aliqua elit sint cupidatat. Sint aute ullamco enim cillum anim ex. Est eiusmod commodo occaecat consequat laboris est do duis. Enim incididunt non culpa velit quis aute in elit magna ullamco in consequat ex proident.
    </p>
    <p>
      Dolore incididunt mollit fugiat pariatur cupidatat ipsum laborum cillum. Commodo consequat velit cupidatat duis ex nisi non aliquip ad ea pariatur do culpa. Eiusmod proident adipisicing tempor tempor qui pariatur voluptate dolor do ea commodo. Veniam voluptate cupidatat ex nisi do ullamco in quis elit.
    </p>
    <p>
      Cillum proident veniam cupidatat pariatur laborum tempor cupidatat anim eiusmod id nostrud pariatur tempor reprehenderit. Do esse ullamco laboris sunt proident est ea exercitation cupidatat. Do Lorem eiusmod aliqua culpa ullamco consectetur veniam voluptate cillum. Dolor consequat cillum tempor laboris mollit laborum reprehenderit reprehenderit veniam aliqua deserunt cupidatat consequat id.
    </p>
    <p>
      Est id tempor excepteur enim labore sint aliquip consequat duis minim tempor proident. Dolor incididunt aliquip minim elit ea. Exercitation non officia eu id.
    </p>
    <p>
      Ipsum ipsum consequat incididunt do aliquip pariatur nostrud. Qui ut sint culpa labore Lorem. Magna deserunt aliquip aute duis consectetur magna amet anim. Magna fugiat est nostrud veniam. Officia duis ea sunt aliqua.
    </p>
    <p>
      Ipsum minim officia aute anim minim aute aliquip aute non in non. Ipsum aliquip proident ut dolore eiusmod ad fugiat fugiat ut ex. Ea velit Lorem ut et commodo nulla voluptate veniam ea et aliqua esse id. Pariatur dolor et adipisicing ea mollit. Ipsum non irure proident ipsum dolore aliquip adipisicing laborum irure dolor nostrud occaecat exercitation.
    </p>
    <p>
      Culpa qui reprehenderit nostrud aliqua reprehenderit et ullamco proident nisi commodo non ut. Ipsum quis irure nisi sint do qui velit nisi. Sunt voluptate eu reprehenderit tempor consequat eiusmod Lorem irure velit duis Lorem laboris ipsum cupidatat. Pariatur excepteur tempor veniam cillum et nulla ipsum veniam ad ipsum ad aute. Est officia duis pariatur ad eiusmod id voluptate.
    </p>
  </div>
);`;

const App = `import {ScrollShadow} from "@nextui-org/react";
import {Content} from "./Content";
  
export default function App() {
  return (
    <ScrollShadow hideScrollBar className="w-[300px] h-[400px]">
      <Content />
    </ScrollShadow>
  );
}`;

const react = {
  "/App.jsx": App,
  "/Content.jsx": Content,
};

export default {
  ...react,
};

const Content = `export const Content = ({className}) => (
  <div className={className}>
    <p>
      Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco minim nostrud elit officia tempor esse quis.
    </p>
    <p>
      Sunt ad dolore quis aute consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
    </p>
    <p>
      Est velit labore esse esse cupidatat. Velit id elit consequat minim. Mollit enim excepteur ea laboris adipisicing aliqua proident occaecat do do adipisicing adipisicing ut fugiat. Consequat pariatur ullamco aute sunt esse. Irure excepteur eu non eiusmod. Commodo commodo et ad ipsum elit esse pariatur sit adipisicing sunt excepteur enim.
    </p>
    <p>
      Incididunt duis commodo mollit esse veniam non exercitation dolore occaecat ea nostrud laboris. Adipisicing occaecat fugiat fugiat irure fugiat in magna non consectetur proident fugiat. Commodo magna et aliqua elit sint cupidatat. Sint aute ullamco enim cillum anim ex. Est eiusmod commodo occaecat consequat laboris est do duis. Enim incididunt non culpa velit quis aute in elit magna ullamco in consequat ex proident.
    </p>
    <p>
      Dolore incididunt mollit fugiat pariatur cupidatat ipsum laborum cillum. Commodo consequat velit cupidatat duis ex nisi non aliquip ad ea pariatur do culpa. Eiusmod proident adipisicing tempor tempor qui pariatur voluptate dolor do ea commodo. Veniam voluptate cupidatat ex nisi do ullamco in quis elit.
    </p>
    <p>
      Cillum proident veniam cupidatat pariatur laborum tempor cupidatat anim eiusmod id nostrud pariatur tempor reprehenderit. Do esse ullamco laboris sunt proident est ea exercitation cupidatat. Do Lorem eiusmod aliqua culpa ullamco consectetur veniam voluptate cillum. Dolor consequat cillum tempor laboris mollit laborum reprehenderit reprehenderit veniam aliqua deserunt cupidatat consequat id.
    </p>
    <p>
      Est id tempor excepteur enim labore sint aliquip consequat duis minim tempor proident. Dolor incididunt aliquip minim elit ea. Exercitation non officia eu id.
    </p>
    <p>
      Ipsum ipsum consequat incididunt do aliquip pariatur nostrud. Qui ut sint culpa labore Lorem. Magna deserunt aliquip aute duis consectetur magna amet anim. Magna fugiat est nostrud veniam. Officia duis ea sunt aliqua.
    </p>
    <p>
      Ipsum minim officia aute anim minim aute aliquip aute non in non. Ipsum aliquip proident ut dolore eiusmod ad fugiat fugiat ut ex. Ea velit Lorem ut et commodo nulla voluptate veniam ea et aliqua esse id. Pariatur dolor et adipisicing ea mollit. Ipsum non irure proident ipsum dolore aliquip adipisicing laborum irure dolor nostrud occaecat exercitation.
    </p>
    <p>
      Culpa qui reprehenderit nostrud aliqua reprehenderit et ullamco proident nisi commodo non ut. Ipsum quis irure nisi sint do qui velit nisi. Sunt voluptate eu reprehenderit tempor consequat eiusmod Lorem irure velit duis Lorem laboris ipsum cupidatat. Pariatur excepteur tempor veniam cillum et nulla ipsum veniam ad ipsum ad aute. Est officia duis pariatur ad eiusmod id voluptate.
    </p>
  </div>
);`;

const App = `import {ScrollShadow} from "@nextui-org/react";
import {Content} from "./Content";
  
export default function App() {
  return (
    <ScrollShadow orientation="horizontal" className="max-w-[400px] max-h-[300px]">
      <Content className="w-[800px]" />
    </ScrollShadow>
  );
}`;

const react = {
  "/App.jsx": App,
  "/Content.jsx": Content,
};

export default {
  ...react,
};

import usage from "./usage";
import hideScrollbar from "./hide-scrollbar";
import customSize from "./custom-size";
import horizontal from "./horizontal";
import offset from "./offset";

export const scrollShadowContent = {
  usage,
  hideScrollbar,
  customSize,
  horizontal,
  offset,
};

const Content = `export const Content = ({className}) => (
  <div className={className}>
    <p>
      Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco minim nostrud elit officia tempor esse quis.
    </p>
    <p>
      Sunt ad dolore quis aute consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
    </p>
    <p>
      Est velit labore esse esse cupidatat. Velit id elit consequat minim. Mollit enim excepteur ea laboris adipisicing aliqua proident occaecat do do adipisicing adipisicing ut fugiat. Consequat pariatur ullamco aute sunt esse. Irure excepteur eu non eiusmod. Commodo commodo et ad ipsum elit esse pariatur sit adipisicing sunt excepteur enim.
    </p>
    <p>
      Incididunt duis commodo mollit esse veniam non exercitation dolore occaecat ea nostrud laboris. Adipisicing occaecat fugiat fugiat irure fugiat in magna non consectetur proident fugiat. Commodo magna et aliqua elit sint cupidatat. Sint aute ullamco enim cillum anim ex. Est eiusmod commodo occaecat consequat laboris est do duis. Enim incididunt non culpa velit quis aute in elit magna ullamco in consequat ex proident.
    </p>
    <p>
      Dolore incididunt mollit fugiat pariatur cupidatat ipsum laborum cillum. Commodo consequat velit cupidatat duis ex nisi non aliquip ad ea pariatur do culpa. Eiusmod proident adipisicing tempor tempor qui pariatur voluptate dolor do ea commodo. Veniam voluptate cupidatat ex nisi do ullamco in quis elit.
    </p>
    <p>
      Cillum proident veniam cupidatat pariatur laborum tempor cupidatat anim eiusmod id nostrud pariatur tempor reprehenderit. Do esse ullamco laboris sunt proident est ea exercitation cupidatat. Do Lorem eiusmod aliqua culpa ullamco consectetur veniam voluptate cillum. Dolor consequat cillum tempor laboris mollit laborum reprehenderit reprehenderit veniam aliqua deserunt cupidatat consequat id.
    </p>
    <p>
      Est id tempor excepteur enim labore sint aliquip consequat duis minim tempor proident. Dolor incididunt aliquip minim elit ea. Exercitation non officia eu id.
    </p>
    <p>
      Ipsum ipsum consequat incididunt do aliquip pariatur nostrud. Qui ut sint culpa labore Lorem. Magna deserunt aliquip aute duis consectetur magna amet anim. Magna fugiat est nostrud veniam. Officia duis ea sunt aliqua.
    </p>
    <p>
      Ipsum minim officia aute anim minim aute aliquip aute non in non. Ipsum aliquip proident ut dolore eiusmod ad fugiat fugiat ut ex. Ea velit Lorem ut et commodo nulla voluptate veniam ea et aliqua esse id. Pariatur dolor et adipisicing ea mollit. Ipsum non irure proident ipsum dolore aliquip adipisicing laborum irure dolor nostrud occaecat exercitation.
    </p>
    <p>
      Culpa qui reprehenderit nostrud aliqua reprehenderit et ullamco proident nisi commodo non ut. Ipsum quis irure nisi sint do qui velit nisi. Sunt voluptate eu reprehenderit tempor consequat eiusmod Lorem irure velit duis Lorem laboris ipsum cupidatat. Pariatur excepteur tempor veniam cillum et nulla ipsum veniam ad ipsum ad aute. Est officia duis pariatur ad eiusmod id voluptate.
    </p>
  </div>
);`;

const App = `import {ScrollShadow} from "@nextui-org/react";
import {Content} from "./Content";
  
export default function App() {
  return (
    <ScrollShadow 
      hideScrollBar 
      offset={100}
      orientation="horizontal" 
      className="max-w-[400px] max-h-[300px]"
    >
      <Content className="w-[800px]" />
    </ScrollShadow>
  );
}`;

const react = {
  "/App.jsx": App,
  "/Content.jsx": Content,
};

export default {
  ...react,
};

const Content = `export const Content = () => (
<div>
  <p>
    Sit nulla est ex deserunt exercitation anim occaecat. Nostrud ullamco deserunt aute id consequat veniam incididunt duis in sint irure nisi. Mollit officia cillum Lorem ullamco minim nostrud elit officia tempor esse quis.
  </p>
  <p>
    Sunt ad dolore quis aute consequat. Magna exercitation reprehenderit magna aute tempor cupidatat consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et mollit incididunt nisi consectetur esse laborum eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad veniam.
  </p>
  <p>
    Est velit labore esse esse cupidatat. Velit id elit consequat minim. Mollit enim excepteur ea laboris adipisicing aliqua proident occaecat do do adipisicing adipisicing ut fugiat. Consequat pariatur ullamco aute sunt esse. Irure excepteur eu non eiusmod. Commodo commodo et ad ipsum elit esse pariatur sit adipisicing sunt excepteur enim.
  </p>
  <p>
    Incididunt duis commodo mollit esse veniam non exercitation dolore occaecat ea nostrud laboris. Adipisicing occaecat fugiat fugiat irure fugiat in magna non consectetur proident fugiat. Commodo magna et aliqua elit sint cupidatat. Sint aute ullamco enim cillum anim ex. Est eiusmod commodo occaecat consequat laboris est do duis. Enim incididunt non culpa velit quis aute in elit magna ullamco in consequat ex proident.
  </p>
  <p>
    Dolore incididunt mollit fugiat pariatur cupidatat ipsum laborum cillum. Commodo consequat velit cupidatat duis ex nisi non aliquip ad ea pariatur do culpa. Eiusmod proident adipisicing tempor tempor qui pariatur voluptate dolor do ea commodo. Veniam voluptate cupidatat ex nisi do ullamco in quis elit.
  </p>
  <p>
    Cillum proident veniam cupidatat pariatur laborum tempor cupidatat anim eiusmod id nostrud pariatur tempor reprehenderit. Do esse ullamco laboris sunt proident est ea exercitation cupidatat. Do Lorem eiusmod aliqua culpa ullamco consectetur veniam voluptate cillum. Dolor consequat cillum tempor laboris mollit laborum reprehenderit reprehenderit veniam aliqua deserunt cupidatat consequat id.
  </p>
  <p>
    Est id tempor excepteur enim labore sint aliquip consequat duis minim tempor proident. Dolor incididunt aliquip minim elit ea. Exercitation non officia eu id.
  </p>
  <p>
    Ipsum ipsum consequat incididunt do aliquip pariatur nostrud. Qui ut sint culpa labore Lorem. Magna deserunt aliquip aute duis consectetur magna amet anim. Magna fugiat est nostrud veniam. Officia duis ea sunt aliqua.
  </p>
  <p>
    Ipsum minim officia aute anim minim aute aliquip aute non in non. Ipsum aliquip proident ut dolore eiusmod ad fugiat fugiat ut ex. Ea velit Lorem ut et commodo nulla voluptate veniam ea et aliqua esse id. Pariatur dolor et adipisicing ea mollit. Ipsum non irure proident ipsum dolore aliquip adipisicing laborum irure dolor nostrud occaecat exercitation.
  </p>
  <p>
    Culpa qui reprehenderit nostrud aliqua reprehenderit et ullamco proident nisi commodo non ut. Ipsum quis irure nisi sint do qui velit nisi. Sunt voluptate eu reprehenderit tempor consequat eiusmod Lorem irure velit duis Lorem laboris ipsum cupidatat. Pariatur excepteur tempor veniam cillum et nulla ipsum veniam ad ipsum ad aute. Est officia duis pariatur ad eiusmod id voluptate.
  </p>
</div>
);`;

const App = `import {ScrollShadow} from "@nextui-org/react";
import {Content} from "./Content";

export default function App() {
  return (
    <ScrollShadow className="w-[300px] h-[400px]">
      <Content />
    </ScrollShadow>
  );
}`;

const react = {
  "/App.jsx": App,
  "/Content.jsx": Content,
};

export default {
  ...react,
};

const usePokemonListTs = `export type Pokemon = {
  name: string;
  url: string;
};

export type UsePokemonListProps = {
  /** Delay to wait before fetching more items */
  fetchDelay?: number;
};

export function usePokemonList({fetchDelay = 0}: UsePokemonListProps = {}) {
  const [items, setItems] = React.useState<Pokemon[]>([]);
  const [hasMore, setHasMore] = React.useState(true);
  const [isLoading, setIsLoading] = React.useState(false);
  const [offset, setOffset] = React.useState(0);
  const limit = 10; // Number of items per page, adjust as necessary

  const loadPokemon = async (currentOffset: number) => {
    const controller = new AbortController();
    const {signal} = controller;

    try {
      setIsLoading(true);

      if (offset > 0) {
        // Delay to simulate network latency
        await new Promise((resolve) => setTimeout(resolve, fetchDelay));
      }

      let res = await fetch(
        \`https://pokeapi.co/api/v2/pokemon?offset=\${currentOffset}&limit=\${limit}\`,
        {signal},
      );

      if (!res.ok) {
        throw new Error("Network response was not ok");
      }

      let json = await res.json();

      setHasMore(json.next !== null);
      // Append new results to existing ones
      setItems((prevItems) => [...prevItems, ...json.results]);
    } catch (error) {
      if (error.name === "AbortError") {
        console.log("Fetch aborted");
      } else {
        console.error("There was an error with the fetch operation:", error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  React.useEffect(() => {
    loadPokemon(offset);
  }, []);

  const onLoadMore = () => {
    const newOffset = offset + limit;

    setOffset(newOffset);
    loadPokemon(newOffset);
  };

  return {
    items,
    hasMore,
    isLoading,
    onLoadMore,
  };
}

`;

const usePokemonList = `export function usePokemonList({fetchDelay = 0} = {}) {
  const [items, setItems] = React.useState([]);
  const [hasMore, setHasMore] = React.useState(true);
  const [isLoading, setIsLoading] = React.useState(false);
  const [offset, setOffset] = React.useState(0);
  const limit = 10; // Number of items per page, adjust as necessary

  const loadPokemon = async (currentOffset) => {
    const controller = new AbortController();
    const {signal} = controller;

    try {
      setIsLoading(true);

      if (offset > 0) {
        // Delay to simulate network latency
        await new Promise((resolve) => setTimeout(resolve, fetchDelay));
      }

      let res = await fetch(
        \`https://pokeapi.co/api/v2/pokemon?offset=\${currentOffset}&limit=\${limit}\`,
        {signal},
      );

      if (!res.ok) {
        throw new Error("Network response was not ok");
      }

      let json = await res.json();

      setHasMore(json.next !== null);
      // Append new results to existing ones
      setItems((prevItems) => [...prevItems, ...json.results]);
    } catch (error) {
      if (error.name === "AbortError") {
        console.log("Fetch aborted");
      } else {
        console.error("There was an error with the fetch operation:", error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  React.useEffect(() => {
    loadPokemon(offset);
  }, []);

  const onLoadMore = () => {
    const newOffset = offset + limit;

    setOffset(newOffset);
    loadPokemon(newOffset);
  };

  return {
    items,
    hasMore,
    isLoading,
    onLoadMore,
  };
};`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
import {usePokemonList} from "./usePokemonList";

export default function App() {
  const [isOpen, setIsOpen] = React.useState(false);
  const {items, hasMore, isLoading, onLoadMore} = usePokemonList({fetchDelay: 1500});

  const [, scrollerRef] = useInfiniteScroll({
    hasMore,
    isEnabled: isOpen,
    shouldUseLoader: false, // We don't want to show the loader at the bottom of the list
    onLoadMore,
  });

  return (
    <Select
      className="max-w-xs"
      isLoading={isLoading}
      items={items}
      label="Pick a Pokemon"
      placeholder="Select a Pokemon"
      scrollRef={scrollerRef}
      selectionMode="single"
      onOpenChange={setIsOpen}
    >
      {(item) => (
        <SelectItem key={item.name} className="capitalize">
          {item.name}
        </SelectItem>
      )}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/usePokemonList.js": usePokemonList,
};

const reactTs = {
  "/App.tsx": App,
  "/usePokemonList.ts": usePokemonListTs,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const colors = [
    "default",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger",
  ];

  return (
    <div className="w-full flex flex-row flex-wrap gap-4">
      {colors.map((color) => (
        <Select
          key={color}
          color={color}
          label="Favorite Animal"
          placeholder="Select an animal"
          defaultSelectedKeys={["cat"]}
          className="max-w-xs"
        >
          {animals.map((animal) => (
            <SelectItem key={animal.key}>
              {animal.label}
            </SelectItem>
          ))}
        </Select>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const App = `import {Select, SelectItem, Avatar} from "@nextui-org/react";
import {users} from "./data";

export default function App() {
  return (
    <Select
      items={users}
      label="Assigned to"
      placeholder="Select a user"
      labelPlacement="outside"
      className="max-w-xs"
    >
      {(user) => (
        <SelectItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </SelectItem>
      )}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const App = `import {Select, SelectItem, Avatar} from "@nextui-org/react";
import {users} from "./data";

export default function App() {
  return (
    <Select
      items={users}
      label="Assigned to"
      placeholder="Select a user"
      labelPlacement="outside"
      classNames={{
        base: "max-w-xs",
        trigger: "h-12",
      }}
      renderValue={(items) => {
        return items.map((item) => (
          <div key={item.key} className="flex items-center gap-2">
            <Avatar
              alt={item.data.name}
              className="flex-shrink-0"
              size="sm"
              src={item.data.avatar}
            />
            <div className="flex flex-col">
              <span>{item.data.name}</span>
              <span className="text-default-500 text-tiny">({item.data.email})</span>
            </div>
          </div>
        ));
      }}
    >
      {(user) => (
        <SelectItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </SelectItem>
      )}
    </Select>
  );
}`;

const AppTs = `import {Select, SelectItem, Avatar, SelectedItems} from "@nextui-org/react";
import {users} from "./data";

type User = {
  id: number;
  name: string;
  role: string;
  team: string;
  status: string;
  age: string;
  avatar: string;
  email: string;
};

export default function App() {
  return (
    <Select
      items={users}
      label="Assigned to"
      placeholder="Select a user"
      labelPlacement="outside"
      classNames={{
        base: "max-w-xs",
        trigger: "h-12",
      }}
      renderValue={(items: SelectedItems<User>) => {
        return items.map((item) => (
          <div key={item.key} className="flex items-center gap-2">
            <Avatar
              alt={item.data.name}
              className="flex-shrink-0"
              size="sm"
              src={item.data.avatar}
            />
            <div className="flex flex-col">
              <span>{item.data.name}</span>
              <span className="text-default-500 text-tiny">({item.data.email})</span>
            </div>
          </div>
        ));
      }}
    >
      {(user) => (
        <SelectItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </SelectItem>
      )}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.ts": data,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Select, SelectItem, SelectSection} from "@nextui-org/react";

export default function App() {
  const headingClasses = "flex w-full sticky top-1 z-20 py-1.5 px-2 bg-default-100 shadow-small rounded-small";

  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      className="max-w-xs"
      scrollShadowProps={{
        isEnabled: false,
      }}
    >
      <SelectSection 
        title="Mammals"
        classNames={{
          heading: headingClasses,
        }}
      >
        <SelectItem key="Lion">Lion</SelectItem>
        <SelectItem key="Tiger">Tiger</SelectItem>
        <SelectItem key="Elephant">Elephant</SelectItem>
        <SelectItem key="Kangaroo">Kangaroo</SelectItem>
        <SelectItem key="Panda">Panda</SelectItem>
        <SelectItem key="Giraffe">Giraffe</SelectItem>
        <SelectItem key="Zebra">Zebra</SelectItem>
        <SelectItem key="Cheetah">Cheetah</SelectItem>
      </SelectSection>
      <SelectSection 
        title="Birds"
        classNames={{
          heading: headingClasses,
        }}
      >
        <SelectItem key="Eagle">Eagle</SelectItem>
        <SelectItem key="Parrot">Parrot</SelectItem>
        <SelectItem key="Penguin">Penguin</SelectItem>
        <SelectItem key="Ostrich">Ostrich</SelectItem>
        <SelectItem key="Peacock">Peacock</SelectItem>
        <SelectItem key="Swan">Swan</SelectItem>
        <SelectItem key="Falcon">Falcon</SelectItem>
        <SelectItem key="Flamingo">Flamingo</SelectItem>
      </SelectSection>
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const SelectorIcon = `export const SelectorIcon = (props) => (
    <svg
      aria-hidden="true"
      fill="none"
      focusable="false"
      height="1em"
      role="presentation"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
      viewBox="0 0 24 24"
      width="1em"
      {...props}
    >
      <path d="M0 0h24v24H0z" fill="none" stroke="none" />
      <path d="M8 9l4 -4l4 4" />
      <path d="M16 15l-4 4l-4 -4" />
    </svg>
);`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {SelectorIcon} from "./SelectorIcon";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      labelPlacement="outside"
      className="max-w-xs"
      disableSelectorIconRotation
      selectorIcon={<SelectorIcon />}
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
  "/SelectorIcon.jsx": SelectorIcon,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const App = `import {Select, SelectItem, Avatar} from "@nextui-org/react";
import {users} from "./data";

export default function App() {
  return (
    <Select
      items={users}
      label="Assigned to"
      className="max-w-xs"
      variant="bordered"
      classNames={{
        label: "group-data-[filled=true]:-translate-y-5",
        trigger: "min-h-16",
        listboxWrapper: "max-h-[400px]",
      }}
      listboxProps={{
        itemClasses: {
          base: [
            "rounded-md",
            "text-default-500",
            "transition-opacity",
            "data-[hover=true]:text-foreground",
            "data-[hover=true]:bg-default-100",
            "dark:data-[hover=true]:bg-default-50",
            "data-[selectable=true]:focus:bg-default-50",
            "data-[pressed=true]:opacity-70",
            "data-[focus-visible=true]:ring-default-500",
          ],
        },
      }}
      popoverProps={{
        classNames: {
          base: "before:bg-default-200",
          content: "p-0 border-small border-divider bg-background",
        },
      }}
      renderValue={(items) => {
        return items.map((item) => (
          <div key={item.key} className="flex items-center gap-2">
            <Avatar
              alt={item.data.name}
              className="flex-shrink-0"
              size="sm"
              src={item.data.avatar}
            />
            <div className="flex flex-col">
              <span>{item.data.name}</span>
              <span className="text-default-500 text-tiny">({item.data.email})</span>
            </div>
          </div>
        ));
      }}
    >
      {(user) => (
        <SelectItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </SelectItem>
      )}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      description="The second most popular pet in the world"
      defaultSelectedKeys={["cat"]}
      className="max-w-xs"
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      disabledKeys={["zebra", "tiger", "lion", "elephant", "crocodile", "whale"]}
      className="max-w-xs"
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      isDisabled
      label="Favorite Animal"
      placeholder="Select an animal"
      defaultSelectedKeys={["cat"]}
      className="max-w-xs"
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      items={animals}
      label="Favorite Animal"
      placeholder="Select an animal"
      className="max-w-xs"
    >
      {(animal) => <SelectItem>{animal.label}</SelectItem>}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState(new Set([]));
  const [touched, setTouched] = React.useState(false);

  const isValid = value.has("cat");

  return (
    <Select
      label="Favorite Animal"
      variant="bordered"
      placeholder="Select an animal"
      description="The second most popular pet in the world"
      errorMessage={isValid || !touched ? "" : "You must select a cat"}
      isInvalid={isValid || !touched ? false : true}
      selectedKeys={value}
      className="max-w-xs"
      onSelectionChange={setValue}
      onClose={() => setTouched(true)}
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

import usage from "./usage";
import dynamic from "./dynamic";
import disabled from "./disabled";
import disabledItems from "./disabled-items";
import required from "./required";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import radius from "./radius";
import labelPlacements from "./label-placements";
import startContent from "./start-content";
import itemStartContent from "./item-start-content";
import asyncLoadingItems from "./async-loading-items";
import withoutScrollShadow from "./without-scroll-shadow";
import description from "./description";
import errorMessage from "./error-message";
import singleControlled from "./single-controlled";
import singleControlledOnChange from "./single-controlled-onchange";
import openState from "./open-state";
import customItems from "./custom-items";
import customRenderValue from "./custom-render-value";
import sections from "./sections";
import customSectionsStyle from "./custom-sections-style";
import multiple from "./multiple";
import multipleControlled from "./multiple-controlled";
import multipleControlledOnChange from "./multiple-controlled-onchange";
import multipleWithChips from "./multiple-chips";
import customSelectorIcon from "./custom-selector-icon";
import customStyles from "./custom-styles";

export const selectContent = {
  usage,
  dynamic,
  disabled,
  disabledItems,
  required,
  sizes,
  colors,
  variants,
  radius,
  labelPlacements,
  asyncLoadingItems,
  description,
  startContent,
  itemStartContent,
  withoutScrollShadow,
  errorMessage,
  singleControlled,
  singleControlledOnChange,
  openState,
  customItems,
  customRenderValue,
  sections,
  customSectionsStyle,
  multiple,
  multipleControlled,
  multipleControlledOnChange,
  multipleWithChips,
  customSelectorIcon,
  customStyles,
};

const App = `import {Select, SelectItem, Avatar} from "@nextui-org/react";

export default function App() {
  return (
    <Select
      className="max-w-xs"
      label="Select country"
    >
      <SelectItem
        key="argentina"
        startContent={<Avatar alt="Argentina" className="w-6 h-6" src="https://flagcdn.com/ar.svg" />}
      >
        Argentina
      </SelectItem>
      <SelectItem
        key="venezuela"
        startContent={<Avatar alt="Venezuela" className="w-6 h-6" src="https://flagcdn.com/ve.svg" />}
      >
        Venezuela
      </SelectItem>
      <SelectItem
        key="brazil"
        startContent={<Avatar alt="Brazil" className="w-6 h-6" src="https://flagcdn.com/br.svg" />}
      >
        Brazil
      </SelectItem>
      <SelectItem
        key="switzerland"
        startContent={
          <Avatar alt="Switzerland" className="w-6 h-6" src="https://flagcdn.com/ch.svg" />
        }
      >
        Switzerland
      </SelectItem>
      <SelectItem
        key="germany"
        startContent={<Avatar alt="Germany" className="w-6 h-6" src="https://flagcdn.com/de.svg" />}
      >
        Germany
      </SelectItem>
      <SelectItem
        key="spain"
        startContent={<Avatar alt="Spain" className="w-6 h-6" src="https://flagcdn.com/es.svg" />}
      >
        Spain
      </SelectItem>
      <SelectItem
        key="france"
        startContent={<Avatar alt="France" className="w-6 h-6" src="https://flagcdn.com/fr.svg" />}
      >
        France
      </SelectItem>
      <SelectItem
        key="italy"
        startContent={<Avatar alt="Italy" className="w-6 h-6" src="https://flagcdn.com/it.svg" />}
      >
        Italy
      </SelectItem>
      <SelectItem
        key="mexico"
        startContent={<Avatar alt="Mexico" className="w-6 h-6" src="https://flagcdn.com/mx.svg" />}
      >
        Mexico
      </SelectItem>
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const placements = [
    "inside",
    "outside",
    "outside-left",
  ];

  return (
    <div className="w-full flex flex-col gap-4">
      <div className="flex flex-col gap-2">
        <h3 className="text-default-500 text-small">Without placeholder</h3>
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <Select
              labelPlacement={placement}
              label="Favorite Animal"
              className="max-w-xs"
            >
              {animals.map((animal) => (
                <SelectItem key={animal.key}>
                  {animal.label}
                </SelectItem>
              ))}
            </Select>
          ))}
        </div>
      </div>  
      <div className="flex flex-col gap-2">
        <h3 className="text-default-500 text-small">With placeholder</h3>
        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
          {placements.map((placement) => (
            <Select
              labelPlacement={placement}
              label="Favorite Animal"
              placeholder="Select an animal"
              className="max-w-xs"
            >
              {animals.map((animal) => (
                <SelectItem key={animal.key}>
                  {animal.label}
                </SelectItem>
              ))}
            </Select>
          ))}
        </div>
      </div>  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/1.png",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/1.png",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/2.png",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/2.png",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/3.png",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/3.png",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/4.png",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/4.png",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/5.png",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/5.png",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/7.png",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/7.png",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/8.png",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/8.png",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/9.png",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/9.png",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/11.png",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/11.png",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/male/12.png",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://d2u8k2ocievbld.cloudfront.net/memojis/female/12.png",
    email: "mia.robinson@example.com",
  },
];`;

const App = `import {Select, SelectItem, Avatar, Chip} from "@nextui-org/react";
import {users} from "./data";

export default function App() {
  return (
    <Select
      items={users}
      label="Assigned to"
      variant="bordered"
      isMultiline={true}
      selectionMode="multiple"
      placeholder="Select a user"
      labelPlacement="outside"
      classNames={{
        base: "max-w-xs",
        trigger: "min-h-12 py-2",
      }}
      renderValue={(items) => {
        return (
          <div className="flex flex-wrap gap-2">
            {items.map((item) => (
              <Chip key={item.key}>{item.data.name}</Chip>
            ))}
          </div>
        );
      }}
    >
      {(user) => (
        <SelectItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </SelectItem>
      )}
    </Select>
  );
}`;

const AppTs = `import {Select, SelectItem, Avatar, Chip, SelectedItems} from "@nextui-org/react";
import {users} from "./data";

type User = {
  id: number;
  name: string;
  role: string;
  team: string;
  status: string;
  age: string;
  avatar: string;
  email: string;
};

export default function App() {
  return (
    <Select
      items={users}
      label="Assigned to"
      variant="bordered"
      isMultiline={true}
      selectionMode="multiple"
      placeholder="Select a user"
      labelPlacement="outside"
      classNames={{
        base: "max-w-xs",
        trigger: "min-h-12 py-2",
      }}
      renderValue={(items: SelectedItems<User>) => {
        return (
          <div className="flex flex-wrap gap-2">
            {items.map((item) => (
              <Chip key={item.key}>{item.data.name}</Chip>
            ))}
          </div>
        );
      }}
    >
      {(user) => (
        <SelectItem key={user.id} textValue={user.name}>
          <div className="flex gap-2 items-center">
            <Avatar alt={user.name} className="flex-shrink-0" size="sm" src={user.avatar} />
            <div className="flex flex-col">
              <span className="text-small">{user.name}</span>
              <span className="text-tiny text-default-400">{user.email}</span>
            </div>
          </div>
        </SelectItem>
      )}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.js": data,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [values, setValues] = React.useState(new Set([]));

  const handleSelectionChange = (e) => {
    setValues(new Set(e.target.value.split(",")));
  };

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        selectionMode="multiple"
        placeholder="Select an animal"
        selectedKeys={values}
        className="max-w-xs"
        onChange={handleSelectionChange}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {Array.from(values).join(", ")}</p>
    </div>      
  );
}`;

const AppTs = `import {Select, SelectItem, Selection} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [values, setValues] = React.useState<Selection>(new Set([]));

  const handleSelectionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setValues(new Set(e.target.value.split(",")));
  };

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        selectionMode="multiple"
        placeholder="Select an animal"
        selectedKeys={values}
        className="max-w-xs"
        onChange={handleSelectionChange}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {Array.from(values).join(", ")}</p>
    </div>      
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.ts": data,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [values, setValues] = React.useState(new Set(["cat", "dog"]));

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        selectionMode="multiple"
        placeholder="Select an animal"
        selectedKeys={values}
        className="max-w-xs"
        onSelectionChange={setValues}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {Array.from(values).join(", ")}</p>
    </div>
  );
}`;

const AppTs = `import {Select, SelectItem, Selection} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [values, setValues] = React.useState<Selection>(new Set(["cat", "dog"]));

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        selectionMode="multiple"
        placeholder="Select an animal"
        selectedKeys={values}
        className="max-w-xs"
        onSelectionChange={setValues}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {Array.from(values).join(", ")}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.ts": data,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      selectionMode="multiple"
      className="max-w-xs"
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem, Button} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [isOpen, setIsOpen] = React.useState(false);

  return (
    <div className="flex w-full max-w-xs items-center gap-2">
      <Select
        isOpen={isOpen}
        label="Favorite Animal"
        placeholder="Select an animal"
        defaultSelectedKeys={["cat"]}
        onOpenChange={(open) => open !== isOpen && setIsOpen(open)}
        className="max-w-xs"
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <Button aria-label="Open" aria-pressed={isOpen} onPress={() => setIsOpen(!isOpen)}>
        {isOpen ? "Close" : "Open"}
      </Button>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const radius = [
    "full",
    "lg",
    "md",
    "sm",
    "none",
  ];

  return (
    <div className="w-full flex flex-row flex-wrap gap-4">
      {radius.map((r) => (
        <Select
          key={r}
          radius={r}
          label="Favorite Animal"
          placeholder="Select an animal"
          defaultSelectedKeys={["cat"]}
          className="max-w-[45%]"
        >
          {animals.map((animal) => (
            <SelectItem key={animal.key}>
              {animal.label}
            </SelectItem>
          ))}
        </Select>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      isRequired
      label="Favorite Animal"
      placeholder="Select an animal"
      defaultSelectedKeys={["cat"]}
      className="max-w-xs"
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const App = `import {Select, SelectItem, SelectSection} from "@nextui-org/react";

export default function App() {
  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      className="max-w-xs"
    >
      <SelectSection showDivider title="Mammals">
        <SelectItem key="Lion">Lion</SelectItem>
        <SelectItem key="Tiger">Tiger</SelectItem>
        <SelectItem key="Elephant">Elephant</SelectItem>
        <SelectItem key="Kangaroo">Kangaroo</SelectItem>
        <SelectItem key="Panda">Panda</SelectItem>
        <SelectItem key="Giraffe">Giraffe</SelectItem>
        <SelectItem key="Zebra">Zebra</SelectItem>
        <SelectItem key="Cheetah">Cheetah</SelectItem>
      </SelectSection>
      <SelectSection title="Birds">
        <SelectItem key="Eagle">Eagle</SelectItem>
        <SelectItem key="Parrot">Parrot</SelectItem>
        <SelectItem key="Penguin">Penguin</SelectItem>
        <SelectItem key="Ostrich">Ostrich</SelectItem>
        <SelectItem key="Peacock">Peacock</SelectItem>
        <SelectItem key="Swan">Swan</SelectItem>
        <SelectItem key="Falcon">Falcon</SelectItem>
        <SelectItem key="Flamingo">Flamingo</SelectItem>
      </SelectSection>
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState("");

  const handleSelectionChange = (e) => {
    setValue(e.target.value);
  };

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        variant="bordered"
        placeholder="Select an animal"
        selectedKeys={[value]}
        className="max-w-xs"
        onChange={handleSelectionChange}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {value}</p>
    </div>
  );
}`;

const AppTs = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState<string>("");

  const handleSelectionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setValue(e.target.value);
  };

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        variant="bordered"
        placeholder="Select an animal"
        selectedKeys={[value]}
        className="max-w-xs"
        onChange={handleSelectionChange}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.js": data,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const AppTs = `import {Select, SelectItem, Selection} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState<Selection>(new Set([]));

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        variant="bordered"
        placeholder="Select an animal"
        selectedKeys={value}
        className="max-w-xs"
        onSelectionChange={setValue}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-default-500 text-small">Selected: {value}</p>
    </div>
  );
}`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const [value, setValue] = React.useState(new Set([]));

  return (
    <div className="flex w-full max-w-xs flex-col gap-2">
      <Select
        label="Favorite Animal"
        variant="bordered"
        placeholder="Select an animal"
        selectedKeys={value}
        className="max-w-xs"
        onSelectionChange={setValue}
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <p className="text-small text-default-500">Selected: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.js": data,
};

export default {
  ...react,
  ...reactTs,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const sizes = ["sm", "md", "lg"];

  return (
    <div className="w-full flex flex-col gap-4">
      {sizes.map((size) => (
        <div key={size} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <Select 
            size={size}
            label="Select an animal" 
            className="max-w-xs" 
          >
            {animals.map((animal) => (
              <SelectItem key={animal.key}>
                {animal.label}
              </SelectItem>
            ))}
          </Select>
          <Select
            size={size}
            label="Favorite Animal"
            placeholder="Select an animal"
            className="max-w-xs"
          >
            {animals.map((animal) => (
              <SelectItem key={animal.key}>
                {animal.label}
              </SelectItem>
            ))}
          </Select>
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const PetIcon = `export const PetIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M19.0803 15.7203C18.4903 12.1903 15.1003 9.32031 11.5203 9.32031C7.63028 9.32031 4.21028 12.4703 3.88028 16.3503C3.75028 17.8503 4.23028 19.2703 5.22028 20.3403C6.20028 21.4103 7.58028 22.0003 9.08028 22.0003H13.7603C15.4503 22.0003 16.9303 21.3403 17.9403 20.1503C18.9503 18.9603 19.3503 17.3803 19.0803 15.7203Z"
      fill="currentColor"
    />
    <path
      d="M10.2796 7.86C11.8978 7.86 13.2096 6.54819 13.2096 4.93C13.2096 3.31181 11.8978 2 10.2796 2C8.66141 2 7.34961 3.31181 7.34961 4.93C7.34961 6.54819 8.66141 7.86 10.2796 7.86Z"
      fill="currentColor"
    />
    <path
      d="M16.94 9.02844C18.2876 9.02844 19.38 7.93601 19.38 6.58844C19.38 5.24086 18.2876 4.14844 16.94 4.14844C15.5924 4.14844 14.5 5.24086 14.5 6.58844C14.5 7.93601 15.5924 9.02844 16.94 9.02844Z"
      fill="currentColor"
    />
    <path
      d="M20.5496 12.9313C21.6266 12.9313 22.4996 12.0582 22.4996 10.9812C22.4996 9.90429 21.6266 9.03125 20.5496 9.03125C19.4727 9.03125 18.5996 9.90429 18.5996 10.9812C18.5996 12.0582 19.4727 12.9313 20.5496 12.9313Z"
      fill="currentColor"
    />
    <path
      d="M3.94 10.9816C5.28757 10.9816 6.38 9.88914 6.38 8.54156C6.38 7.19399 5.28757 6.10156 3.94 6.10156C2.59243 6.10156 1.5 7.19399 1.5 8.54156C1.5 9.88914 2.59243 10.9816 3.94 10.9816Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {PetIcon} from "./PetIcon";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      className="max-w-xs"
      defaultSelectedKeys={["cat"]}
      label="Favorite Animal"
      placeholder="Select an animal"
      startContent={<PetIcon />}
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>{animal.label}</SelectItem>
      ))}
    </Select>
  );
}
`;

const react = {
  "/App.jsx": App,
  "/PetIcon.jsx": PetIcon,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
      <Select 
        label="Select an animal" 
        className="max-w-xs" 
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
      <Select
        label="Favorite Animal"
        placeholder="Select an animal"
        className="max-w-xs"
      >
        {animals.map((animal) => (
          <SelectItem key={animal.key}>
            {animal.label}
          </SelectItem>
        ))}
      </Select>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  const variants = ["flat", "bordered", "underlined", "faded"];

  return (
    <div className="w-full flex flex-col gap-4">
      {variants.map((variant) => (
        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
          <Select 
            variant={variant}
            label="Select an animal" 
            className="max-w-xs" 
          >
            {animals.map((animal) => (
              <SelectItem key={animal.key}>
                {animal.label}
              </SelectItem>
            ))}
          </Select>
          <Select
            variant={variant}
            label="Favorite Animal"
            placeholder="Select an animal"
            className="max-w-xs"
          >
            {animals.map((animal) => (
              <SelectItem key={animal.key}>
                {animal.label}
              </SelectItem>
            ))}
          </Select>
        </div>
      ))}  
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const data = `export const animals = [
  {key: "cat", label: "Cat"},
  {key: "dog", label: "Dog"},
  {key: "elephant", label: "Elephant"},
  {key: "lion", label: "Lion"},
  {key: "tiger", label: "Tiger"},
  {key: "giraffe", label: "Giraffe"},
  {key: "dolphin", label: "Dolphin"},
  {key: "penguin", label: "Penguin"},
  {key: "zebra", label: "Zebra"},
  {key: "shark", label: "Shark"},
  {key: "whale", label: "Whale"},
  {key: "otter", label: "Otter"},
  {key: "crocodile", label: "Crocodile"}
];`;

const App = `import {Select, SelectItem} from "@nextui-org/react";
import {animals} from "./data";

export default function App() {
  return (
    <Select
      label="Favorite Animal"
      placeholder="Select an animal"
      defaultSelectedKeys={["cat"]}
      className="max-w-xs"
      scrollShadowProps={{
        isEnabled: false
      }}
    >
      {animals.map((animal) => (
        <SelectItem key={animal.key}>
          {animal.label}
        </SelectItem>
      ))}
    </Select>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

import usage from "./usage";
import standalone from "./standalone";
import loaded from "./loaded";

export const skeletonContent = {
  usage,
  standalone,
  loaded,
};

const App = `import {Card, Skeleton, Button} from "@nextui-org/react";

export default function App() {
  const [isLoaded, setIsLoaded] = React.useState(false);

  const toggleLoad = () => {
    setIsLoaded(!isLoaded);
  };

  return (
    <div className="flex flex-col gap-3">
      <Card className="w-[200px] space-y-5 p-4" radius="lg">
        <Skeleton isLoaded={isLoaded} className="rounded-lg">
          <div className="h-24 rounded-lg bg-secondary"></div>
        </Skeleton>
        <div className="space-y-3">
          <Skeleton isLoaded={isLoaded} className="w-3/5 rounded-lg">
            <div className="h-3 w-full rounded-lg bg-secondary"></div>
          </Skeleton>
          <Skeleton isLoaded={isLoaded} className="w-4/5 rounded-lg">
            <div className="h-3 w-full rounded-lg bg-secondary-300"></div>
          </Skeleton>
          <Skeleton isLoaded={isLoaded} className="w-2/5 rounded-lg">
            <div className="h-3 w-full rounded-lg bg-secondary-200"></div>
          </Skeleton>
        </div>
      </Card>
      <Button size="sm" variant="flat" color="secondary" onPress={toggleLoad}>
        {isLoaded ? "Show" : "Hide"} Skeleton
      </Button>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Skeleton} from "@nextui-org/react";

export default function App() {
  return (
    <div className="max-w-[300px] w-full flex items-center gap-3">
      <div>
        <Skeleton className="flex rounded-full w-12 h-12"/>
      </div>  
      <div className="w-full flex flex-col gap-2">
        <Skeleton className="h-3 w-3/5 rounded-lg"/>
        <Skeleton className="h-3 w-4/5 rounded-lg"/>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Card, Skeleton} from "@nextui-org/react";

export default function App() {
  return (
    <Card className="w-[200px] space-y-5 p-4" radius="lg">
      <Skeleton className="rounded-lg">
        <div className="h-24 rounded-lg bg-default-300"></div>
      </Skeleton>
      <div className="space-y-3">
        <Skeleton className="w-3/5 rounded-lg">
          <div className="h-3 w-3/5 rounded-lg bg-default-200"></div>
        </Skeleton>
        <Skeleton className="w-4/5 rounded-lg">
          <div className="h-3 w-4/5 rounded-lg bg-default-200"></div>
        </Skeleton>
        <Skeleton className="w-2/5 rounded-lg">  
          <div className="h-3 w-2/5 rounded-lg bg-default-300"></div>
        </Skeleton>
      </div>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  const colors = [
    "foreground",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger",
  ];

  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      {colors.map((color) => (
        <Slider
          key={color}
          color={color}
          step={0.01}
          maxValue={1}
          minValue={0}
          defaultValue={0.7}
          aria-label="Temperature"
          className="max-w-md"
        />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState(25);

  return (
    <div className="flex flex-col gap-2 w-full h-full max-w-md items-start justify-center">
      <Slider
        aria-label="Volume"
        size="lg"
        color="secondary"
        onChangeEnd={setValue}
        className="max-w-md"
      />
      <p className="text-default-500 font-medium text-small">Current volume: {value}</p>
    </div>
  );
}`;

const AppTs = `import {Slider, SliderValue} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState<SliderValue>(25);

  return (
    <div className="flex flex-col gap-2 w-full h-full max-w-md items-start justify-center">
      <Slider 
        aria-label="Volume"
        size="lg"
        color="secondary"
        defaultValue={70}
        onChangeEnd={setValue}
        className="max-w-md"
      />
      <p className="text-default-500 font-medium text-small">Current volume: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState([100, 300]);

  return (
    <div className="flex flex-col gap-2 w-full h-full max-w-md items-start justify-center">
      <Slider 
        label="Select a budget"
        formatOptions={{style: "currency", currency: "USD"}}
        step={10}
        maxValue={1000}
        minValue={0}
        value={value} 
        onChange={setValue}
        className="max-w-md"
      />
      <p className="text-default-500 font-medium text-small">
        Selected budget: {Array.isArray(value) && value.map((b) => \`$\${b}\`).join(" – ")}
      </p>
    </div>
  );
}`;

const AppTs = `import {Slider, SliderValue} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState<SliderValue>([100, 300]);

  return (
    <div className="flex flex-col gap-2 w-full h-full max-w-md items-start justify-center">
      <Slider 
        label="Select a budget"
        formatOptions={{style: "currency", currency: "USD"}}
        step={10}
        maxValue={1000}
        minValue={0}
        value={value} 
        onChange={setValue}
        className="max-w-md"
      />
      <p className="text-default-500 font-medium text-small">
        Selected budget: {Array.isArray(value) && value.map((b) => \`$\${b}\`).join(" – ")}
      </p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const VolumeHighIcon = `export const VolumeHighIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M18.0003 16.7503C17.8403 16.7503 17.6903 16.7003 17.5503 16.6003C17.2203 16.3503 17.1503 15.8803 17.4003 15.5503C18.9703 13.4603 18.9703 10.5403 17.4003 8.45027C17.1503 8.12027 17.2203 7.65027 17.5503 7.40027C17.8803 7.15027 18.3503 7.22027 18.6003 7.55027C20.5603 10.1703 20.5603 13.8303 18.6003 16.4503C18.4503 16.6503 18.2303 16.7503 18.0003 16.7503Z"
      fill="currentColor"
    />
    <path
      d="M19.8284 19.2503C19.6684 19.2503 19.5184 19.2003 19.3784 19.1003C19.0484 18.8503 18.9784 18.3803 19.2284 18.0503C21.8984 14.4903 21.8984 9.51027 19.2284 5.95027C18.9784 5.62027 19.0484 5.15027 19.3784 4.90027C19.7084 4.65027 20.1784 4.72027 20.4284 5.05027C23.4984 9.14027 23.4984 14.8603 20.4284 18.9503C20.2884 19.1503 20.0584 19.2503 19.8284 19.2503Z"
      fill="currentColor"
    />
    <path
      d="M14.02 3.78168C12.9 3.16168 11.47 3.32168 10.01 4.23168L7.09 6.06168C6.89 6.18168 6.66 6.25168 6.43 6.25168H5.5H5C2.58 6.25168 1.25 7.58168 1.25 10.0017V14.0017C1.25 16.4217 2.58 17.7517 5 17.7517H5.5H6.43C6.66 17.7517 6.89 17.8217 7.09 17.9417L10.01 19.7717C10.89 20.3217 11.75 20.5917 12.55 20.5917C13.07 20.5917 13.57 20.4717 14.02 20.2217C15.13 19.6017 15.75 18.3117 15.75 16.5917V7.41168C15.75 5.69168 15.13 4.40168 14.02 3.78168Z"
      fill="currentColor"
    />
  </svg>
);`;

const VolumeLowIcon = `export const VolumeLowIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M19.3284 16.7503C19.1684 16.7503 19.0184 16.7003 18.8784 16.6003C18.5484 16.3503 18.4784 15.8803 18.7284 15.5503C20.2984 13.4603 20.2984 10.5403 18.7284 8.45027C18.4784 8.12027 18.5484 7.65027 18.8784 7.40027C19.2084 7.15027 19.6784 7.22027 19.9284 7.55027C21.8984 10.1703 21.8984 13.8303 19.9284 16.4503C19.7884 16.6503 19.5584 16.7503 19.3284 16.7503Z"
      fill="currentColor"
    />
    <path
      d="M15.3481 3.78168C14.2281 3.16168 12.7981 3.32168 11.3381 4.23168L8.41813 6.06168C8.21813 6.18168 7.98813 6.25168 7.75813 6.25168H6.82812H6.32812C3.90812 6.25168 2.57812 7.58168 2.57812 10.0017V14.0017C2.57812 16.4217 3.90812 17.7517 6.32812 17.7517H6.82812H7.75813C7.98813 17.7517 8.21813 17.8217 8.41813 17.9417L11.3381 19.7717C12.2181 20.3217 13.0781 20.5917 13.8781 20.5917C14.3981 20.5917 14.8981 20.4717 15.3481 20.2217C16.4581 19.6017 17.0781 18.3117 17.0781 16.5917V7.41168C17.0781 5.69168 16.4581 4.40168 15.3481 3.78168Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Slider, Button} from "@nextui-org/react";
import {VolumeLowIcon} from "./VolumeLowIcon";
import {VolumeHighIcon} from "./VolumeHighIcon";

export default function App() {
  const [value, setValue] = React.useState(25);

  return (
    <div className="flex flex-col gap-2 w-full h-full max-w-md items-start justify-center">
      <Slider
        aria-label="Volume"
        size="lg"
        color="success"
        value={value}
        onChange={setValue}
        startContent={
          <Button
            isIconOnly
            radius="full"
            variant="light"
            onPress={() => setValue((prev) => prev >= 10 ? prev - 10 : 0)}
          >
            <VolumeLowIcon className="text-2xl" />
          </Button>
        }
        endContent={
          <Button
            isIconOnly
            radius="full"
            variant="light"
            onPress={() => setValue((prev) => prev <= 90 ? prev + 10 : 100)}
          >
            <VolumeHighIcon className="text-2xl" />
          </Button>
        }
        className="max-w-md"
      />
      <p className="text-default-500 font-medium text-small">Current volume: {value}</p>
    </div>
  );
}`;

const AppTs = `import {Slider, Button, SliderValue} from "@nextui-org/react";
import {VolumeLowIcon} from "./VolumeLowIcon";
import {VolumeHighIcon} from "./VolumeHighIcon";

export default function App() {
  const [value, setValue] = React.useState<SliderValue>(25);

  return (
    <div className="flex flex-col gap-2 w-full h-full max-w-md items-start justify-center">
      <Slider 
        aria-label="Volume"
        size="lg"
        color="success"
        value={value} 
        onChange={setValue}
        startContent={
          <Button
            isIconOnly
            variant="light"
            radius="full"
            onPress={() => setValue((prev) => prev >= 10 ? prev - 10 : 0)}
          >
            <VolumeLowIcon className="text-2xl" />
          </Button>
        }
        endContent={
          <Button
            isIconOnly
            variant="light"
            radius="full"
            onPress={() => setValue((prev) => prev <= 90 ? prev + 10 : 100)}
          >
            <VolumeHighIcon className="text-2xl" />
          </Button>
        }
        className="max-w-md"
      />
      <p className="text-default-500 font-medium text-small">Current volume: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/VolumeHighIcon.jsx": VolumeHighIcon,
  "/VolumeLowIcon.jsx": VolumeLowIcon,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Price Range"
      step={100} 
      maxValue={1000} 
      minValue={0} 
      defaultValue={[0, 800]}
      showSteps={true}
      showTooltip={true}
      showOutline={true}
      disableThumbScale={true}
      formatOptions={{style: "currency", currency: "USD"}}
      tooltipValueFormatOptions={{style: "currency", currency: "USD", maximumFractionDigits: 0}}
      classNames={{
        base: "max-w-md",
        filler: "bg-gradient-to-r from-primary-500 to-secondary-400",
        labelWrapper: "mb-2",
        label: "font-medium text-default-700 text-medium",
        value: "font-medium text-default-500 text-small",
        thumb: [
          "transition-size",
          "bg-gradient-to-r from-secondary-400 to-primary-500",
          "data-[dragging=true]:shadow-lg data-[dragging=true]:shadow-black/20",
          "data-[dragging=true]:w-7 data-[dragging=true]:h-7 data-[dragging=true]:after:h-6 data-[dragging=true]:after:w-6"
        ],
        step: "data-[in-range=true]:bg-black/30 dark:data-[in-range=true]:bg-white/50"
      }}
      tooltipProps={{
        offset: 10,
        placement: "bottom",
        classNames: {
          base: [
            // arrow color
            "before:bg-gradient-to-r before:from-secondary-400 before:to-primary-500",
          ],
          content: [
            "py-2 shadow-xl",
            "text-white bg-gradient-to-r from-secondary-400 to-primary-500",
          ],
        },
      }}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      <Slider   
        size="sm"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        color="secondary"
        disableThumbScale={true}
        aria-label="Temperature"
        defaultValue={0.2}
        className="max-w-md" 
      />
      <Slider   
        size="md"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        color="secondary"
        disableThumbScale={true}
        aria-label="Temperature"
        defaultValue={0.4}
        className="max-w-md" 
      />
      <Slider   
        size="lg"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        color="secondary"
        disableThumbScale={true}
        aria-label="Temperature"
        defaultValue={0.6}
        className="max-w-md" 
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      isDisabled 
      label="Temperature" 
      step={0.01} 
      maxValue={1} 
      minValue={0} 
      defaultValue={0.6}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Exposure" 
      size="sm"
      color="warning"
      step={0.01} 
      maxValue={5} 
      minValue={-5} 
      fillOffset={0}
      defaultValue={1.5}
      className="max-w-md"
      formatOptions={{signDisplay: 'always'}}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Donuts to buy"
      size="sm"
      maxValue={60}
      getValue={(donuts) => \`\${donuts} of 60 Donuts\`}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      aria-label="Player progress" 
      color="foreground"
      hideThumb={true}
      defaultValue={20}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Temperature" 
      color="danger"
      hideValue={true}
      step={0.01} 
      maxValue={1} 
      minValue={0} 
      defaultValue={0.4}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import sizes from "./sizes";
import radius from "./radius";
import colors from "./colors";
import visibleSteps from "./visible-steps";
import marks from "./marks";
import vertical from "./vertical";
import range from "./range";
import fillOffset from "./fill-offset";
import tooltip from "./tooltip";
import outline from "./outline";
import disableThumbScale from "./disable-thumb-scale";
import valueFormatting from "./value-formatting";
import getValue from "./get-value";
import hideValue from "./hide-value";
import hideThumb from "./hide-thumb";
import startEndContent from "./start-end-content";
import controlled from "./controlled";
import controlledChangeEnd from "./controlled-change-end";
import controlledRange from "./controlled-range";
import renderThumb from "./render-thumb";
import renderRangeThumb from "./render-range-thumb";
import renderLabel from "./render-label";
import renderValue from "./render-value";
import customStyles from "./custom-styles";

export const sliderContent = {
  usage,
  disabled,
  sizes,
  radius,
  colors,
  visibleSteps,
  marks,
  vertical,
  range,
  fillOffset,
  tooltip,
  outline,
  disableThumbScale,
  valueFormatting,
  getValue,
  hideValue,
  hideThumb,
  startEndContent,
  controlled,
  controlledChangeEnd,
  controlledRange,
  renderThumb,
  renderRangeThumb,
  renderLabel,
  renderValue,
  customStyles,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Select a value" 
      color="foreground"
      size="sm"
      step={10} 
      marks={[
        {
          value: 20,
          label: "20%",
        },
        {
          value: 50,
          label: "50%",
        },
        {
          value: 80,
          label: "80%",
        },
      ]}
      defaultValue={20}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      <Slider   
        size="sm"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        color="foreground"
        showOutline={true}
        aria-label="Temperature"
        defaultValue={0.2}
        className="max-w-md" 
      />
      <Slider   
        size="md"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        color="foreground"
        showOutline={true}
        aria-label="Temperature"
        defaultValue={0.4}
        className="max-w-md" 
      />
      <Slider   
        size="lg"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        color="foreground"
        showOutline={true}
        aria-label="Temperature"
        defaultValue={0.6}
        className="max-w-md" 
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  const radius = [
    "full",
    "lg",
    "md",
    "sm",
    "none",
  ];

  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      {radius.map((r) => (
        <Slider
          key={r}
          radius={r}
          step={0.01}
          maxValue={1}
          minValue={0}
          defaultValue={0.7}
          aria-label="Temperature"
          className="max-w-md"
        />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Price Range"
      step={50} 
      minValue={0} 
      maxValue={1000} 
      defaultValue={[100, 500]} 
      formatOptions={{style: "currency", currency: "USD"}}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const InfoIcon = `export const InfoIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M12 8V13"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1.5"
    />
    <path
      d="M11.9945 16H12.0035"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);
`;

const App = `import {Slider, Tooltip} from "@nextui-org/react";
import {InfoIcon} from "./InfoIcon";

export default function App() {
  return (
    <Slider
      size="lg"
      label="Price Range"
      maxValue={1000}
      step={10}
      defaultValue={[100, 300]}
      formatOptions={{style: "currency", currency: "USD"}}
      classNames={{
        base: "max-w-md gap-3",
        filler: "bg-gradient-to-r from-pink-300 to-cyan-300 dark:from-pink-600 dark:to-cyan-800",
      }}
      renderLabel={({children, ...props}) => (
        <label {...props} className="text-medium flex gap-2 items-center">
          {children}
          <Tooltip
            className="w-[200px] px-1.5 text-tiny text-default-600 rounded-small"
            content="The price range you want to search for."
            placement="right"
          >
            <span className="transition-opacity opacity-80 hover:opacity-100">
              <InfoIcon />
            </span>
          </Tooltip>
        </label>
      )}
      renderThumb={({index, ...props}) => (
        <div
          {...props}
          className="group p-1 top-1/2 bg-background border-small border-default-200 dark:border-default-400/50 shadow-medium rounded-full cursor-grab data-[dragging=true]:cursor-grabbing"
        >
          <span
            className={cn(
              "transition-transform bg-gradient-to-br shadow-small rounded-full w-5 h-5 block group-data-[dragging=true]:scale-80",
              index === 0
                ? "from-pink-200 to-pink-500 dark:from-pink-400 dark:to-pink-600" // first thumb
                : "from-cyan-200 to-cyan-600 dark:from-cyan-600 dark:to-cyan-800", // second thumb
            )}
          />
        </div>
      )}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/InfoIcon.jsx": InfoIcon,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider
      size="lg"
      label="Price Range"
      maxValue={1000}
      step={10}
      defaultValue={[100, 300]}
      formatOptions={{style: "currency", currency: "USD"}}
      classNames={{
        base: "max-w-md gap-3",
        filler: "bg-gradient-to-r from-pink-300 to-cyan-300 dark:from-pink-600 dark:to-cyan-800",
      }}
      renderThumb={({index, ...props}) => (
        <div
          {...props}
          className="group p-1 top-1/2 bg-background border-small border-default-200 dark:border-default-400/50 shadow-medium rounded-full cursor-grab data-[dragging=true]:cursor-grabbing"
        >
          <span
            className={cn(
              "transition-transform bg-gradient-to-br shadow-small rounded-full w-5 h-5 block group-data-[dragging=true]:scale-80",
              index === 0
                ? "from-pink-200 to-pink-500 dark:from-pink-400 dark:to-pink-600" // first thumb
                : "from-cyan-200 to-cyan-600 dark:from-cyan-600 dark:to-cyan-800", // second thumb
            )}
          />
        </div>
      )}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      size="sm"
      label="Select brightness"
      defaultValue={60}
      classNames={{
        base: "max-w-md gap-3",
        track: "border-s-secondary-100",
        filler: "bg-gradient-to-r from-secondary-100 to-secondary-500"
      }}
      renderThumb={(props) => (
        <div
          {...props}
          className="group p-1 top-1/2 bg-background border-small border-default-200 dark:border-default-400/50 shadow-medium rounded-full cursor-grab data-[dragging=true]:cursor-grabbing"
        >
          <span className="transition-transform bg-gradient-to-br shadow-small from-secondary-100 to-secondary-500 rounded-full w-5 h-5 block group-data-[dragging=true]:scale-80" />
        </div>
      )}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState(0.2);
  const [inputValue, setInputValue] = React.useState("0.2");

  const handleChange = (value) => {
    if (isNaN(Number(value))) return;

    setValue(value);
    setInputValue(value.toString());
  };

  return (
    <Slider 
      label="Temperature" 
      size="sm"
      step={0.01} 
      maxValue={1} 
      minValue={0} 
      color="foreground"
      classNames={{
        base: "max-w-md",
        label: "text-medium",
      }}
      // we extract the default children to render the input
      renderValue={({children, ...props}) => (
        <output {...props}>
          <Tooltip
            className="text-tiny text-default-500 rounded-md"
            content="Press Enter to confirm"
            placement="left"
          >
            <input
              className="px-1 py-0.5 w-12 text-right text-small text-default-700 font-medium bg-default-100 outline-none transition-colors rounded-small border-medium border-transparent hover:border-primary focus:border-primary"
              type="text"
              aria-label="Temperature value"
              value={inputValue}
              onChange={(e) => {
                const v = e.target.value;

                setInputValue(v);
              }}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !isNaN(Number(inputValue))) {
                  setValue(Number(inputValue));
                }
              }}
            />
          </Tooltip>
        </output>
      )}
      value={value}
      onChange={handleChange}
    />
  );
}`;

const AppTs = `import {Slider, SliderValue} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState<SliderValue>(0.2);
  const [inputValue, setInputValue] = React.useState<string>("0.2");

  const handleChange = (value: SliderValue) => {
    if (isNaN(Number(value))) return;

    setValue(value);
    setInputValue(value.toString());
  };

  return (
    <Slider 
      label="Temperature" 
      size="sm"
      step={0.01} 
      maxValue={1} 
      minValue={0} 
      color="foreground"
      classNames={{
        base: "max-w-md",
        label: "text-medium",
      }}
      // we extract the default children to render the input
      renderValue={({children, ...props}) => (
        <output {...props}>
          <Tooltip
            className="text-tiny text-default-500 rounded-md"
            content="Press Enter to confirm"
            placement="left"
          >
            <input
              className="px-1 py-0.5 w-12 text-right text-small text-default-700 font-medium bg-default-100 outline-none transition-colors rounded-small border-medium border-transparent hover:border-primary focus:border-primary"
              type="text"
              aria-label="Temperature value"
              value={inputValue}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                const v = e.target.value;

                setInputValue(v);
              }}
              onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {
                if (e.key === "Enter" && !isNaN(Number(inputValue))) {
                  setValue(Number(inputValue));
                }
              }}
            />
          </Tooltip>
        </output>
      )}
      value={value}
      onChange={handleChange}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      <Slider   
        size="sm"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        aria-label="Temperature"
        defaultValue={0.2}
        className="max-w-md" 
      />
      <Slider   
        size="md"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        aria-label="Temperature"
        defaultValue={0.4}
        className="max-w-md" 
      />
      <Slider   
        size="lg"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        aria-label="Temperature"
        defaultValue={0.6}
        className="max-w-md" 
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const VolumeHighIcon = `export const VolumeHighIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M18.0003 16.7503C17.8403 16.7503 17.6903 16.7003 17.5503 16.6003C17.2203 16.3503 17.1503 15.8803 17.4003 15.5503C18.9703 13.4603 18.9703 10.5403 17.4003 8.45027C17.1503 8.12027 17.2203 7.65027 17.5503 7.40027C17.8803 7.15027 18.3503 7.22027 18.6003 7.55027C20.5603 10.1703 20.5603 13.8303 18.6003 16.4503C18.4503 16.6503 18.2303 16.7503 18.0003 16.7503Z"
      fill="currentColor"
    />
    <path
      d="M19.8284 19.2503C19.6684 19.2503 19.5184 19.2003 19.3784 19.1003C19.0484 18.8503 18.9784 18.3803 19.2284 18.0503C21.8984 14.4903 21.8984 9.51027 19.2284 5.95027C18.9784 5.62027 19.0484 5.15027 19.3784 4.90027C19.7084 4.65027 20.1784 4.72027 20.4284 5.05027C23.4984 9.14027 23.4984 14.8603 20.4284 18.9503C20.2884 19.1503 20.0584 19.2503 19.8284 19.2503Z"
      fill="currentColor"
    />
    <path
      d="M14.02 3.78168C12.9 3.16168 11.47 3.32168 10.01 4.23168L7.09 6.06168C6.89 6.18168 6.66 6.25168 6.43 6.25168H5.5H5C2.58 6.25168 1.25 7.58168 1.25 10.0017V14.0017C1.25 16.4217 2.58 17.7517 5 17.7517H5.5H6.43C6.66 17.7517 6.89 17.8217 7.09 17.9417L10.01 19.7717C10.89 20.3217 11.75 20.5917 12.55 20.5917C13.07 20.5917 13.57 20.4717 14.02 20.2217C15.13 19.6017 15.75 18.3117 15.75 16.5917V7.41168C15.75 5.69168 15.13 4.40168 14.02 3.78168Z"
      fill="currentColor"
    />
  </svg>
);`;

const VolumeLowIcon = `export const VolumeLowIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M19.3284 16.7503C19.1684 16.7503 19.0184 16.7003 18.8784 16.6003C18.5484 16.3503 18.4784 15.8803 18.7284 15.5503C20.2984 13.4603 20.2984 10.5403 18.7284 8.45027C18.4784 8.12027 18.5484 7.65027 18.8784 7.40027C19.2084 7.15027 19.6784 7.22027 19.9284 7.55027C21.8984 10.1703 21.8984 13.8303 19.9284 16.4503C19.7884 16.6503 19.5584 16.7503 19.3284 16.7503Z"
      fill="currentColor"
    />
    <path
      d="M15.3481 3.78168C14.2281 3.16168 12.7981 3.32168 11.3381 4.23168L8.41813 6.06168C8.21813 6.18168 7.98813 6.25168 7.75813 6.25168H6.82812H6.32812C3.90812 6.25168 2.57812 7.58168 2.57812 10.0017V14.0017C2.57812 16.4217 3.90812 17.7517 6.32812 17.7517H6.82812H7.75813C7.98813 17.7517 8.21813 17.8217 8.41813 17.9417L11.3381 19.7717C12.2181 20.3217 13.0781 20.5917 13.8781 20.5917C14.3981 20.5917 14.8981 20.4717 15.3481 20.2217C16.4581 19.6017 17.0781 18.3117 17.0781 16.5917V7.41168C17.0781 5.69168 16.4581 4.40168 15.3481 3.78168Z"
      fill="currentColor"
    />
  </svg>
);`;

const App = `import {Slider} from "@nextui-org/react";
import {VolumeLowIcon} from "./VolumeLowIcon";
import {VolumeHighIcon} from "./VolumeHighIcon";

export default function App() {
  return (
    <Slider 
      aria-label="Volume"
      size="lg"
      color="success"
      startContent={<VolumeLowIcon className="text-2xl" />}
      endContent={<VolumeHighIcon className="text-2xl" />}
      className="max-w-md"
      defaultValue={40}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/VolumeHighIcon.jsx": VolumeHighIcon,
  "/VolumeLowIcon.jsx": VolumeLowIcon,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Select a value" 
      showTooltip={true}
      step={0.1} 
      formatOptions={{style: "percent"}}
      maxValue={1}
      minValue={0}
      marks={[
        {
          value: 0.2,
          label: "20%",
        },
        {
          value: 0.5,
          label: "50%",
        },
        {
          value: 0.8,
          label: "80%",
        },
      ]}
      defaultValue={0.2}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Temperature" 
      step={0.01} 
      maxValue={1} 
      minValue={0} 
      defaultValue={0.4}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <Slider 
      label="Currency" 
      showTooltip={true}
      formatOptions={{style: 'currency', currency: 'JPY'}}
      tooltipValueFormatOptions={{style: 'currency', currency: 'JPY'}}
      defaultValue={40}
      className="max-w-md"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-row  max-w-md h-[348px] gap-6 w-full">
      <Slider   
        size="sm"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        orientation="vertical"
        aria-label="Temperature"
        defaultValue={0.2}
      />
      <Slider   
        size="md"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        orientation="vertical"
        aria-label="Temperature"
        defaultValue={0.4}
      />
      <Slider   
        size="lg"
        step={0.01} 
        maxValue={1} 
        minValue={0} 
        orientation="vertical"
        aria-label="Temperature"
        defaultValue={0.6}
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Slider} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-col gap-6 w-full max-w-md">
      <Slider   
        size="sm"
        step={0.1}
        color="foreground"
        label="Temperature"
        showSteps={true} 
        maxValue={1} 
        minValue={0} 
        defaultValue={0.2}
        className="max-w-md" 
      />
      <Slider   
        size="md"
        step={0.1}
        color="foreground"
        label="Temperature"
        showSteps={true} 
        maxValue={1} 
        minValue={0} 
        defaultValue={0.4}
        className="max-w-md" 
      />
      <Slider   
        size="lg"
        step={0.1}
        color="foreground"
        label="Temperature"
        showSteps={true} 
        maxValue={1} 
        minValue={0} 
        defaultValue={0.6}
        className="max-w-md" 
      />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4">
      <Snippet color="default">npm install @nextui-org/react</Snippet>
      <Snippet color="primary">npm install @nextui-org/react</Snippet>
      <Snippet color="secondary">npm install @nextui-org/react</Snippet>
      <Snippet color="success">npm install @nextui-org/react</Snippet>
      <Snippet color="warning">npm install @nextui-org/react</Snippet>
      <Snippet color="danger">npm install @nextui-org/react</Snippet>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

export const CopyIcon = `export const CopyIcon = ({ size, height, width, ...props }) => {
  return (
    <svg
      fill="none"
      height={height || 20}
      shape-rendering="geometricPrecision"
      stroke="currentColor"
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="1.5"
      viewBox="0 0 24 24"
      width={width || 20}
      {...props}
    >
      <path d="M6 17C4.89543 17 4 16.1046 4 15V5C4 3.89543 4.89543 3 6 3H13C13.7403 3 14.3866 3.4022 14.7324 4M11 21H18C19.1046 21 20 20.1046 20 19V9C20 7.89543 19.1046 7 18 7H11C9.89543 7 9 7.89543 9 9V19C9 20.1046 9.89543 21 11 21Z" />
    </svg>
  );
};`;

export const CheckIcon = `export const CheckIcon = ({
  size,
  height,
  width,
  ...props
}) => {
  return (
    <svg
      width={size || width || 24}
      height={size || height || 24}
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="m2.394 13.742 4.743 3.62 7.616-8.704-1.506-1.316-6.384 7.296-3.257-2.486zm19.359-5.084-1.506-1.316-6.369 7.279-.753-.602-1.25 1.562 2.247 1.798z"/>
    </svg>
  );
};`;

const App = `import {Snippet} from "@nextui-org/react";
import {CopyIcon} from "./CopyIcon";
import {CheckIcon} from "./CheckIcon";

export default function App() {
  return (
    <Snippet
      variant="bordered"
      copyIcon={<CopyIcon />}
      checkIcon={<CheckIcon />}
    >
      npm install @nextui-org/react
    </Snippet>
  );
}`;

const react = {
  "/App.jsx": App,
  "/CopyIcon.jsx": CopyIcon,
  "/CheckIcon.jsx": CheckIcon,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <Snippet
      tooltipProps={{
        color: "foreground",
        content: "Copy this snippet",
        disableAnimation: true,
        placement: "right",
        closeDelay: 0
      }}
    >
      npm install @nextui-org/react
    </Snippet>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import symbol from "./symbol";
import withoutCopy from "./without-copy";
import customTooltip from "./custom-tooltip";
import multiline from "./multiline";
import customIcons from "./custom-icons";

export const snippetContent = {
  usage,
  sizes,
  colors,
  variants,
  symbol,
  withoutCopy,
  customTooltip,
  multiline,
  customIcons,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <Snippet>
      <span>npm install @nextui-org/react</span>
      <span>yarn add @nextui-org/react</span>
      <span>pnpm add @nextui-org/react</span>
    </Snippet>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4">
      <Snippet size="sm">npm install @nextui-org/react</Snippet>
      <Snippet size="md">npm install @nextui-org/react</Snippet>
      <Snippet size="lg">npm install @nextui-org/react</Snippet>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <Snippet symbol="#" variant="bordered">npm install @nextui-org/react</Snippet>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <Snippet>npm install @nextui-org/react</Snippet>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4">
      <Snippet variant="bordered">npm install @nextui-org/react</Snippet>
      <Snippet variant="flat" color="warning">npm install @nextui-org/react</Snippet>
      <Snippet variant="solid" color="primary">npm install @nextui-org/react</Snippet>
      <Snippet variant="shadow" color="secondary">npm install @nextui-org/react</Snippet>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Snippet} from "@nextui-org/react";

export default function App() {
  return (
    <Snippet hideCopyButton color="primary" variant="solid">
      npm install @nextui-org/react
    </Snippet>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";

export const spacerContent = {
  usage,
};

const CustomCard = `import {Card} from "@nextui-org/react";

export const CustomCard = () => (
  <Card className="w-[200px] space-y-5 p-4" radius="2xl">
    <div className="h-24 rounded-lg bg-default-300"></div>
    <div className="space-y-3">
      <div className="h-3 w-3/5 rounded-lg bg-default-200"></div>
      <div className="h-3 w-4/5 rounded-lg bg-default-200"></div>
      <div className="h-3 w-2/5 rounded-lg bg-default-300"></div>
    </div>
  </Card>
);`;

const App = `import {Spacer} from "@nextui-org/react";
import {CustomCard} from "./CustomCard";

export default function App() {
  return (
    <div className="flex">
      <CustomCard />
      <Spacer x={4} />
      <CustomCard />
      <Spacer x={4} />
      <CustomCard />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/CustomCard.jsx": CustomCard,
};

export default {
  ...react,
};

const App = `import {Spinner} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Spinner color="default"/>
      <Spinner color="primary"/>
      <Spinner color="secondary"/>
      <Spinner color="success"/>
      <Spinner color="warning"/>
      <Spinner color="danger"/>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import sizes from "./sizes";
import colors from "./colors";
import label from "./label";
import labelColors from "./label-colors";

export const spinnerContent = {
  usage,
  sizes,
  colors,
  label,
  labelColors,
};

const App = `import {Spinner} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Spinner label="Default" color="default" labelColor="foreground"/>
      <Spinner label="Primary" color="primary" labelColor="primary"/>
      <Spinner label="Secondary" color="secondary" labelColor="secondary"/>
      <Spinner label="Success" color="success" labelColor="success"/>
      <Spinner label="Warning" color="warning" labelColor="warning"/>
      <Spinner label="Danger" color="danger" labelColor="danger"/>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Spinner} from "@nextui-org/react";

export default function App() {
  return (
    <Spinner label="Loading..." color="warning" />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Spinner} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Spinner size="sm" />
      <Spinner size="md" />
      <Spinner size="lg" />
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Spinner} from "@nextui-org/react";

export default function App() {
  return (
    <Spinner />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Switch} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Switch defaultSelected color="default">Default</Switch>
      <Switch defaultSelected color="primary">Primary</Switch>
      <Switch defaultSelected color="secondary">Secondary</Switch>
      <Switch defaultSelected color="success">Success</Switch>
      <Switch defaultSelected color="warning">Warning</Switch>
      <Switch defaultSelected color="danger">Danger</Switch>
    </div> 
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Switch} from "@nextui-org/react";

export default function App() {
  const [isSelected, setIsSelected] = React.useState(true);

  return (
    <div className="flex flex-col gap-2">
      <Switch isSelected={isSelected} onValueChange={setIsSelected}>
        Airplane mode
      </Switch>  
      <p className="text-small text-default-500">Selected: {isSelected ? "true" : "false"}</p>
    </div>
  )  
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const MoonIcon = `export const MoonIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.53 15.93c-.16-.27-.61-.69-1.73-.49a8.46 8.46 0 01-1.88.13 8.409 8.409 0 01-5.91-2.82 8.068 8.068 0 01-1.44-8.66c.44-1.01.13-1.54-.09-1.76s-.77-.55-1.83-.11a10.318 10.318 0 00-6.32 10.21 10.475 10.475 0 007.04 8.99 10 10 0 002.89.55c.16.01.32.02.48.02a10.5 10.5 0 008.47-4.27c.67-.93.49-1.519.32-1.79z"
      fill="currentColor"
    />
  </svg>
);`;

const SunIcon = `export const SunIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <g fill="currentColor">
      <path d="M19 12a7 7 0 11-7-7 7 7 0 017 7z" />
      <path d="M12 22.96a.969.969 0 01-1-.96v-.08a1 1 0 012 0 1.038 1.038 0 01-1 1.04zm7.14-2.82a1.024 1.024 0 01-.71-.29l-.13-.13a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.984.984 0 01-.7.29zm-14.28 0a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a1 1 0 01-.7.29zM22 13h-.08a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zM2.08 13H2a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zm16.93-7.01a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a.984.984 0 01-.7.29zm-14.02 0a1.024 1.024 0 01-.71-.29l-.13-.14a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.97.97 0 01-.7.3zM12 3.04a.969.969 0 01-1-.96V2a1 1 0 012 0 1.038 1.038 0 01-1 1.04z" />
    </g>
  </svg>
);`;

const App = `import {Switch, VisuallyHidden, useSwitch} from "@nextui-org/react";
import {MoonIcon} from "./MoonIcon";
import {SunIcon} from "./SunIcon";

const ThemeSwitch = (props) => {
  const {
    Component, 
    slots, 
    isSelected, 
    getBaseProps, 
    getInputProps, 
    getWrapperProps
  } = useSwitch(props);

  return (
    <div className="flex flex-col gap-2">
      <Component {...getBaseProps()}>
          <VisuallyHidden>
            <input {...getInputProps()} />
          </VisuallyHidden>
          <div
            {...getWrapperProps()}
            className={slots.wrapper({
              class: [
                "w-8 h-8",
                "flex items-center justify-center",
                "rounded-lg bg-default-100 hover:bg-default-200",
              ],
            })}
          >
            {isSelected ? <SunIcon/> : <MoonIcon/>}
          </div>
      </Component>
      <p className="text-default-500 select-none">Lights: {isSelected ? "on" : "off"}</p>
    </div>
  )
}


export default function App() {
  return <ThemeSwitch/>
}`;

const AppTs = `import {Switch, useSwitch, VisuallyHidden, SwitchProps} from "@nextui-org/react";
import {MoonIcon} from "./MoonIcon";
import {SunIcon} from "./SunIcon";

const ThemeSwitch = (props: SwitchProps) => {
  const {
    Component, 
    slots, 
    isSelected, 
    getBaseProps, 
    getInputProps, 
    getWrapperProps
  } = useSwitch(props);

  return (
    <div className="flex flex-col gap-2">
      <Component {...getBaseProps()}>
          <VisuallyHidden>
            <input {...getInputProps()} />
          </VisuallyHidden>
          <div
            {...getWrapperProps()}
            className={slots.wrapper({
              class: [
                "w-8 h-8",
                "flex items-center justify-center",
                "rounded-lg bg-default-100 hover:bg-default-200",
              ],
            })}
          >
            {isSelected ? <SunIcon/> : <MoonIcon/>}
          </div>
      </Component>
      <p className="text-default-500 select-none">Lights: {isSelected ? "on" : "off"}</p>
    </div>
  )
}


export default function App() {
  return <ThemeSwitch/>
}`;

const react = {
  "/App.jsx": App,
  "/MoonIcon.jsx": MoonIcon,
  "/SunIcon.jsx": SunIcon,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/MoonIcon.tsx": MoonIcon,
  "/SunIcon.tsx": SunIcon,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Switch, cn} from "@nextui-org/react";

export default function App() {
  return (
    <Switch
      classNames={{
        base: cn(
          "inline-flex flex-row-reverse w-full max-w-md bg-content1 hover:bg-content2 items-center",
          "justify-between cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent",
          "data-[selected=true]:border-primary",
        ),
        wrapper: "p-0 h-4 overflow-visible",
        thumb: cn("w-6 h-6 border-2 shadow-lg",
          "group-data-[hover=true]:border-primary",
          //selected
          "group-data-[selected=true]:ml-6",
          // pressed
          "group-data-[pressed=true]:w-7",
          "group-data-[selected]:group-data-[pressed]:ml-4",
        ),
      }}
    >
      <div className="flex flex-col gap-1">
        <p className="text-medium">Enable early access</p>
        <p className="text-tiny text-default-400">
          Get access to new features before they are released.
        </p>
      </div>
    </Switch>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Switch} from "@nextui-org/react";

export default function App() {
  return (
    <Switch isDisabled defaultSelected>
      Automatic updates
    </Switch>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const MoonIcon = `export const MoonIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.53 15.93c-.16-.27-.61-.69-1.73-.49a8.46 8.46 0 01-1.88.13 8.409 8.409 0 01-5.91-2.82 8.068 8.068 0 01-1.44-8.66c.44-1.01.13-1.54-.09-1.76s-.77-.55-1.83-.11a10.318 10.318 0 00-6.32 10.21 10.475 10.475 0 007.04 8.99 10 10 0 002.89.55c.16.01.32.02.48.02a10.5 10.5 0 008.47-4.27c.67-.93.49-1.519.32-1.79z"
      fill="currentColor"
    />
  </svg>
);`;

const SunIcon = `export const SunIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <g fill="currentColor">
      <path d="M19 12a7 7 0 11-7-7 7 7 0 017 7z" />
      <path d="M12 22.96a.969.969 0 01-1-.96v-.08a1 1 0 012 0 1.038 1.038 0 01-1 1.04zm7.14-2.82a1.024 1.024 0 01-.71-.29l-.13-.13a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.984.984 0 01-.7.29zm-14.28 0a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a1 1 0 01-.7.29zM22 13h-.08a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zM2.08 13H2a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zm16.93-7.01a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a.984.984 0 01-.7.29zm-14.02 0a1.024 1.024 0 01-.71-.29l-.13-.14a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.97.97 0 01-.7.3zM12 3.04a.969.969 0 01-1-.96V2a1 1 0 012 0 1.038 1.038 0 01-1 1.04z" />
    </g>
  </svg>
);`;

const App = `import {Switch} from "@nextui-org/react";
import {MoonIcon} from "./MoonIcon";
import {SunIcon} from "./SunIcon";

export default function App() {
  return (
    <Switch
      defaultSelected
      size="lg"
      color="success"
      startContent={<SunIcon />}
      endContent={<MoonIcon />}
    >
      Dark mode
    </Switch>
  );
}`;

const react = {
  "/App.jsx": App,
  "/MoonIcon.jsx": MoonIcon,
  "/SunIcon.jsx": SunIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import label from "./label";
import disabled from "./disabled";
import sizes from "./sizes";
import colors from "./colors";
import thumbIcon from "./thumb-icon";
import icons from "./icons";
import controlled from "./controlled";
import customStyles from "./custom-styles";
import customImpl from "./custom-impl";

export const switchContent = {
  usage,
  label,
  disabled,
  sizes,
  colors,
  thumbIcon,
  icons,
  controlled,
  customStyles,
  customImpl,
};

const App = `import {Switch} from "@nextui-org/react";

export default function App() {
  return (
    <Switch defaultSelected>
      Automatic updates
    </Switch>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Switch} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Switch defaultSelected size="sm">Small</Switch>
      <Switch defaultSelected size="md">Medium</Switch>
      <Switch defaultSelected size="lg">Large</Switch>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const MoonIcon = `export const MoonIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M21.53 15.93c-.16-.27-.61-.69-1.73-.49a8.46 8.46 0 01-1.88.13 8.409 8.409 0 01-5.91-2.82 8.068 8.068 0 01-1.44-8.66c.44-1.01.13-1.54-.09-1.76s-.77-.55-1.83-.11a10.318 10.318 0 00-6.32 10.21 10.475 10.475 0 007.04 8.99 10 10 0 002.89.55c.16.01.32.02.48.02a10.5 10.5 0 008.47-4.27c.67-.93.49-1.519.32-1.79z"
      fill="currentColor"
    />
  </svg>
);`;

const SunIcon = `export const SunIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <g fill="currentColor">
      <path d="M19 12a7 7 0 11-7-7 7 7 0 017 7z" />
      <path d="M12 22.96a.969.969 0 01-1-.96v-.08a1 1 0 012 0 1.038 1.038 0 01-1 1.04zm7.14-2.82a1.024 1.024 0 01-.71-.29l-.13-.13a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.984.984 0 01-.7.29zm-14.28 0a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a1 1 0 01-.7.29zM22 13h-.08a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zM2.08 13H2a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zm16.93-7.01a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a.984.984 0 01-.7.29zm-14.02 0a1.024 1.024 0 01-.71-.29l-.13-.14a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.97.97 0 01-.7.3zM12 3.04a.969.969 0 01-1-.96V2a1 1 0 012 0 1.038 1.038 0 01-1 1.04z" />
    </g>
  </svg>
);`;

const App = `import {Switch} from "@nextui-org/react";
import {MoonIcon} from "./MoonIcon";
import {SunIcon} from "./SunIcon";

export default function App() {
  return (
    <Switch
      defaultSelected
      size="lg"
      color="secondary"
      thumbIcon={({ isSelected, className }) =>
        isSelected ? (
          <SunIcon className={className} />
        ) : (
          <MoonIcon className={className} />
        )
      }
    >
      Dark mode
    </Switch>
  );
}`;

const react = {
  "/App.jsx": App,
  "/MoonIcon.jsx": MoonIcon,
  "/SunIcon.jsx": SunIcon,
};

export default {
  ...react,
};

const App = `import {Switch} from "@nextui-org/react";

export default function App() {
  return (
    <Switch defaultSelected aria-label="Automatic updates"/>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, Spinner, getKeyValue} from "@nextui-org/react";
import useSWR from "swr";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

export default function App() {
  const [page, setPage] = React.useState(1);

  const {data, isLoading} = useSWR(\`https://swapi.py4e.com/api/people?page=\$\{page\}\`, fetcher, {
    keepPreviousData: true,
  });

  const rowsPerPage = 10;

  const pages = useMemo(() => {
    return data?.count ? Math.ceil(data.count / rowsPerPage) : 0;
  }, [data?.count, rowsPerPage]);

  const loadingState = isLoading || data?.results.length === 0 ? "loading" : "idle";

  return (
    <Table
      aria-label="Example table with client async pagination"
      bottomContent={
        pages > 0 ? (
          <div className="flex w-full justify-center">
            <Pagination
              isCompact
              showControls
              showShadow
              color="primary"
              page={page}
              total={pages}
              onChange={(page) => setPage(page)}
            />
          </div>
        ) : null
      }
      {...args}
    >
      <TableHeader>
        <TableColumn key="name">Name</TableColumn>
        <TableColumn key="height">Height</TableColumn>
        <TableColumn key="mass">Mass</TableColumn>
        <TableColumn key="birth_year">Birth year</TableColumn>
      </TableHeader>
      <TableBody
        items={data?.results ?? []}
        loadingContent={<Spinner />}
        loadingState={loadingState}
      >
        {(item) => (
          <TableRow key={item?.name}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@nextui-org/react";

const rows = [
  {
    key: "1",
    name: "Tony Reichert",
    role: "CEO",
    status: "Active",
  },
  {
    key: "2",
    name: "Zoey Lang",
    role: "Technical Lead",
    status: "Paused",
  },
  {
    key: "3",
    name: "Jane Fisher",
    role: "Senior Developer",
    status: "Active",
  },
  {
    key: "4",
    name: "William Howard",
    role: "Community Manager",
    status: "Vacation",
  },
];

const columns = [
  {
    key: "name",
    label: "NAME",
  },
  {
    key: "role",
    label: "ROLE",
  },
  {
    key: "status",
    label: "STATUS",
  },
];

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["2"]));

  return (
    <Table 
      aria-label="Controlled table example with dynamic content"
      selectionMode="multiple"
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
    >
      <TableHeader columns={columns}>
        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}
      </TableHeader>
      <TableBody items={rows}>
        {(item) => (
          <TableRow key={item.key}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `const columns = [
  {name: "NAME", uid: "name"},
  {name: "ROLE", uid: "role"},
  {name: "STATUS", uid: "status"},
  {name: "ACTIONS", uid: "actions"},
];

const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Technical Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026704d",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Senior Developer",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?u=a04258114e29026702d",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "Community Manager",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://i.pravatar.cc/150?u=a048581f4e29026701d",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "Sales Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://i.pravatar.cc/150?u=a092581d4ef9026700d",
    email: "kristen.cooper@example.com",
  },
];

export {columns, users};`;

const EyeIcon = `export const EyeIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 20 20"
    width="1em"
    {...props}
  >
    <path
      d="M12.9833 10C12.9833 11.65 11.65 12.9833 10 12.9833C8.35 12.9833 7.01666 11.65 7.01666 10C7.01666 8.35 8.35 7.01666 10 7.01666C11.65 7.01666 12.9833 8.35 12.9833 10Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M9.99999 16.8916C12.9417 16.8916 15.6833 15.1583 17.5917 12.1583C18.3417 10.9833 18.3417 9.00831 17.5917 7.83331C15.6833 4.83331 12.9417 3.09998 9.99999 3.09998C7.05833 3.09998 4.31666 4.83331 2.40833 7.83331C1.65833 9.00831 1.65833 10.9833 2.40833 12.1583C4.31666 15.1583 7.05833 16.8916 9.99999 16.8916Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
  </svg>
);`;

const DeleteIcon = `export const DeleteIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 20 20"
    width="1em"
    {...props}
  >
    <path
      d="M17.5 4.98332C14.725 4.70832 11.9333 4.56665 9.15 4.56665C7.5 4.56665 5.85 4.64998 4.2 4.81665L2.5 4.98332"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M7.08331 4.14169L7.26665 3.05002C7.39998 2.25835 7.49998 1.66669 8.90831 1.66669H11.0916C12.5 1.66669 12.6083 2.29169 12.7333 3.05835L12.9166 4.14169"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M15.7084 7.61664L15.1667 16.0083C15.075 17.3166 15 18.3333 12.675 18.3333H7.32502C5.00002 18.3333 4.92502 17.3166 4.83335 16.0083L4.29169 7.61664"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M8.60834 13.75H11.3833"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M7.91669 10.4167H12.0834"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
  </svg>
);`;

const EditIcon = `export const EditIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 20 20"
    width="1em"
    {...props}
  >
    <path
      d="M11.05 3.00002L4.20835 10.2417C3.95002 10.5167 3.70002 11.0584 3.65002 11.4334L3.34169 14.1334C3.23335 15.1084 3.93335 15.775 4.90002 15.6084L7.58335 15.15C7.95835 15.0834 8.48335 14.8084 8.74168 14.525L15.5834 7.28335C16.7667 6.03335 17.3 4.60835 15.4583 2.86668C13.625 1.14168 12.2334 1.75002 11.05 3.00002Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={1.5}
    />
    <path
      d="M9.90833 4.20831C10.2667 6.50831 12.1333 8.26665 14.45 8.49998"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={1.5}
    />
    <path
      d="M2.5 18.3333H17.5"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={1.5}
    />
  </svg>
);`;

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, User, Chip, Tooltip, getKeyValue} from "@nextui-org/react";
import {EditIcon} from "./EditIcon";
import {DeleteIcon} from "./DeleteIcon";
import {EyeIcon} from "./EyeIcon";
import {columns, users} from "./data";

const statusColorMap = {
  active: "success",
  paused: "danger",
  vacation: "warning",
};

export default function App() {
  const renderCell = React.useCallback((user, columnKey) => {
    const cellValue = user[columnKey];

    switch (columnKey) {
      case "name":
        return (
          <User
            avatarProps={{radius: "lg", src: user.avatar}}
            description={user.email}
            name={cellValue}
          >
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm capitalize">{cellValue}</p>
            <p className="text-bold text-sm capitalize text-default-400">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip className="capitalize" color={statusColorMap[user.status]} size="sm" variant="flat">
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex items-center gap-2">
            <Tooltip content="Details">
              <span className="text-lg text-default-400 cursor-pointer active:opacity-50">
                <EyeIcon />
              </span>
            </Tooltip>
            <Tooltip content="Edit user">
              <span className="text-lg text-default-400 cursor-pointer active:opacity-50">
                <EditIcon />
              </span>
            </Tooltip>
            <Tooltip color="danger" content="Delete user">
              <span className="text-lg text-danger cursor-pointer active:opacity-50">
                <DeleteIcon />
              </span>
            </Tooltip>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);

  return (
  <Table aria-label="Example table with custom cells">
      <TableHeader columns={columns}>
        {(column) => (
          <TableColumn key={column.uid} align={column.uid === "actions" ? "center" : "start"}>
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody items={users}>
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const AppTs = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, User, Chip, Tooltip, ChipProps, getKeyValue} from "@nextui-org/react";
import {EditIcon} from "./EditIcon";
import {DeleteIcon} from "./DeleteIcon";
import {EyeIcon} from "./EyeIcon";
import {columns, users} from "./data";

const statusColorMap: Record<string, ChipProps["color"]>  = {
  active: "success",
  paused: "danger",
  vacation: "warning",
};

type User = typeof users[0];

export default function App() {
  const renderCell = React.useCallback((user: User, columnKey: React.Key) => {
    const cellValue = user[columnKey as keyof User];

    switch (columnKey) {
      case "name":
        return (
          <User
            avatarProps={{radius: "lg", src: user.avatar}}
            description={user.email}
            name={cellValue}
          >
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm capitalize">{cellValue}</p>
            <p className="text-bold text-sm capitalize text-default-400">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip className="capitalize" color={statusColorMap[user.status]} size="sm" variant="flat">
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex items-center gap-2">
            <Tooltip content="Details">
              <span className="text-lg text-default-400 cursor-pointer active:opacity-50">
                <EyeIcon />
              </span>
            </Tooltip>
            <Tooltip content="Edit user">
              <span className="text-lg text-default-400 cursor-pointer active:opacity-50">
                <EditIcon />
              </span>
            </Tooltip>
            <Tooltip color="danger" content="Delete user">
              <span className="text-lg text-danger cursor-pointer active:opacity-50">
                <DeleteIcon />
              </span>
            </Tooltip>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);

  return (
  <Table aria-label="Example table with custom cells">
      <TableHeader columns={columns}>
        {(column) => (
          <TableColumn key={column.uid} align={column.uid === "actions" ? "center" : "start"}>
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody items={users}>
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
  "/EditIcon.jsx": EditIcon,
  "/DeleteIcon.jsx": DeleteIcon,
  "/EyeIcon.jsx": EyeIcon,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/data.js": data,
  "/EditIcon.jsx": EditIcon,
  "/DeleteIcon.jsx": DeleteIcon,
  "/EyeIcon.jsx": EyeIcon,
};

export default {
  ...react,
  ...reactTs,
};

const data = `const columns = [
  {name: "ID", uid: "id", sortable: true},
  {name: "NAME", uid: "name", sortable: true},
  {name: "AGE", uid: "age", sortable: true},
  {name: "ROLE", uid: "role", sortable: true},
  {name: "TEAM", uid: "team"},
  {name: "EMAIL", uid: "email"},
  {name: "STATUS", uid: "status", sortable: true},
  {name: "ACTIONS", uid: "actions"},
];

const statusOptions = [
  {name: "Active", uid: "active"},
  {name: "Paused", uid: "paused"},
  {name: "Vacation", uid: "vacation"},
];

const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026704d",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?u=a04258114e29026702d",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://i.pravatar.cc/150?u=a048581f4e29026701d",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://i.pravatar.cc/150?u=a092581d4ef9026700d",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29027007d",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e27027008d",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://i.pravatar.cc/150?img=4",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://i.pravatar.cc/150?img=5",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?img=8",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://i.pravatar.cc/150?img=10",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://i.pravatar.cc/150?img=12",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://i.pravatar.cc/150?img=16",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://i.pravatar.cc/150?img=15",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?img=20",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://i.pravatar.cc/150?img=33",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://i.pravatar.cc/150?img=29",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://i.pravatar.cc/150?img=50",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://i.pravatar.cc/150?img=45",
    email: "mia.robinson@example.com",
  },
];

export {columns, users, statusOptions};`;

const utils = `export function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}`;

const PlusIcon = `export const PlusIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <g
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    >
      <path d="M6 12h12" />
      <path d="M12 18V6" />
    </g>
  </svg>
);`;

const VerticalDotsIcon = `export const VerticalDotsIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
      fill="currentColor"
    />
  </svg>
);`;

const SearchIcon = `export const SearchIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const ChevronDownIcon = `export const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...otherProps}
  >
    <path
      d="m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={strokeWidth}
    />
  </svg>
);`;

const App = `import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Button,
  DropdownTrigger,
  Dropdown,
  DropdownMenu,
  DropdownItem,
  Chip,
  User,
  Pagination,
} from "@nextui-org/react";
import {PlusIcon} from "./PlusIcon";
import {VerticalDotsIcon} from "./VerticalDotsIcon";
import {SearchIcon} from "./SearchIcon";
import {ChevronDownIcon} from "./ChevronDownIcon";
import {columns, users, statusOptions} from "./data";
import {capitalize} from "./utils";

const statusColorMap = {
  active: "success",
  paused: "danger",
  vacation: "warning",
};

const INITIAL_VISIBLE_COLUMNS = ["name", "role", "status", "actions"];

export default function App() {
  const [filterValue, setFilterValue] = React.useState("");
  const [selectedKeys, setSelectedKeys] = React.useState(new Set([]));
  const [visibleColumns, setVisibleColumns] = React.useState(new Set(INITIAL_VISIBLE_COLUMNS));
  const [statusFilter, setStatusFilter] = React.useState("all");
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  const [sortDescriptor, setSortDescriptor] = React.useState({
    column: "age",
    direction: "ascending",
  });
  const [page, setPage] = React.useState(1);

  const pages = Math.ceil(users.length / rowsPerPage);

  const hasSearchFilter = Boolean(filterValue);

  const headerColumns = React.useMemo(() => {
    if (visibleColumns === "all") return columns;

    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));
  }, [visibleColumns]);

  const filteredItems = React.useMemo(() => {
    let filteredUsers = [...users];

    if (hasSearchFilter) {
      filteredUsers = filteredUsers.filter((user) =>
        user.name.toLowerCase().includes(filterValue.toLowerCase()),
      );
    }
    if (statusFilter !== "all" && Array.from(statusFilter).length !== statusOptions.length) {
      filteredUsers = filteredUsers.filter((user) =>
        Array.from(statusFilter).includes(user.status),
      );
    }

    return filteredUsers;
  }, [users, filterValue, statusFilter]);

  const items = React.useMemo(() => {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    return filteredItems.slice(start, end);
  }, [page, filteredItems, rowsPerPage]);

  const sortedItems = React.useMemo(() => {
    return [...items].sort((a, b) => {
      const first = a[sortDescriptor.column];
      const second = b[sortDescriptor.column];
      const cmp = first < second ? -1 : first > second ? 1 : 0;

      return sortDescriptor.direction === "descending" ? -cmp : cmp;
    });
  }, [sortDescriptor, items]);

  const renderCell = React.useCallback((user, columnKey) => {
    const cellValue = user[columnKey];

    switch (columnKey) {
      case "name":
        return (
          <User
            avatarProps={{radius: "full", size: "sm", src: user.avatar}}
            classNames={{
              description: "text-default-500",
            }}
            description={user.email}
            name={cellValue}
          >
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-small capitalize">{cellValue}</p>
            <p className="text-bold text-tiny capitalize text-default-500">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip
            className="capitalize border-none gap-1 text-default-600"
            color={statusColorMap[user.status]}
            size="sm"
            variant="dot"
          >
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex justify-end items-center gap-2">
            <Dropdown className="bg-background border-1 border-default-200">
              <DropdownTrigger>
                <Button isIconOnly radius="full" size="sm" variant="light">
                  <VerticalDotsIcon className="text-default-400" />
                </Button>
              </DropdownTrigger>
              <DropdownMenu>
                <DropdownItem>View</DropdownItem>
                <DropdownItem>Edit</DropdownItem>
                <DropdownItem>Delete</DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);

  const onRowsPerPageChange = React.useCallback((e) => {
    setRowsPerPage(Number(e.target.value));
    setPage(1);
  }, []);


  const onSearchChange = React.useCallback((value) => {
    if (value) {
      setFilterValue(value);
      setPage(1);
    } else {
      setFilterValue("");
    }
  }, []);

  const topContent = React.useMemo(() => {
    return (
      <div className="flex flex-col gap-4">
        <div className="flex justify-between gap-3 items-end">
          <Input
            isClearable
            classNames={{
              base: "w-full sm:max-w-[44%]",
              inputWrapper: "border-1",
            }}
            placeholder="Search by name..."
            size="sm"
            startContent={<SearchIcon className="text-default-300" />}
            value={filterValue}
            variant="bordered"
            onClear={() => setFilterValue("")}
            onValueChange={onSearchChange}
          />
          <div className="flex gap-3">
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button
                  endContent={<ChevronDownIcon className="text-small" />}
                  size="sm"
                  variant="flat"
                >
                  Status
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={statusFilter}
                selectionMode="multiple"
                onSelectionChange={setStatusFilter}
              >
                {statusOptions.map((status) => (
                  <DropdownItem key={status.uid} className="capitalize">
                    {capitalize(status.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button
                  endContent={<ChevronDownIcon className="text-small" />}
                  size="sm"
                  variant="flat"
                >
                  Columns
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={visibleColumns}
                selectionMode="multiple"
                onSelectionChange={setVisibleColumns}
              >
                {columns.map((column) => (
                  <DropdownItem key={column.uid} className="capitalize">
                    {capitalize(column.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Button
              className="bg-foreground text-background"
              endContent={<PlusIcon />}
              size="sm"
            >
              Add New
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-default-400 text-small">Total {users.length} users</span>
          <label className="flex items-center text-default-400 text-small">
            Rows per page:
            <select
              className="bg-transparent outline-none text-default-400 text-small"
              onChange={onRowsPerPageChange}
            >
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="15">15</option>
            </select>
          </label>
        </div>
      </div>
    );
  }, [
    filterValue,
    statusFilter,
    visibleColumns,
    onSearchChange,
    onRowsPerPageChange,
    users.length,
    hasSearchFilter,
  ]);

  const bottomContent = React.useMemo(() => {
    return (
      <div className="py-2 px-2 flex justify-between items-center">
        <Pagination
          showControls
          classNames={{
            cursor: "bg-foreground text-background",
          }}
          color="default"
          isDisabled={hasSearchFilter}
          page={page}
          total={pages}
          variant="light"
          onChange={setPage}
        />
        <span className="text-small text-default-400">
          {selectedKeys === "all"
            ? "All items selected"
            : \`\${selectedKeys.size} of \${items.length} selected\`}
        </span>
      </div>
    );
  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);

  const classNames = React.useMemo(
    () => ({
      wrapper: ["max-h-[382px]", "max-w-3xl"],
      th: ["bg-transparent", "text-default-500", "border-b", "border-divider"],
      td: [
        // changing the rows border radius
        // first
        "group-data-[first=true]:first:before:rounded-none",
        "group-data-[first=true]:last:before:rounded-none",
        // middle
        "group-data-[middle=true]:before:rounded-none",
        // last
        "group-data-[last=true]:first:before:rounded-none",
        "group-data-[last=true]:last:before:rounded-none",
      ],
    }),
    [],
  );

  return (
    <Table
      isCompact
      removeWrapper
      aria-label="Example table with custom cells, pagination and sorting"
      bottomContent={bottomContent}
      bottomContentPlacement="outside"
      checkboxesProps={{
        classNames: {
          wrapper: "after:bg-foreground after:text-background text-background",
        },
      }}
      classNames={classNames}
      selectedKeys={selectedKeys}
      selectionMode="multiple"
      sortDescriptor={sortDescriptor}
      topContent={topContent}
      topContentPlacement="outside"
      onSelectionChange={setSelectedKeys}
      onSortChange={setSortDescriptor}
    >
      <TableHeader columns={headerColumns}>
        {(column) => (
          <TableColumn
            key={column.uid}
            align={column.uid === "actions" ? "center" : "start"}
            allowsSorting={column.sortable}
          >
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody emptyContent={"No users found"} items={sortedItems}>
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const AppTs = `import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Button,
  DropdownTrigger,
  Dropdown,
  DropdownMenu,
  DropdownItem,
  Chip,
  User,
  Pagination,
  Selection,
  ChipProps,
  SortDescriptor
} from "@nextui-org/react";
import {PlusIcon} from "./PlusIcon";
import {VerticalDotsIcon} from "./VerticalDotsIcon";
import {ChevronDownIcon} from "./ChevronDownIcon";
import {SearchIcon} from "./SearchIcon";
import {columns, users, statusOptions} from "./data";
import {capitalize} from "./utils";

const statusColorMap: Record<string, ChipProps["color"]> = {
  active: "success",
  paused: "danger",
  vacation: "warning",
};

const INITIAL_VISIBLE_COLUMNS = ["name", "role", "status", "actions"];

type User = typeof users[0];

export default function App() {
  const [filterValue, setFilterValue] = React.useState("");
  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]));
  const [visibleColumns, setVisibleColumns] = React.useState<Selection>(new Set(INITIAL_VISIBLE_COLUMNS));
  const [statusFilter, setStatusFilter] = React.useState<Selection>("all");
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({
    column: "age",
    direction: "ascending",
  });
  const [page, setPage] = React.useState(1);

  const pages = Math.ceil(users.length / rowsPerPage);

  const hasSearchFilter = Boolean(filterValue);

  const headerColumns = React.useMemo(() => {
    if (visibleColumns === "all") return columns;

    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));
  }, [visibleColumns]);

  const filteredItems = React.useMemo(() => {
    let filteredUsers = [...users];

    if (hasSearchFilter) {
      filteredUsers = filteredUsers.filter((user) =>
        user.name.toLowerCase().includes(filterValue.toLowerCase()),
      );
    }
    if (statusFilter !== "all" && Array.from(statusFilter).length !== statusOptions.length) {
      filteredUsers = filteredUsers.filter((user) =>
        Array.from(statusFilter).includes(user.status),
      );
    }

    return filteredUsers;
  }, [users, filterValue, statusFilter]);

  const items = React.useMemo(() => {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    return filteredItems.slice(start, end);
  }, [page, filteredItems, rowsPerPage]);

  const sortedItems = React.useMemo(() => {
    return [...items].sort((a: User, b: User) => {
      const first = a[sortDescriptor.column as keyof User] as number;
      const second = b[sortDescriptor.column as keyof User] as number;
      const cmp = first < second ? -1 : first > second ? 1 : 0;

      return sortDescriptor.direction === "descending" ? -cmp : cmp;
    });
  }, [sortDescriptor, items]);

  const renderCell = React.useCallback((user: User, columnKey: React.Key) => {
    const cellValue = user[columnKey as keyof User];

    switch (columnKey) {
      case "name":
        return (
          <User
            avatarProps={{radius: "full", size: "sm", src: user.avatar}}
            classNames={{
              description: "text-default-500",
            }}
            description={user.email}
            name={cellValue}
          >
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-small capitalize">{cellValue}</p>
            <p className="text-bold text-tiny capitalize text-default-500">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip
            className="capitalize border-none gap-1 text-default-600"
            color={statusColorMap[user.status]}
            size="sm"
            variant="dot"
          >
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex justify-end items-center gap-2">
            <Dropdown className="bg-background border-1 border-default-200">
              <DropdownTrigger>
                <Button isIconOnly radius="full" size="sm" variant="light">
                  <VerticalDotsIcon className="text-default-400" />
                </Button>
              </DropdownTrigger>
              <DropdownMenu>
                <DropdownItem>View</DropdownItem>
                <DropdownItem>Edit</DropdownItem>
                <DropdownItem>Delete</DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);
  

  const onRowsPerPageChange = React.useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setRowsPerPage(Number(e.target.value));
    setPage(1);
  }, []);

  const onSearchChange = React.useCallback((value?: string) => {
    if (value) {
      setFilterValue(value);
      setPage(1);
    } else {
      setFilterValue("");
    }
  }, []);

  const topContent = React.useMemo(() => {
    return (
      <div className="flex flex-col gap-4">
        <div className="flex justify-between gap-3 items-end">
          <Input
            isClearable
            classNames={{
              base: "w-full sm:max-w-[44%]",
              inputWrapper: "border-1",
            }}
            placeholder="Search by name..."
            size="sm"
            startContent={<SearchIcon className="text-default-300" />}
            value={filterValue}
            variant="bordered"
            onClear={() => setFilterValue("")}
            onValueChange={onSearchChange}
          />
          <div className="flex gap-3">
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button
                  endContent={<ChevronDownIcon className="text-small" />}
                  size="sm"
                  variant="flat"
                >
                  Status
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={statusFilter}
                selectionMode="multiple"
                onSelectionChange={setStatusFilter}
              >
                {statusOptions.map((status) => (
                  <DropdownItem key={status.uid} className="capitalize">
                    {capitalize(status.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button
                  endContent={<ChevronDownIcon className="text-small" />}
                  size="sm"
                  variant="flat"
                >
                  Columns
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={visibleColumns}
                selectionMode="multiple"
                onSelectionChange={setVisibleColumns}
              >
                {columns.map((column) => (
                  <DropdownItem key={column.uid} className="capitalize">
                    {capitalize(column.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Button
              className="bg-foreground text-background"
              endContent={<PlusIcon />}
              size="sm"
            >
              Add New
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-default-400 text-small">Total {users.length} users</span>
          <label className="flex items-center text-default-400 text-small">
            Rows per page:
            <select
              className="bg-transparent outline-none text-default-400 text-small"
              onChange={onRowsPerPageChange}
            >
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="15">15</option>
            </select>
          </label>
        </div>
      </div>
    );
  }, [
    filterValue,
    statusFilter,
    visibleColumns,
    onSearchChange,
    onRowsPerPageChange,
    users.length,
    hasSearchFilter,
  ]);

  const bottomContent = React.useMemo(() => {
    return (
      <div className="py-2 px-2 flex justify-between items-center">
        <Pagination
          showControls
          classNames={{
            cursor: "bg-foreground text-background",
          }}
          color="default"
          isDisabled={hasSearchFilter}
          page={page}
          total={pages}
          variant="light"
          onChange={setPage}
        />
        <span className="text-small text-default-400">
          {selectedKeys === "all"
            ? "All items selected"
            : \`\${selectedKeys.size} of \${items.length} selected\`}
        </span>
      </div>
    );
  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);

  const classNames = React.useMemo(
    () => ({
      wrapper: ["max-h-[382px]", "max-w-3xl"],
      th: ["bg-transparent", "text-default-500", "border-b", "border-divider"],
      td: [
        // changing the rows border radius
        // first
        "group-data-[first=true]:first:before:rounded-none",
        "group-data-[first=true]:last:before:rounded-none",
        // middle
        "group-data-[middle=true]:before:rounded-none",
        // last
        "group-data-[last=true]:first:before:rounded-none",
        "group-data-[last=true]:last:before:rounded-none",
      ],
    }),
    [],
  );

  return (
    <Table
      isCompact
      removeWrapper
      aria-label="Example table with custom cells, pagination and sorting"
      bottomContent={bottomContent}
      bottomContentPlacement="outside"
      checkboxesProps={{
        classNames: {
          wrapper: "after:bg-foreground after:text-background text-background",
        },
      }}
      classNames={classNames}
      selectedKeys={selectedKeys}
      selectionMode="multiple"
      sortDescriptor={sortDescriptor}
      topContent={topContent}
      topContentPlacement="outside"
      onSelectionChange={setSelectedKeys}
      onSortChange={setSortDescriptor}
    >
      <TableHeader columns={headerColumns}>
        {(column) => (
          <TableColumn
            key={column.uid}
            align={column.uid === "actions" ? "center" : "start"}
            allowsSorting={column.sortable}
          >
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody emptyContent={"No users found"} items={sortedItems}>
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
  "/utils.js": utils,
  "/PlusIcon.jsx": PlusIcon,
  "/VerticalDotsIcon.jsx": VerticalDotsIcon,
  "/SearchIcon.jsx": SearchIcon,
  "/ChevronDownIcon.jsx": ChevronDownIcon,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@nextui-org/react";

const rows = [
  {
    key: "1",
    name: "Tony Reichert",
    role: "CEO",
    status: "Active",
  },
  {
    key: "2",
    name: "Zoey Lang",
    role: "Technical Lead",
    status: "Paused",
  },
  {
    key: "3",
    name: "Jane Fisher",
    role: "Senior Developer",
    status: "Active",
  },
  {
    key: "4",
    name: "William Howard",
    role: "Community Manager",
    status: "Vacation",
  },
];

const columns = [
  {
    key: "name",
    label: "NAME",
  },
  {
    key: "role",
    label: "ROLE",
  },
  {
    key: "status",
    label: "STATUS",
  },
];

export default function App() {
  const [selectedKeys, setSelectedKeys] = React.useState(new Set(["2"]));

  return (
    <Table 
      aria-label="Controlled table example with dynamic content"
      selectionMode="multiple"
      disabledKeys={["3", "4"]}
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
    >
      <TableHeader columns={columns}>
        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}
      </TableHeader>
      <TableBody items={rows}>
        {(item) => (
          <TableRow key={item.key}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, RadioGroup, Radio} from "@nextui-org/react";

const colors = ["default", "primary", "secondary", "success", "warning", "danger"];

export default function App() {
  const [selectedColor, setSelectedColor] = React.useState("default");

  return (
    <div className="flex flex-col gap-3">
      <Table 
        color={selectedColor}
        disallowEmptySelection
        selectionMode="multiple" 
        defaultSelectedKeys={["2", "3"]} 
        aria-label="Example static collection table"
      >
        <TableHeader>
          <TableColumn>NAME</TableColumn>
          <TableColumn>ROLE</TableColumn>
          <TableColumn>STATUS</TableColumn>
        </TableHeader>
        <TableBody>
          <TableRow key="1">
            <TableCell>Tony Reichert</TableCell>
            <TableCell>CEO</TableCell>
            <TableCell>Active</TableCell>
          </TableRow>
          <TableRow key="2">
            <TableCell>Zoey Lang</TableCell>
            <TableCell>Technical Lead</TableCell>
            <TableCell>Paused</TableCell>
          </TableRow>
          <TableRow key="3">
            <TableCell>Jane Fisher</TableCell>
            <TableCell>Senior Developer</TableCell>
            <TableCell>Active</TableCell>
          </TableRow>
          <TableRow key="4">
            <TableCell>William Howard</TableCell>
            <TableCell>Community Manager</TableCell>
            <TableCell>Vacation</TableCell>
          </TableRow>
        </TableBody>
      </Table>
      <RadioGroup 
        label="Selection color"
        orientation="horizontal"
        value={selectedColor} 
        onValueChange={setSelectedColor}
      >
        {colors.map((color) => (
          <Radio
            key={color}
            color={color}  
            value={color}
            className="capitalize"
          >
            {color}
          </Radio>  
        ))}
      </RadioGroup>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@nextui-org/react";

const rows = [
  {
    key: "1",
    name: "Tony Reichert",
    role: "CEO",
    status: "Active",
  },
  {
    key: "2",
    name: "Zoey Lang",
    role: "Technical Lead",
    status: "Paused",
  },
  {
    key: "3",
    name: "Jane Fisher",
    role: "Senior Developer",
    status: "Active",
  },
  {
    key: "4",
    name: "William Howard",
    role: "Community Manager",
    status: "Vacation",
  },
];

const columns = [
  {
    key: "name",
    label: "NAME",
  },
  {
    key: "role",
    label: "ROLE",
  },
  {
    key: "status",
    label: "STATUS",
  },
];

export default function App() {
  return (
    <Table aria-label="Example table with dynamic content">
      <TableHeader columns={columns}>
        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}
      </TableHeader>
      <TableBody items={rows}>
        {(item) => (
          <TableRow key={item.key}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from "@nextui-org/react";

export default function App() {
  return (
    <Table aria-label="Example empty table">
      <TableHeader>
        <TableColumn>NAME</TableColumn>
        <TableColumn>ROLE</TableColumn>
        <TableColumn>STATUS</TableColumn>
      </TableHeader>
      <TableBody emptyContent={"No rows to display."}>{[]}</TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import dynamic from "./dynamic";
import empty from "./empty";
import withoutHeader from "./without-header";
import withoutWrapper from "./without-wrapper";
import customCells from "./custom-cells";
import striped from "./striped";
import singleSelection from "./single-selection";
import multipleSelection from "./multiple-selection";
import disallowEmptySelection from "./disallow-empty-selection";
import controlledSelection from "./controlled-selection";
import disabledRows from "./disabled-rows";
import selectionBehavior from "./selection-behavior";
import rowActions from "./row-actions";
import sorting from "./sorting";
import loadMore from "./load-more";
import paginated from "./paginated";
import asyncPagination from "./async-pagination";
import infinitePagination from "./infinite-pagination";
import useCase from "./use-case";
import customStyles from "./custom-styles";

export const tableContent = {
  usage,
  dynamic,
  empty,
  withoutHeader,
  withoutWrapper,
  customCells,
  striped,
  singleSelection,
  multipleSelection,
  disallowEmptySelection,
  controlledSelection,
  disabledRows,
  selectionBehavior,
  rowActions,
  sorting,
  loadMore,
  paginated,
  asyncPagination,
  infinitePagination,
  useCase,
  customStyles,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, Spinner, getKeyValue} from "@nextui-org/react";
import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
import {useAsyncList} from "@react-stately/data";

export default function App() {
  const [isLoading, setIsLoading] = React.useState(true);
  const [hasMore, setHasMore] = React.useState(false);

  let list = useAsyncList({
    async load({signal, cursor}) {

      if (cursor) {
        setIsLoading(false);
      }

      // If no cursor is available, then we're loading the first page.
      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
      const res = await fetch(cursor || "https://swapi.py4e.com/api/people/?search=", {signal});
      let json = await res.json();

      setHasMore(json.next !== null);

      return {
        items: json.results,
        cursor: json.next,
      };
    },
  });

  const [loaderRef, scrollerRef] = useInfiniteScroll({hasMore, onLoadMore: list.loadMore});

  return (
    <Table
      isHeaderSticky
      aria-label="Example table with infinite pagination"
      baseRef={scrollerRef}
      bottomContent={
        hasMore ? (
          <div className="flex w-full justify-center">
            <Spinner ref={loaderRef} color="white" />
          </div>
        ) : null
      }
      classNames={{
        base: "max-h-[520px] overflow-scroll",
        table: "min-h-[400px]",
      }}
    >
      <TableHeader>
        <TableColumn key="name">Name</TableColumn>
        <TableColumn key="height">Height</TableColumn>
        <TableColumn key="mass">Mass</TableColumn>
        <TableColumn key="birth_year">Birth year</TableColumn>
      </TableHeader>
      <TableBody
        isLoading={isLoading}
        items={list.items}
        loadingContent={<Spinner color="white" />}
      >
        {(item) => (
          <TableRow key={item.name}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue, Spinner, Button} from "@nextui-org/react";
import {useAsyncList} from "@react-stately/data";

export default function App() {
  const [page, setPage] = React.useState(1);
  const [isLoading, setIsLoading] = React.useState(true);

  let list = useAsyncList({
    async load({signal, cursor}) {
      if (cursor) {
        setPage((prev) => prev + 1);
      }

      // If no cursor is available, then we're loading the first page.
      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
      const res = await fetch(cursor || "https://swapi.py4e.com/api/people/?search=", {signal});
      let json = await res.json();

      if (!cursor) {
        setIsLoading(false);
      }

      return {
        items: json.results,
        cursor: json.next,
      };
    },
  });

  const hasMore = page < 9;

  return (
    <Table
      isHeaderSticky
      aria-label="Example table with client side sorting"
      bottomContent={
        hasMore && !isLoading ? (
          <div className="flex w-full justify-center">
            <Button isDisabled={list.isLoading} variant="flat" onPress={list.loadMore}>
              {list.isLoading && <Spinner color="white" size="sm" />}
              Load More
            </Button>
          </div>
        ) : null
      }
      classNames={{
        base: "max-h-[520px] overflow-scroll",
        table: "min-h-[420px]",
      }}
    >
      <TableHeader>
        <TableColumn key="name">Name</TableColumn>
        <TableColumn key="height">Height</TableColumn>
        <TableColumn key="mass">Mass</TableColumn>
        <TableColumn key="birth_year">Birth year</TableColumn>
      </TableHeader>
      <TableBody
        isLoading={isLoading}
        items={list.items}
        loadingContent={<Spinner label="Loading..." />}
      >
        {(item) => (
          <TableRow key={item.name}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, RadioGroup, Radio} from "@nextui-org/react";

const colors = ["default", "primary", "secondary", "success", "warning", "danger"];

export default function App() {
  const [selectedColor, setSelectedColor] = React.useState("default");

  return (
    <div className="flex flex-col gap-3">
      <Table 
        color={selectedColor}
        selectionMode="multiple" 
        defaultSelectedKeys={["2", "3"]} 
        aria-label="Example static collection table"
      >
        <TableHeader>
          <TableColumn>NAME</TableColumn>
          <TableColumn>ROLE</TableColumn>
          <TableColumn>STATUS</TableColumn>
        </TableHeader>
        <TableBody>
          <TableRow key="1">
            <TableCell>Tony Reichert</TableCell>
            <TableCell>CEO</TableCell>
            <TableCell>Active</TableCell>
          </TableRow>
          <TableRow key="2">
            <TableCell>Zoey Lang</TableCell>
            <TableCell>Technical Lead</TableCell>
            <TableCell>Paused</TableCell>
          </TableRow>
          <TableRow key="3">
            <TableCell>Jane Fisher</TableCell>
            <TableCell>Senior Developer</TableCell>
            <TableCell>Active</TableCell>
          </TableRow>
          <TableRow key="4">
            <TableCell>William Howard</TableCell>
            <TableCell>Community Manager</TableCell>
            <TableCell>Vacation</TableCell>
          </TableRow>
        </TableBody>
      </Table>
      <RadioGroup 
        label="Selection color"
        orientation="horizontal"
        value={selectedColor} 
        onValueChange={setSelectedColor}
      >
        {colors.map((color) => (
          <Radio
            key={color}
            color={color}  
            value={color}
            className="capitalize"
          >
            {color}
          </Radio>  
        ))}
      </RadioGroup>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `export const users = [
  {
    key: "1",
    name: "Tony Reichert",
    role: "CEO",
    status: "Active",
  },
  {
    key: "2",
    name: "Zoey Lang",
    role: "Technical Lead",
    status: "Paused",
  },
  {
    key: "3",
    name: "Jane Fisher",
    role: "Senior Developer",
    status: "Active",
  },
  {
    key: "4",
    name: "William Howard",
    role: "Community Manager",
    status: "Vacation",
  },
  {
    key: "5",
    name: "Emily Collins",
    role: "Marketing Manager",
    status: "Active",
  },
  {
    key: "6",
    name: "Brian Kim",
    role: "Product Manager",
    status: "Active",
  },
  {
    key: "7",
    name: "Laura Thompson",
    role: "UX Designer",
    status: "Active",
  },
  {
    key: "8",
    name: "Michael Stevens",
    role: "Data Analyst",
    status: "Paused",
  },
  {
    key: "9",
    name: "Sophia Nguyen",
    role: "Quality Assurance",
    status: "Active",
  },
  {
    key: "10",
    name: "James Wilson",
    role: "Front-end Developer",
    status: "Vacation",
  },
  {
    key: "11",
    name: "Ava Johnson",
    role: "Back-end Developer",
    status: "Active",
  },
  {
    key: "12",
    name: "Isabella Smith",
    role: "Graphic Designer",
    status: "Active",
  },
  {
    key: "13",
    name: "Oliver Brown",
    role: "Content Writer",
    status: "Paused",
  },
  {
    key: "14",
    name: "Lucas Jones",
    role: "Project Manager",
    status: "Active",
  },
  {
    key: "15",
    name: "Grace Davis",
    role: "HR Manager",
    status: "Active",
  },
  {
    key: "16",
    name: "Elijah Garcia",
    role: "Network Administrator",
    status: "Active",
  },
  {
    key: "17",
    name: "Emma Martinez",
    role: "Accountant",
    status: "Vacation",
  },
  {
    key: "18",
    name: "Benjamin Lee",
    role: "Operations Manager",
    status: "Active",
  },
  {
    key: "19",
    name: "Mia Hernandez",
    role: "Sales Manager",
    status: "Paused",
  },
  {
    key: "20",
    name: "Daniel Lewis",
    role: "DevOps Engineer",
    status: "Active",
  },
  {
    key: "21",
    name: "Amelia Clark",
    role: "Social Media Specialist",
    status: "Active",
  },
  {
    key: "22",
    name: "Jackson Walker",
    role: "Customer Support",
    status: "Active",
  },
  {
    key: "23",
    name: "Henry Hall",
    role: "Security Analyst",
    status: "Active",
  },
  {
    key: "24",
    name: "Charlotte Young",
    role: "PR Specialist",
    status: "Paused",
  },
  {
    key: "25",
    name: "Liam King",
    role: "Mobile App Developer",
    status: "Active",
  },
];`;

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, getKeyValue} from "@nextui-org/react";
import {users} from "./data";

export default function App() {
  const [page, setPage] = React.useState(1);
  const rowsPerPage = 4;

  const pages = Math.ceil(users.length / rowsPerPage);

  const items = React.useMemo(() => {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    return users.slice(start, end);
  }, [page, users]);

  return (
    <Table 
      aria-label="Example table with client side pagination"
      bottomContent={
        <div className="flex w-full justify-center">
          <Pagination
            isCompact
            showControls
            showShadow
            color="secondary"
            page={page}
            total={pages}
            onChange={(page) => setPage(page)}
          />
        </div>
      }
      classNames={{
        wrapper: "min-h-[222px]",
      }}
    >
      <TableHeader>
        <TableColumn key="name">NAME</TableColumn>
        <TableColumn key="role">ROLE</TableColumn>
        <TableColumn key="status">STATUS</TableColumn>
      </TableHeader>
      <TableBody items={items}>
        {(item) => (
          <TableRow key={item.name}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue, Radio, RadioGroup} from "@nextui-org/react";

const rows = [
  {
    key: "1",
    name: "Tony Reichert",
    role: "CEO",
    status: "Active",
  },
  {
    key: "2",
    name: "Zoey Lang",
    role: "Technical Lead",
    status: "Paused",
  },
  {
    key: "3",
    name: "Jane Fisher",
    role: "Senior Developer",
    status: "Active",
  },
  {
    key: "4",
    name: "William Howard",
    role: "Community Manager",
    status: "Vacation",
  },
];

const columns = [
  {
    key: "name",
    label: "NAME",
  },
  {
    key: "role",
    label: "ROLE",
  },
  {
    key: "status",
    label: "STATUS",
  },
];

export default function App() {
  const [selectionBehavior, setSelectionBehavior] = React.useState("toggle");

  return (
    <div className="flex flex-col gap-3">
      <Table 
        aria-label="Rows actions table example with dynamic content"
        selectionMode="multiple"
        selectionBehavior={selectionBehavior}
        onRowAction={(key) => alert(\`Opening item \${key}...\`)}
      >
        <TableHeader columns={columns}>
          {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}
        </TableHeader>
        <TableBody items={rows}>
          {(item) => (
            <TableRow key={item.key}>
              {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
            </TableRow>
          )}
        </TableBody>
      </Table>
      <RadioGroup 
        label="Selection Behavior"
        orientation="horizontal"
        value={selectionBehavior}
        onValueChange={setSelectionBehavior}
      >
        <Radio value="toggle">Toggle</Radio>
        <Radio value="replace">Replace</Radio>
      </RadioGroup>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue, Radio, RadioGroup} from "@nextui-org/react";

const rows = [
  {
    key: "1",
    name: "Tony Reichert",
    role: "CEO",
    status: "Active",
  },
  {
    key: "2",
    name: "Zoey Lang",
    role: "Technical Lead",
    status: "Paused",
  },
  {
    key: "3",
    name: "Jane Fisher",
    role: "Senior Developer",
    status: "Active",
  },
  {
    key: "4",
    name: "William Howard",
    role: "Community Manager",
    status: "Vacation",
  },
];

const columns = [
  {
    key: "name",
    label: "NAME",
  },
  {
    key: "role",
    label: "ROLE",
  },
  {
    key: "status",
    label: "STATUS",
  },
];

export default function App() {
  const [selectionBehavior, setSelectionBehavior] = React.useState("toggle");

  return (
    <div className="flex flex-col gap-3">
      <Table 
        aria-label="Selection behavior table example with dynamic content"
        selectionMode="multiple"
        selectionBehavior={selectionBehavior}
      >
        <TableHeader columns={columns}>
          {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}
        </TableHeader>
        <TableBody items={rows}>
          {(item) => (
            <TableRow key={item.key}>
              {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
            </TableRow>
          )}
        </TableBody>
      </Table>
      <RadioGroup 
        label="Selection Behavior"
        orientation="horizontal"
        value={selectionBehavior}
        onValueChange={setSelectionBehavior}
      >
        <Radio value="toggle">Toggle</Radio>
        <Radio value="replace">Replace</Radio>
      </RadioGroup>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, RadioGroup, Radio} from "@nextui-org/react";

const colors = ["default", "primary", "secondary", "success", "warning", "danger"];

export default function App() {
  const [selectedColor, setSelectedColor] = React.useState("default");

  return (
    <div className="flex flex-col gap-3">
      <Table 
        color={selectedColor}
        selectionMode="single" 
        defaultSelectedKeys={["2"]} 
        aria-label="Example static collection table"
      >
        <TableHeader>
          <TableColumn>NAME</TableColumn>
          <TableColumn>ROLE</TableColumn>
          <TableColumn>STATUS</TableColumn>
        </TableHeader>
        <TableBody>
          <TableRow key="1">
            <TableCell>Tony Reichert</TableCell>
            <TableCell>CEO</TableCell>
            <TableCell>Active</TableCell>
          </TableRow>
          <TableRow key="2">
            <TableCell>Zoey Lang</TableCell>
            <TableCell>Technical Lead</TableCell>
            <TableCell>Paused</TableCell>
          </TableRow>
          <TableRow key="3">
            <TableCell>Jane Fisher</TableCell>
            <TableCell>Senior Developer</TableCell>
            <TableCell>Active</TableCell>
          </TableRow>
          <TableRow key="4">
            <TableCell>William Howard</TableCell>
            <TableCell>Community Manager</TableCell>
            <TableCell>Vacation</TableCell>
          </TableRow>
        </TableBody>
      </Table>
      <RadioGroup 
        label="Selection color"
        orientation="horizontal"
        value={selectedColor} 
        onValueChange={setSelectedColor}
      >
        {colors.map((color) => (
          <Radio
            key={color}
            color={color}  
            value={color}
            className="capitalize"
          >
            {color}
          </Radio>  
        ))}
      </RadioGroup>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue, Spinner} from "@nextui-org/react";
import {useAsyncList} from "@react-stately/data";

export default function App() {
  const [isLoading, setIsLoading] = React.useState(true);

  let list = useAsyncList({
    async load({signal}) {
      let res = await fetch('https://swapi.py4e.com/api/people/?search', {
        signal,
      });
      let json = await res.json();
      setIsLoading(false);

      return {
        items: json.results,
      };
    },
    async sort({items, sortDescriptor}) {
      return {
        items: items.sort((a, b) => {
          let first = a[sortDescriptor.column];
          let second = b[sortDescriptor.column];
          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;

          if (sortDescriptor.direction === "descending") {
            cmp *= -1;
          }

          return cmp;
        }),
      };
    },
  });

  return (
    <Table
      aria-label="Example table with client side sorting"
      sortDescriptor={list.sortDescriptor}
      onSortChange={list.sort}
      classNames={{
        table: "min-h-[400px]",
      }}
    >
      <TableHeader>
        <TableColumn key="name" allowsSorting>
          Name
        </TableColumn>
        <TableColumn key="height" allowsSorting>
          Height
        </TableColumn>
        <TableColumn key="mass" allowsSorting>
          Mass
        </TableColumn>
        <TableColumn key="birth_year" allowsSorting>
          Birth year
        </TableColumn>
      </TableHeader>
      <TableBody 
        items={list.items} 
        isLoading={isLoading}
        loadingContent={<Spinner label="Loading..." />}
      >
        {(item) => (
          <TableRow key={item.name}>
            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from "@nextui-org/react";

export default function App() {
  return (
    <Table isStriped aria-label="Example static collection table">
      <TableHeader>
        <TableColumn>NAME</TableColumn>
        <TableColumn>ROLE</TableColumn>
        <TableColumn>STATUS</TableColumn>
      </TableHeader>
      <TableBody>
        <TableRow key="1">
          <TableCell>Tony Reichert</TableCell>
          <TableCell>CEO</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="2">
          <TableCell>Zoey Lang</TableCell>
          <TableCell>Technical Lead</TableCell>
          <TableCell>Paused</TableCell>
        </TableRow>
        <TableRow key="3">
          <TableCell>Jane Fisher</TableCell>
          <TableCell>Senior Developer</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="4">
          <TableCell>William Howard</TableCell>
          <TableCell>Community Manager</TableCell>
          <TableCell>Vacation</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from "@nextui-org/react";

export default function App() {
  return (
    <Table aria-label="Example static collection table">
      <TableHeader>
        <TableColumn>NAME</TableColumn>
        <TableColumn>ROLE</TableColumn>
        <TableColumn>STATUS</TableColumn>
      </TableHeader>
      <TableBody>
        <TableRow key="1">
          <TableCell>Tony Reichert</TableCell>
          <TableCell>CEO</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="2">
          <TableCell>Zoey Lang</TableCell>
          <TableCell>Technical Lead</TableCell>
          <TableCell>Paused</TableCell>
        </TableRow>
        <TableRow key="3">
          <TableCell>Jane Fisher</TableCell>
          <TableCell>Senior Developer</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="4">
          <TableCell>William Howard</TableCell>
          <TableCell>Community Manager</TableCell>
          <TableCell>Vacation</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const data = `const columns = [
  {name: "ID", uid: "id", sortable: true},
  {name: "NAME", uid: "name", sortable: true},
  {name: "AGE", uid: "age", sortable: true},
  {name: "ROLE", uid: "role", sortable: true},
  {name: "TEAM", uid: "team"},
  {name: "EMAIL", uid: "email"},
  {name: "STATUS", uid: "status", sortable: true},
  {name: "ACTIONS", uid: "actions"},
];

const statusOptions = [
  {name: "Active", uid: "active"},
  {name: "Paused", uid: "paused"},
  {name: "Vacation", uid: "vacation"},
];

const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026704d",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?u=a04258114e29026702d",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://i.pravatar.cc/150?u=a048581f4e29026701d",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://i.pravatar.cc/150?u=a092581d4ef9026700d",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "brian.kim@example.com",
    status: "active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29027007d",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e27027008d",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://i.pravatar.cc/150?img=4",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://i.pravatar.cc/150?img=5",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?img=8",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://i.pravatar.cc/150?img=10",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://i.pravatar.cc/150?img=12",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://i.pravatar.cc/150?img=16",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://i.pravatar.cc/150?img=15",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?img=20",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://i.pravatar.cc/150?img=33",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://i.pravatar.cc/150?img=29",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://i.pravatar.cc/150?img=50",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://i.pravatar.cc/150?img=45",
    email: "mia.robinson@example.com",
  },
];

export {columns, users, statusOptions};`;

const dataTs = `const columns = [
  {name: "ID", uid: "id", sortable: true},
  {name: "NAME", uid: "name", sortable: true},
  {name: "AGE", uid: "age", sortable: true},
  {name: "ROLE", uid: "role", sortable: true},
  {name: "TEAM", uid: "team"},
  {name: "EMAIL", uid: "email"},
  {name: "STATUS", uid: "status", sortable: true},
  {name: "ACTIONS", uid: "actions"},
];

const statusOptions = [
  {name: "Active", uid: "active"},
  {name: "Paused", uid: "paused"},
  {name: "Vacation", uid: "vacation"},
];

const users = [
  {
    id: 1,
    name: "Tony Reichert",
    role: "CEO",
    team: "Management",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "tony.reichert@example.com",
  },
  {
    id: 2,
    name: "Zoey Lang",
    role: "Tech Lead",
    team: "Development",
    status: "paused",
    age: "25",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026704d",
    email: "zoey.lang@example.com",
  },
  {
    id: 3,
    name: "Jane Fisher",
    role: "Sr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?u=a04258114e29026702d",
    email: "jane.fisher@example.com",
  },
  {
    id: 4,
    name: "William Howard",
    role: "C.M.",
    team: "Marketing",
    status: "vacation",
    age: "28",
    avatar: "https://i.pravatar.cc/150?u=a048581f4e29026701d",
    email: "william.howard@example.com",
  },
  {
    id: 5,
    name: "Kristen Copper",
    role: "S. Manager",
    team: "Sales",
    status: "active",
    age: "24",
    avatar: "https://i.pravatar.cc/150?u=a092581d4ef9026700d",
    email: "kristen.cooper@example.com",
  },
  {
    id: 6,
    name: "Brian Kim",
    role: "P. Manager",
    team: "Management",
    age: "29",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
    email: "brian.kim@example.com",
    status: "Active",
  },
  {
    id: 7,
    name: "Michael Hunt",
    role: "Designer",
    team: "Design",
    status: "paused",
    age: "27",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e29027007d",
    email: "michael.hunt@example.com",
  },
  {
    id: 8,
    name: "Samantha Brooks",
    role: "HR Manager",
    team: "HR",
    status: "active",
    age: "31",
    avatar: "https://i.pravatar.cc/150?u=a042581f4e27027008d",
    email: "samantha.brooks@example.com",
  },
  {
    id: 9,
    name: "Frank Harrison",
    role: "F. Manager",
    team: "Finance",
    status: "vacation",
    age: "33",
    avatar: "https://i.pravatar.cc/150?img=4",
    email: "frank.harrison@example.com",
  },
  {
    id: 10,
    name: "Emma Adams",
    role: "Ops Manager",
    team: "Operations",
    status: "active",
    age: "35",
    avatar: "https://i.pravatar.cc/150?img=5",
    email: "emma.adams@example.com",
  },
  {
    id: 11,
    name: "Brandon Stevens",
    role: "Jr. Dev",
    team: "Development",
    status: "active",
    age: "22",
    avatar: "https://i.pravatar.cc/150?img=8",
    email: "brandon.stevens@example.com",
  },
  {
    id: 12,
    name: "Megan Richards",
    role: "P. Manager",
    team: "Product",
    status: "paused",
    age: "28",
    avatar: "https://i.pravatar.cc/150?img=10",
    email: "megan.richards@example.com",
  },
  {
    id: 13,
    name: "Oliver Scott",
    role: "S. Manager",
    team: "Security",
    status: "active",
    age: "37",
    avatar: "https://i.pravatar.cc/150?img=12",
    email: "oliver.scott@example.com",
  },
  {
    id: 14,
    name: "Grace Allen",
    role: "M. Specialist",
    team: "Marketing",
    status: "active",
    age: "30",
    avatar: "https://i.pravatar.cc/150?img=16",
    email: "grace.allen@example.com",
  },
  {
    id: 15,
    name: "Noah Carter",
    role: "IT Specialist",
    team: "I. Technology",
    status: "paused",
    age: "31",
    avatar: "https://i.pravatar.cc/150?img=15",
    email: "noah.carter@example.com",
  },
  {
    id: 16,
    name: "Ava Perez",
    role: "Manager",
    team: "Sales",
    status: "active",
    age: "29",
    avatar: "https://i.pravatar.cc/150?img=20",
    email: "ava.perez@example.com",
  },
  {
    id: 17,
    name: "Liam Johnson",
    role: "Data Analyst",
    team: "Analysis",
    status: "active",
    age: "28",
    avatar: "https://i.pravatar.cc/150?img=33",
    email: "liam.johnson@example.com",
  },
  {
    id: 18,
    name: "Sophia Taylor",
    role: "QA Analyst",
    team: "Testing",
    status: "active",
    age: "27",
    avatar: "https://i.pravatar.cc/150?img=29",
    email: "sophia.taylor@example.com",
  },
  {
    id: 19,
    name: "Lucas Harris",
    role: "Administrator",
    team: "Information Technology",
    status: "paused",
    age: "32",
    avatar: "https://i.pravatar.cc/150?img=50",
    email: "lucas.harris@example.com",
  },
  {
    id: 20,
    name: "Mia Robinson",
    role: "Coordinator",
    team: "Operations",
    status: "active",
    age: "26",
    avatar: "https://i.pravatar.cc/150?img=45",
    email: "mia.robinson@example.com",
  },
];

export {columns, users, statusOptions};`;

const types = `import {SVGProps} from "react";

export type IconSvgProps = SVGProps<SVGSVGElement> & {
  size?: number;
};`;

const utils = `export function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}`;

const PlusIcon = `export const PlusIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <g
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    >
      <path d="M6 12h12" />
      <path d="M12 18V6" />
    </g>
  </svg>
);`;

const VerticalDotsIcon = `export const VerticalDotsIcon = ({size = 24, width, height, ...props}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
      fill="currentColor"
    />
  </svg>
);`;

const SearchIcon = `export const SearchIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const ChevronDownIcon = `export const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...otherProps}
  >
    <path
      d="m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={strokeWidth}
    />
  </svg>
);`;

const utilsTs = `export function capitalize(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}`;

const PlusIconTs = `import {IconSvgProps} from "./types";

export const PlusIcon = ({size = 24, width, height, ...props}: IconSvgProps) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <g
      fill="none"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    >
      <path d="M6 12h12" />
      <path d="M12 18V6" />
    </g>
  </svg>
);`;

const VerticalDotsIconTs = `import {IconSvgProps} from "./types";

export const VerticalDotsIcon = ({size = 24, width, height, ...props}: IconSvgProps) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={size || height}
    role="presentation"
    viewBox="0 0 24 24"
    width={size || width}
    {...props}
  >
    <path
      d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
      fill="currentColor"
    />
  </svg>
);`;

const SearchIconTs = `import {IconSvgProps} from "./types";

export const SearchIcon = (props: IconSvgProps) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
    />
  </svg>
);`;

const ChevronDownIconTs = `import {IconSvgProps} from "./types";

export const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}: IconSvgProps) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...otherProps}
  >
    <path
      d="m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={strokeWidth}
    />
  </svg>
);`;

const App = `import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Button,
  DropdownTrigger,
  Dropdown,
  DropdownMenu,
  DropdownItem,
  Chip,
  User,
  Pagination,
} from "@nextui-org/react";
import {PlusIcon} from "./PlusIcon";
import {VerticalDotsIcon} from "./VerticalDotsIcon";
import {SearchIcon} from "./SearchIcon";
import {ChevronDownIcon} from "./ChevronDownIcon";
import {columns, users, statusOptions} from "./data";
import {capitalize} from "./utils";

const statusColorMap = {
  active: "success",
  paused: "danger",
  vacation: "warning",
};

const INITIAL_VISIBLE_COLUMNS = ["name", "role", "status", "actions"];

export default function App() {
  const [filterValue, setFilterValue] = React.useState("");
  const [selectedKeys, setSelectedKeys] = React.useState(new Set([]));
  const [visibleColumns, setVisibleColumns] = React.useState(new Set(INITIAL_VISIBLE_COLUMNS));
  const [statusFilter, setStatusFilter] = React.useState("all");
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  const [sortDescriptor, setSortDescriptor] = React.useState({
    column: "age",
    direction: "ascending",
  });
  const [page, setPage] = React.useState(1);

  const hasSearchFilter = Boolean(filterValue);

  const headerColumns = React.useMemo(() => {
    if (visibleColumns === "all") return columns;

    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));
  }, [visibleColumns]);

  const filteredItems = React.useMemo(() => {
    let filteredUsers = [...users];

    if (hasSearchFilter) {
      filteredUsers = filteredUsers.filter((user) =>
        user.name.toLowerCase().includes(filterValue.toLowerCase()),
      );
    }
    if (statusFilter !== "all" && Array.from(statusFilter).length !== statusOptions.length) {
      filteredUsers = filteredUsers.filter((user) =>
        Array.from(statusFilter).includes(user.status),
      );
    }

    return filteredUsers;
  }, [users, filterValue, statusFilter]);

  const pages = Math.ceil(filteredItems.length / rowsPerPage);

  const items = React.useMemo(() => {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    return filteredItems.slice(start, end);
  }, [page, filteredItems, rowsPerPage]);

  const sortedItems = React.useMemo(() => {
    return [...items].sort((a, b) => {
      const first = a[sortDescriptor.column];
      const second = b[sortDescriptor.column];
      const cmp = first < second ? -1 : first > second ? 1 : 0;

      return sortDescriptor.direction === "descending" ? -cmp : cmp;
    });
  }, [sortDescriptor, items]);

  const renderCell = React.useCallback((user, columnKey) => {
    const cellValue = user[columnKey];

    switch (columnKey) {
      case "name":
        return (
          <User
            avatarProps={{radius: "lg", src: user.avatar}}
            description={user.email}
            name={cellValue}
          >
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-small capitalize">{cellValue}</p>
            <p className="text-bold text-tiny capitalize text-default-400">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip className="capitalize" color={statusColorMap[user.status]} size="sm" variant="flat">
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex justify-end items-center gap-2">
            <Dropdown>
              <DropdownTrigger>
                <Button isIconOnly size="sm" variant="light">
                  <VerticalDotsIcon className="text-default-300" />
                </Button>
              </DropdownTrigger>
              <DropdownMenu>
                <DropdownItem>View</DropdownItem>
                <DropdownItem>Edit</DropdownItem>
                <DropdownItem>Delete</DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);

  const onNextPage = React.useCallback(() => {
    if (page < pages) {
      setPage(page + 1);
    }
  }, [page, pages]);

  const onPreviousPage = React.useCallback(() => {
    if (page > 1) {
      setPage(page - 1);
    }
  }, [page]);

  const onRowsPerPageChange = React.useCallback((e) => {
    setRowsPerPage(Number(e.target.value));
    setPage(1);
  }, []);

  const onSearchChange = React.useCallback((value) => {
    if (value) {
      setFilterValue(value);
      setPage(1);
    } else {
      setFilterValue("");
    }
  }, []);

  const onClear = React.useCallback(()=>{
    setFilterValue("")
    setPage(1)
  },[])

  const topContent = React.useMemo(() => {
    return (
      <div className="flex flex-col gap-4">
        <div className="flex justify-between gap-3 items-end">
          <Input
            isClearable
            className="w-full sm:max-w-[44%]"
            placeholder="Search by name..."
            startContent={<SearchIcon />}
            value={filterValue}
            onClear={() => onClear()}
            onValueChange={onSearchChange}
          />
          <div className="flex gap-3">
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button endContent={<ChevronDownIcon className="text-small" />} variant="flat">
                  Status
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={statusFilter}
                selectionMode="multiple"
                onSelectionChange={setStatusFilter}
              >
                {statusOptions.map((status) => (
                  <DropdownItem key={status.uid} className="capitalize">
                    {capitalize(status.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button endContent={<ChevronDownIcon className="text-small" />} variant="flat">
                  Columns
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={visibleColumns}
                selectionMode="multiple"
                onSelectionChange={setVisibleColumns}
              >
                {columns.map((column) => (
                  <DropdownItem key={column.uid} className="capitalize">
                    {capitalize(column.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Button color="primary" endContent={<PlusIcon />}>
              Add New
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-default-400 text-small">Total {users.length} users</span>
          <label className="flex items-center text-default-400 text-small">
            Rows per page:
            <select
              className="bg-transparent outline-none text-default-400 text-small"
              onChange={onRowsPerPageChange}
            >
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="15">15</option>
            </select>
          </label>
        </div>
      </div>
    );
  }, [
    filterValue,
    statusFilter,
    visibleColumns,
    onRowsPerPageChange,
    users.length,
    onSearchChange,
    hasSearchFilter,
  ]);

  const bottomContent = React.useMemo(() => {
    return (
      <div className="py-2 px-2 flex justify-between items-center">
        <span className="w-[30%] text-small text-default-400">
          {selectedKeys === "all"
            ? "All items selected"
            : \`\${selectedKeys.size} of \${filteredItems.length} selected\`}
        </span>
        <Pagination
          isCompact
          showControls
          showShadow
          color="primary"
          page={page}
          total={pages}
          onChange={setPage}
        />
        <div className="hidden sm:flex w-[30%] justify-end gap-2">
          <Button isDisabled={pages === 1} size="sm" variant="flat" onPress={onPreviousPage}>
            Previous
          </Button>
          <Button isDisabled={pages === 1} size="sm" variant="flat" onPress={onNextPage}>
            Next
          </Button>
        </div>
      </div>
    );
  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);

  return (
    <Table
      aria-label="Example table with custom cells, pagination and sorting"
      isHeaderSticky
      bottomContent={bottomContent}
      bottomContentPlacement="outside"
      classNames={{
        wrapper: "max-h-[382px]",
      }}
      selectedKeys={selectedKeys}
      selectionMode="multiple"
      sortDescriptor={sortDescriptor}
      topContent={topContent}
      topContentPlacement="outside"
      onSelectionChange={setSelectedKeys}
      onSortChange={setSortDescriptor}
    >
      <TableHeader columns={headerColumns}>
        {(column) => (
          <TableColumn
            key={column.uid}
            align={column.uid === "actions" ? "center" : "start"}
            allowsSorting={column.sortable}
          >
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody emptyContent={"No users found"} items={sortedItems}>
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const AppTs = `import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Input,
  Button,
  DropdownTrigger,
  Dropdown,
  DropdownMenu,
  DropdownItem,
  Chip,
  User,
  Pagination,
  Selection,
  ChipProps,
  SortDescriptor
} from "@nextui-org/react";
import {PlusIcon} from "./PlusIcon";
import {VerticalDotsIcon} from "./VerticalDotsIcon";
import {ChevronDownIcon} from "./ChevronDownIcon";
import {SearchIcon} from "./SearchIcon";
import {columns, users, statusOptions} from "./data";
import {capitalize} from "./utils";

const statusColorMap: Record<string, ChipProps["color"]> = {
  active: "success",
  paused: "danger",
  vacation: "warning",
};

const INITIAL_VISIBLE_COLUMNS = ["name", "role", "status", "actions"];

type User = typeof users[0];

export default function App() {
  const [filterValue, setFilterValue] = React.useState("");
  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]));
  const [visibleColumns, setVisibleColumns] = React.useState<Selection>(new Set(INITIAL_VISIBLE_COLUMNS));
  const [statusFilter, setStatusFilter] = React.useState<Selection>("all");
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({
    column: "age",
    direction: "ascending",
  });

  const [page, setPage] = React.useState(1);

  const hasSearchFilter = Boolean(filterValue);

  const headerColumns = React.useMemo(() => {
    if (visibleColumns === "all") return columns;

    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));
  }, [visibleColumns]);

  const filteredItems = React.useMemo(() => {
    let filteredUsers = [...users];

    if (hasSearchFilter) {
      filteredUsers = filteredUsers.filter((user) =>
        user.name.toLowerCase().includes(filterValue.toLowerCase()),
      );
    }
    if (statusFilter !== "all" && Array.from(statusFilter).length !== statusOptions.length) {
      filteredUsers = filteredUsers.filter((user) =>
        Array.from(statusFilter).includes(user.status),
      );
    }

    return filteredUsers;
  }, [users, filterValue, statusFilter]);

  const pages = Math.ceil(filteredItems.length / rowsPerPage);

  const items = React.useMemo(() => {
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    return filteredItems.slice(start, end);
  }, [page, filteredItems, rowsPerPage]);

  const sortedItems = React.useMemo(() => {
    return [...items].sort((a: User, b: User) => {
      const first = a[sortDescriptor.column as keyof User] as number;
      const second = b[sortDescriptor.column as keyof User] as number;
      const cmp = first < second ? -1 : first > second ? 1 : 0;

      return sortDescriptor.direction === "descending" ? -cmp : cmp;
    });
  }, [sortDescriptor, items]);

  const renderCell = React.useCallback((user: User, columnKey: React.Key) => {
    const cellValue = user[columnKey as keyof User];

    switch (columnKey) {
      case "name":
        return (
          <User
            avatarProps={{radius: "lg", src: user.avatar}}
            description={user.email}
            name={cellValue}
          >
            {user.email}
          </User>
        );
      case "role":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-small capitalize">{cellValue}</p>
            <p className="text-bold text-tiny capitalize text-default-400">{user.team}</p>
          </div>
        );
      case "status":
        return (
          <Chip className="capitalize" color={statusColorMap[user.status]} size="sm" variant="flat">
            {cellValue}
          </Chip>
        );
      case "actions":
        return (
          <div className="relative flex justify-end items-center gap-2">
            <Dropdown>
              <DropdownTrigger>
                <Button isIconOnly size="sm" variant="light">
                  <VerticalDotsIcon className="text-default-300" />
                </Button>
              </DropdownTrigger>
              <DropdownMenu>
                <DropdownItem>View</DropdownItem>
                <DropdownItem>Edit</DropdownItem>
                <DropdownItem>Delete</DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </div>
        );
      default:
        return cellValue;
    }
  }, []);

  const onNextPage = React.useCallback(() => {
    if (page < pages) {
      setPage(page + 1);
    }
  }, [page, pages]);

  const onPreviousPage = React.useCallback(() => {
    if (page > 1) {
      setPage(page - 1);
    }
  }, [page]);

  const onRowsPerPageChange = React.useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setRowsPerPage(Number(e.target.value));
    setPage(1);
  }, []);

  const onSearchChange = React.useCallback((value?: string) => {
    if (value) {
      setFilterValue(value);
      setPage(1);
    } else {
      setFilterValue("");
    }
  }, []);

  const onClear = React.useCallback(()=>{
    setFilterValue("")
    setPage(1)
  },[])

  const topContent = React.useMemo(() => {
    return (
      <div className="flex flex-col gap-4">
        <div className="flex justify-between gap-3 items-end">
          <Input
            isClearable
            className="w-full sm:max-w-[44%]"
            placeholder="Search by name..."
            startContent={<SearchIcon />}
            value={filterValue}
            onClear={() => onClear()}
            onValueChange={onSearchChange}
          />
          <div className="flex gap-3">
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button endContent={<ChevronDownIcon className="text-small" />} variant="flat">
                  Status
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={statusFilter}
                selectionMode="multiple"
                onSelectionChange={setStatusFilter}
              >
                {statusOptions.map((status) => (
                  <DropdownItem key={status.uid} className="capitalize">
                    {capitalize(status.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Dropdown>
              <DropdownTrigger className="hidden sm:flex">
                <Button endContent={<ChevronDownIcon className="text-small" />} variant="flat">
                  Columns
                </Button>
              </DropdownTrigger>
              <DropdownMenu
                disallowEmptySelection
                aria-label="Table Columns"
                closeOnSelect={false}
                selectedKeys={visibleColumns}
                selectionMode="multiple"
                onSelectionChange={setVisibleColumns}
              >
                {columns.map((column) => (
                  <DropdownItem key={column.uid} className="capitalize">
                    {capitalize(column.name)}
                  </DropdownItem>
                ))}
              </DropdownMenu>
            </Dropdown>
            <Button color="primary" endContent={<PlusIcon />}>
              Add New
            </Button>
          </div>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-default-400 text-small">Total {users.length} users</span>
          <label className="flex items-center text-default-400 text-small">
            Rows per page:
            <select
              className="bg-transparent outline-none text-default-400 text-small"
              onChange={onRowsPerPageChange}
            >
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="15">15</option>
            </select>
          </label>
        </div>
      </div>
    );
  }, [
    filterValue,
    statusFilter,
    visibleColumns,
    onSearchChange,
    onRowsPerPageChange,
    users.length,
    hasSearchFilter,
  ]);

  const bottomContent = React.useMemo(() => {
    return (
      <div className="py-2 px-2 flex justify-between items-center">
        <span className="w-[30%] text-small text-default-400">
          {selectedKeys === "all"
            ? "All items selected"
            : \`\${selectedKeys.size} of \${filteredItems.length} selected\`}
        </span>
        <Pagination
          isCompact
          showControls
          showShadow
          color="primary"
          page={page}
          total={pages}
          onChange={setPage}
        />
        <div className="hidden sm:flex w-[30%] justify-end gap-2">
          <Button isDisabled={pages === 1} size="sm" variant="flat" onPress={onPreviousPage}>
            Previous
          </Button>
          <Button isDisabled={pages === 1} size="sm" variant="flat" onPress={onNextPage}>
            Next
          </Button>
        </div>
      </div>
    );
  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);

  return (
    <Table
      aria-label="Example table with custom cells, pagination and sorting"
      isHeaderSticky
      bottomContent={bottomContent}
      bottomContentPlacement="outside"
      classNames={{
        wrapper: "max-h-[382px]",
      }}
      selectedKeys={selectedKeys}
      selectionMode="multiple"
      sortDescriptor={sortDescriptor}
      topContent={topContent}
      topContentPlacement="outside"
      onSelectionChange={setSelectedKeys}
      onSortChange={setSortDescriptor}
    >
      <TableHeader columns={headerColumns}>
        {(column) => (
          <TableColumn
            key={column.uid}
            align={column.uid === "actions" ? "center" : "start"}
            allowsSorting={column.sortable}
          >
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody emptyContent={"No users found"} items={sortedItems}>
        {(item) => (
          <TableRow key={item.id}>
            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
  "/data.js": data,
  "/utils.js": utils,
  "/PlusIcon.jsx": PlusIcon,
  "/SearchIcon.jsx": SearchIcon,
  "/ChevronDownIcon.jsx": ChevronDownIcon,
  "/VerticalDotsIcon.jsx": VerticalDotsIcon,
};

const reactTs = {
  "/App.tsx": AppTs,
  "/types.ts": types,
  "/data.ts": dataTs,
  "/utils.ts": utilsTs,
  "/PlusIcon.tsx": PlusIconTs,
  "/VerticalDotsIcon.tsx": VerticalDotsIconTs,
  "/SearchIcon.tsx": SearchIconTs,
  "/ChevronDownIcon.tsx": ChevronDownIconTs,
};

export default {
  ...react,
  ...reactTs,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from "@nextui-org/react";

export default function App() {
  return (
    <Table hideHeader aria-label="Example static collection table">
      <TableHeader>
        <TableColumn>NAME</TableColumn>
        <TableColumn>ROLE</TableColumn>
        <TableColumn>STATUS</TableColumn>
      </TableHeader>
      <TableBody>
        <TableRow key="1">
          <TableCell>Tony Reichert</TableCell>
          <TableCell>CEO</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="2">
          <TableCell>Zoey Lang</TableCell>
          <TableCell>Technical Lead</TableCell>
          <TableCell>Paused</TableCell>
        </TableRow>
        <TableRow key="3">
          <TableCell>Jane Fisher</TableCell>
          <TableCell>Senior Developer</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="4">
          <TableCell>William Howard</TableCell>
          <TableCell>Community Manager</TableCell>
          <TableCell>Vacation</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from "@nextui-org/react";

export default function App() {
  return (
    <Table removeWrapper aria-label="Example static collection table">
      <TableHeader>
        <TableColumn>NAME</TableColumn>
        <TableColumn>ROLE</TableColumn>
        <TableColumn>STATUS</TableColumn>
      </TableHeader>
      <TableBody>
        <TableRow key="1">
          <TableCell>Tony Reichert</TableCell>
          <TableCell>CEO</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="2">
          <TableCell>Zoey Lang</TableCell>
          <TableCell>Technical Lead</TableCell>
          <TableCell>Paused</TableCell>
        </TableRow>
        <TableRow key="3">
          <TableCell>Jane Fisher</TableCell>
          <TableCell>Senior Developer</TableCell>
          <TableCell>Active</TableCell>
        </TableRow>
        <TableRow key="4">
          <TableCell>William Howard</TableCell>
          <TableCell>Community Manager</TableCell>
          <TableCell>Vacation</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab} from "@nextui-org/react";

export default function App() {
  const colors = [
    "default",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger"
  ];

  return (
    <div className="flex flex-wrap gap-4">
      {colors.map((color) => (
        <Tabs key={color} color={color} aria-label="Tabs colors" radius="full">
          <Tab key="photos" title="Photos"/>
          <Tab key="music" title="Music"/>
          <Tab key="videos" title="Videos"/>
        </Tabs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Card, CardBody, CardHeader} from "@nextui-org/react";

export default function App() {
  const [selected, setSelected] = React.useState("photos");

  return (
    <div className="flex w-full flex-col">
      <Tabs 
        aria-label="Options"         
        selectedKey={selected}
        onSelectionChange={setSelected}
      >
        <Tab key="photos" title="Photos">
          <Card>
            <CardBody>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="music" title="Music">
          <Card>
            <CardBody>
              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="videos" title="Videos">
          <Card>
            <CardBody>
              Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </CardBody>
          </Card>  
        </Tab>
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const GalleryIcon = `export const GalleryIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    fill="none"
    {...props}
  >
    <path d="M2.58078 19.0112L2.56078 19.0312C2.29078 18.4413 2.12078 17.7713 2.05078 17.0312C2.12078 17.7613 2.31078 18.4212 2.58078 19.0112Z" fill="currentColor"/>
    <path d="M9.00109 10.3811C10.3155 10.3811 11.3811 9.31553 11.3811 8.00109C11.3811 6.68666 10.3155 5.62109 9.00109 5.62109C7.68666 5.62109 6.62109 6.68666 6.62109 8.00109C6.62109 9.31553 7.68666 10.3811 9.00109 10.3811Z" fill="currentColor"/>
    <path d="M16.19 2H7.81C4.17 2 2 4.17 2 7.81V16.19C2 17.28 2.19 18.23 2.56 19.03C3.42 20.93 5.26 22 7.81 22H16.19C19.83 22 22 19.83 22 16.19V13.9V7.81C22 4.17 19.83 2 16.19 2ZM20.37 12.5C19.59 11.83 18.33 11.83 17.55 12.5L13.39 16.07C12.61 16.74 11.35 16.74 10.57 16.07L10.23 15.79C9.52 15.17 8.39 15.11 7.59 15.65L3.85 18.16C3.63 17.6 3.5 16.95 3.5 16.19V7.81C3.5 4.99 4.99 3.5 7.81 3.5H16.19C19.01 3.5 20.5 4.99 20.5 7.81V12.61L20.37 12.5Z" fill="currentColor"/>
  </svg>
);`;

const MusicIcon = `export const MusicIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    fill="none"
    {...props}
  >
    <path d="M9.66984 13.9219C8.92984 13.9219 8.33984 14.5219 8.33984 15.2619C8.33984 16.0019 8.93984 16.5919 9.66984 16.5919C10.4098 16.5919 11.0098 15.9919 11.0098 15.2619C11.0098 14.5219 10.4098 13.9219 9.66984 13.9219Z" fill="currentColor"/>
    <path d="M16.19 2H7.81C4.17 2 2 4.17 2 7.81V16.18C2 19.83 4.17 22 7.81 22H16.18C19.82 22 21.99 19.83 21.99 16.19V7.81C22 4.17 19.83 2 16.19 2ZM17.12 9.8C17.12 10.41 16.86 10.95 16.42 11.27C16.14 11.47 15.8 11.58 15.44 11.58C15.23 11.58 15.02 11.54 14.8 11.47L12.51 10.71C12.5 10.71 12.48 10.7 12.47 10.69V15.25C12.47 16.79 11.21 18.05 9.67 18.05C8.13 18.05 6.87 16.79 6.87 15.25C6.87 13.71 8.13 12.45 9.67 12.45C10.16 12.45 10.61 12.59 11.01 12.8V8.63V8.02C11.01 7.41 11.27 6.87 11.71 6.55C12.16 6.23 12.75 6.15 13.33 6.35L15.62 7.11C16.48 7.4 17.13 8.3 17.13 9.2V9.8H17.12Z" fill="currentColor"/>
  </svg>
);`;

const VideoIcon = `export const VideoIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    fill="none"
    {...props}
  >
    <path d="M14.7295 2H9.26953V6.36H14.7295V2Z" fill="currentColor"/>
    <path d="M16.2305 2V6.36H21.8705C21.3605 3.61 19.3305 2.01 16.2305 2Z" fill="currentColor"/>
    <path d="M2 7.85938V16.1894C2 19.8294 4.17 21.9994 7.81 21.9994H16.19C19.83 21.9994 22 19.8294 22 16.1894V7.85938H2ZM14.44 16.1794L12.36 17.3794C11.92 17.6294 11.49 17.7594 11.09 17.7594C10.79 17.7594 10.52 17.6894 10.27 17.5494C9.69 17.2194 9.37 16.5394 9.37 15.6594V13.2594C9.37 12.3794 9.69 11.6994 10.27 11.3694C10.85 11.0294 11.59 11.0894 12.36 11.5394L14.44 12.7394C15.21 13.1794 15.63 13.7994 15.63 14.4694C15.63 15.1394 15.2 15.7294 14.44 16.1794Z" fill="currentColor"/>
    <path d="M7.76891 2C4.66891 2.01 2.63891 3.61 2.12891 6.36H7.76891V2Z" fill="currentColor"/>
  </svg>
);`;

const App = `import {Tabs, Tab, Chip} from "@nextui-org/react";
import {GalleryIcon} from "./GalleryIcon";
import {MusicIcon} from "./MusicIcon";
import {VideoIcon} from "./VideoIcon";

export default function App() {
  return (
    <div className="flex w-full flex-col">
      <Tabs 
        aria-label="Options" 
        color="primary" 
        variant="underlined"
        classNames={{
          tabList: "gap-6 w-full relative rounded-none p-0 border-b border-divider",
          cursor: "w-full bg-[#22d3ee]",
          tab: "max-w-fit px-0 h-12",
          tabContent: "group-data-[selected=true]:text-[#06b6d4]"
        }}
      >
        <Tab
          key="photos"
          title={
            <div className="flex items-center space-x-2">
              <GalleryIcon/>
              <span>Photos</span>
              <Chip size="sm" variant="faded">9</Chip>
            </div>
          }
        />
        <Tab
          key="music"
          title={
            <div className="flex items-center space-x-2">
              <MusicIcon/>
              <span>Music</span>
              <Chip size="sm" variant="faded">3</Chip>
            </div>
          }
        />
        <Tab
          key="videos"
          title={
            <div className="flex items-center space-x-2">
              <VideoIcon/>
              <span>Videos</span>
              <Chip size="sm" variant="faded">1</Chip>
            </div>
          }
        />
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/GalleryIcon.jsx": GalleryIcon,
  "/MusicIcon.jsx": MusicIcon,
  "/VideoIcon.jsx": VideoIcon,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Card, CardBody, CardHeader} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-col">
      <Tabs disabledKeys={["music"]} aria-label="Disabled Options">
        <Tab key="photos" title="Photos">
          <Card>
            <CardBody>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="music" title="Music">
          <Card>
            <CardBody>
              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="videos" title="Videos">
          <Card>
            <CardBody>
              Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </CardBody>
          </Card>  
        </Tab>
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Card, CardBody, CardHeader} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-col">
      <Tabs isDisabled aria-label="Options">
        <Tab key="photos" title="Photos">
          <Card>
            <CardBody>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="music" title="Music">
          <Card>
            <CardBody>
              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="videos" title="Videos">
          <Card>
            <CardBody>
              Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </CardBody>
          </Card>  
        </Tab>
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Card, CardBody, CardHeader} from "@nextui-org/react";

export default function App() {
  let tabs = [
    {
      id: "photos",
      label: "Photos",
      content: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
    },
    {
      id: "music",
      label: "Music",
      content: "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
    },
    {
      id: "videos",
      label: "Videos",
      content: "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
    }
  ];

  return (
    <div className="flex w-full flex-col">
      <Tabs aria-label="Dynamic tabs" items={tabs}>
        {(item) => (
          <Tab key={item.id} title={item.label}>
            <Card>
              <CardBody>
                {item.content}
              </CardBody>
            </Card>  
          </Tab>
        )}
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Input, Link, Button, Card, CardBody, CardHeader} from "@nextui-org/react";

export default function App() {
  const [selected, setSelected] = React.useState("login");

  return (
    <div className="flex flex-col w-full">
      <Card className="max-w-full w-[340px] h-[400px]">
        <CardBody className="overflow-hidden">
          <Tabs
            fullWidth
            size="md"
            aria-label="Tabs form"
            selectedKey={selected}
            onSelectionChange={setSelected}
          >
            <Tab key="login" title="Login">
              <form className="flex flex-col gap-4">
                <Input isRequired label="Email" placeholder="Enter your email" type="email" />
                <Input
                  isRequired
                  label="Password"
                  placeholder="Enter your password"
                  type="password"
                />
                <p className="text-center text-small">
                  Need to create an account?{" "}
                  <Link size="sm" onPress={() => setSelected("sign-up")}>
                    Sign up
                  </Link>
                </p>
                <div className="flex gap-2 justify-end">
                  <Button fullWidth color="primary">
                    Login
                  </Button>
                </div>
              </form>
            </Tab>
            <Tab key="sign-up" title="Sign up">
              <form className="flex flex-col gap-4 h-[300px]">
                <Input isRequired label="Name" placeholder="Enter your name" type="password" />
                <Input isRequired label="Email" placeholder="Enter your email" type="email" />
                <Input
                  isRequired
                  label="Password"
                  placeholder="Enter your password"
                  type="password"
                />
                <p className="text-center text-small">
                  Already have an account?{" "}
                  <Link size="sm" onPress={() => setSelected("login")}>
                    Login
                  </Link>
                </p>
                <div className="flex gap-2 justify-end">
                  <Button fullWidth color="primary">
                    Sign up
                  </Button>
                </div>
              </form>
            </Tab>
          </Tabs>
        </CardBody>
      </Card>
    </div>
  );
}`;

const AppTs = `import {Tabs, Tab, Input, Link, Button, Card, CardBody, CardHeader} from "@nextui-org/react";

export default function App() {
  const [selected, setSelected] = React.useState<React.Key>("login");

  return (
    <div className="flex flex-col w-full">
      <Card className="max-w-full w-[340px] h-[400px]">
        <CardBody className="overflow-hidden">
          <Tabs
            fullWidth
            size="md"
            aria-label="Tabs form"
            selectedKey={selected}
            onSelectionChange={setSelected}
          >
            <Tab key="login" title="Login">
              <form className="flex flex-col gap-4">
                <Input isRequired label="Email" placeholder="Enter your email" type="email" />
                <Input
                  isRequired
                  label="Password"
                  placeholder="Enter your password"
                  type="password"
                />
                <p className="text-center text-small">
                  Need to create an account?{" "}
                  <Link size="sm" onPress={() => setSelected("sign-up")}>
                    Sign up
                  </Link>
                </p>
                <div className="flex gap-2 justify-end">
                  <Button fullWidth color="primary">
                    Login
                  </Button>
                </div>
              </form>
            </Tab>
            <Tab key="sign-up" title="Sign up">
              <form className="flex flex-col gap-4 h-[300px]">
                <Input isRequired label="Name" placeholder="Enter your name" type="password" />
                <Input isRequired label="Email" placeholder="Enter your email" type="email" />
                <Input
                  isRequired
                  label="Password"
                  placeholder="Enter your password"
                  type="password"
                />
                <p className="text-center text-small">
                  Already have an account?{" "}
                  <Link size="sm" onPress={() => setSelected("login")}>
                    Login
                  </Link>
                </p>
                <div className="flex gap-2 justify-end">
                  <Button fullWidth color="primary">
                    Sign up
                  </Button>
                </div>
              </form>
            </Tab>
          </Tabs>
        </CardBody>
      </Card>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

const reactTs = {
  "/App.tsx": AppTs,
};

export default {
  ...react,
  ...reactTs,
};

const GalleryIcon = `export const GalleryIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    fill="none"
    {...props}
  >
    <path d="M2.58078 19.0112L2.56078 19.0312C2.29078 18.4413 2.12078 17.7713 2.05078 17.0312C2.12078 17.7613 2.31078 18.4212 2.58078 19.0112Z" fill="currentColor"/>
    <path d="M9.00109 10.3811C10.3155 10.3811 11.3811 9.31553 11.3811 8.00109C11.3811 6.68666 10.3155 5.62109 9.00109 5.62109C7.68666 5.62109 6.62109 6.68666 6.62109 8.00109C6.62109 9.31553 7.68666 10.3811 9.00109 10.3811Z" fill="currentColor"/>
    <path d="M16.19 2H7.81C4.17 2 2 4.17 2 7.81V16.19C2 17.28 2.19 18.23 2.56 19.03C3.42 20.93 5.26 22 7.81 22H16.19C19.83 22 22 19.83 22 16.19V13.9V7.81C22 4.17 19.83 2 16.19 2ZM20.37 12.5C19.59 11.83 18.33 11.83 17.55 12.5L13.39 16.07C12.61 16.74 11.35 16.74 10.57 16.07L10.23 15.79C9.52 15.17 8.39 15.11 7.59 15.65L3.85 18.16C3.63 17.6 3.5 16.95 3.5 16.19V7.81C3.5 4.99 4.99 3.5 7.81 3.5H16.19C19.01 3.5 20.5 4.99 20.5 7.81V12.61L20.37 12.5Z" fill="currentColor"/>
  </svg>
);`;

const MusicIcon = `export const MusicIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    fill="none"
    {...props}
  >
    <path d="M9.66984 13.9219C8.92984 13.9219 8.33984 14.5219 8.33984 15.2619C8.33984 16.0019 8.93984 16.5919 9.66984 16.5919C10.4098 16.5919 11.0098 15.9919 11.0098 15.2619C11.0098 14.5219 10.4098 13.9219 9.66984 13.9219Z" fill="currentColor"/>
    <path d="M16.19 2H7.81C4.17 2 2 4.17 2 7.81V16.18C2 19.83 4.17 22 7.81 22H16.18C19.82 22 21.99 19.83 21.99 16.19V7.81C22 4.17 19.83 2 16.19 2ZM17.12 9.8C17.12 10.41 16.86 10.95 16.42 11.27C16.14 11.47 15.8 11.58 15.44 11.58C15.23 11.58 15.02 11.54 14.8 11.47L12.51 10.71C12.5 10.71 12.48 10.7 12.47 10.69V15.25C12.47 16.79 11.21 18.05 9.67 18.05C8.13 18.05 6.87 16.79 6.87 15.25C6.87 13.71 8.13 12.45 9.67 12.45C10.16 12.45 10.61 12.59 11.01 12.8V8.63V8.02C11.01 7.41 11.27 6.87 11.71 6.55C12.16 6.23 12.75 6.15 13.33 6.35L15.62 7.11C16.48 7.4 17.13 8.3 17.13 9.2V9.8H17.12Z" fill="currentColor"/>
  </svg>
);`;

const VideoIcon = `export const VideoIcon = (props) => (
  <svg
    aria-hidden="true"
    focusable="false"
    height="24"
    role="presentation"
    viewBox="0 0 24 24"
    width="24"
    fill="none"
    {...props}
  >
    <path d="M14.7295 2H9.26953V6.36H14.7295V2Z" fill="currentColor"/>
    <path d="M16.2305 2V6.36H21.8705C21.3605 3.61 19.3305 2.01 16.2305 2Z" fill="currentColor"/>
    <path d="M2 7.85938V16.1894C2 19.8294 4.17 21.9994 7.81 21.9994H16.19C19.83 21.9994 22 19.8294 22 16.1894V7.85938H2ZM14.44 16.1794L12.36 17.3794C11.92 17.6294 11.49 17.7594 11.09 17.7594C10.79 17.7594 10.52 17.6894 10.27 17.5494C9.69 17.2194 9.37 16.5394 9.37 15.6594V13.2594C9.37 12.3794 9.69 11.6994 10.27 11.3694C10.85 11.0294 11.59 11.0894 12.36 11.5394L14.44 12.7394C15.21 13.1794 15.63 13.7994 15.63 14.4694C15.63 15.1394 15.2 15.7294 14.44 16.1794Z" fill="currentColor"/>
    <path d="M7.76891 2C4.66891 2.01 2.63891 3.61 2.12891 6.36H7.76891V2Z" fill="currentColor"/>
  </svg>
);`;

const App = `import {Tabs, Tab} from "@nextui-org/react";
import {GalleryIcon} from "./GalleryIcon";
import {MusicIcon} from "./MusicIcon";
import {VideoIcon} from "./VideoIcon";

export default function App() {
  return (
    <div className="flex w-full flex-col">
      <Tabs aria-label="Options" color="primary" variant="bordered">
        <Tab
          key="photos"
          title={
            <div className="flex items-center space-x-2">
              <GalleryIcon/>
              <span>Photos</span>
            </div>
          }
        />
        <Tab
          key="music"
          title={
            <div className="flex items-center space-x-2">
              <MusicIcon/>
              <span>Music</span>
            </div>
          }
        />
        <Tab
          key="videos"
          title={
            <div className="flex items-center space-x-2">
              <VideoIcon/>
              <span>Videos</span>
            </div>
          }
        />
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
  "/GalleryIcon.jsx": GalleryIcon,
  "/MusicIcon.jsx": MusicIcon,
  "/VideoIcon.jsx": VideoIcon,
};

export default {
  ...react,
};

import usage from "./usage";
import dynamic from "./dynamic";
import sizes from "./sizes";
import colors from "./colors";
import variants from "./variants";
import radius from "./radius";
import disabled from "./disabled";
import disabledItem from "./disabled-item";
import icons from "./icons";
import form from "./form";
import controlled from "./controlled";
import customStyles from "./custom-styles";
import placement from "./placement";
import vertical from "./vertical";

export const tabsContent = {
  usage,
  dynamic,
  sizes,
  colors,
  variants,
  radius,
  disabled,
  disabledItem,
  icons,
  form,
  controlled,
  customStyles,
  placement,
  vertical,
};

const App = `import {Tabs, Tab, Card, CardBody, RadioGroup, Radio} from "@nextui-org/react";

export default function App() {
  const [placement, setPlacement] = React.useState("top");
  return (
    <div className="flex flex-col px-4">
      <RadioGroup
        className="mb-4"
        label="Placement"
        value={placement}
        onValueChange={(value) => setPlacement(value)}
      >
        <Radio value="top">top</Radio>
        <Radio value="bottom">bottom</Radio>
        <Radio value="start">start</Radio>
        <Radio value="end">end</Radio>
      </RadioGroup>
      <div className="flex w-full flex-col">
        <Tabs aria-label="Options" placement={placement}>
          <Tab key="photos" title="Photos">
            <Card>
              <CardBody>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
              </CardBody>
            </Card>  
          </Tab>
          <Tab key="music" title="Music">
            <Card>
              <CardBody>
                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
              </CardBody>
            </Card>  
          </Tab>
          <Tab key="videos" title="Videos">
            <Card>
              <CardBody>
                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
              </CardBody>
            </Card>  
          </Tab>
        </Tabs>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab} from "@nextui-org/react"; 

export default function App() {
  const radiusList = [
    "full",
    "lg",
    "md",
    "sm",
    "none",
  ];

  return (
    <div className="flex flex-wrap gap-4">
      {radiusList.map((radius) => (
        <Tabs key={radius} radius={radius} aria-label="Tabs radius">
          <Tab key="photos" title="Photos"/>
          <Tab key="music" title="Music"/>
          <Tab key="videos" title="Videos"/>
        </Tabs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab} from "@nextui-org/react";

export default function App() {
  const sizes = [
    "sm",
    "md",
    "lg",
  ];

  return (
    <div className="flex flex-wrap gap-4">
      {sizes.map((size) => (
        <Tabs key={size} size={size} aria-label="Tabs sizes">
          <Tab key="photos" title="Photos"/>
          <Tab key="music" title="Music"/>
          <Tab key="videos" title="Videos"/>
        </Tabs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Card, CardBody} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-col">
      <Tabs aria-label="Options">
        <Tab key="photos" title="Photos">
          <Card>
            <CardBody>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="music" title="Music">
          <Card>
            <CardBody>
              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
            </CardBody>
          </Card>  
        </Tab>
        <Tab key="videos" title="Videos">
          <Card>
            <CardBody>
              Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </CardBody>
          </Card>  
        </Tab>
      </Tabs>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab} from "@nextui-org/react"; 

export default function App() {
  const variants = [
    "solid",
    "underlined",
    "bordered",
    "light",
  ];

  return (
    <div className="flex flex-wrap gap-4">
      {variants.map((variant) => (
        <Tabs key={variant} variant={variant} aria-label="Tabs variants">
          <Tab key="photos" title="Photos"/>
          <Tab key="music" title="Music"/>
          <Tab key="videos" title="Videos"/>
        </Tabs>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tabs, Tab, Card, CardBody, Switch} from "@nextui-org/react";

export default function App() {
  const [isVertical, setIsVertical] = React.useState(true);
  return (
    <div className="flex flex-col px-4">
      <Switch className="mb-4" isSelected={isVertical} onValueChange={setIsVertical}>
        Vertical
      </Switch>
      <div className="flex w-full flex-col">
        <Tabs aria-label="Options" isVertical={isVertical}>
          <Tab key="photos" title="Photos">
            <Card>
              <CardBody>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
              </CardBody>
            </Card>  
          </Tab>
          <Tab key="music" title="Music">
            <Card>
              <CardBody>
                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
              </CardBody>
            </Card>  
          </Tab>
          <Tab key="videos" title="Videos">
            <Card>
              <CardBody>
                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
              </CardBody>
            </Card>  
          </Tab>
        </Tabs>
      </div>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
      <Textarea
        label="Description"
        placeholder="Enter your description (Default autosize)"
      />
      <Textarea
        minRows={2}
        label="Description"
        placeholder="Enter your description (Min rows 2)"
      />
      <Textarea
        maxRows={3}
        label="Description"
        placeholder="Enter your description (Max rows 3)"
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  const [value, setValue] = React.useState("");

  return (
    <div className="w-full flex flex-col gap-2 max-w-[240px]">
      <Textarea
        variant="underlined"
        label="Description"
        labelPlacement="outside"
        placeholder="Enter your description"
        value={value}
        onValueChange={setValue}
      />
      <p className="text-default-500 text-small">Textarea value: {value}</p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      variant="faded"
      label="Description"
      placeholder="Enter your description"
      description="Enter a concise description of your project."
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      label="Description"
      variant="bordered"
      placeholder="Enter your description"
      disableAnimation
      disableAutosize
      classNames={{
        base: "max-w-xs",
        input: "resize-y min-h-[40px]",
      }}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      isDisabled
      label="Description"
      labelPlacement="outside"
      placeholder="Enter your description"
      defaultValue="NextUI is a React UI library that provides a set of accessible, reusable, and beautiful components."
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      isInvalid={true}
      variant="bordered"
      label="Description"
      placeholder="Enter your description"
      defaultValue="NextUI is a React UI library with..."
      errorMessage="The description should be at least 255 characters long."
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import disabled from "./disabled";
import required from "./required";
import readonly from "./readonly";
import autosize from "./autosize";
import variants from "./variants";
import errorMessage from "./error-message";
import description from "./description";
import controlled from "./controlled";
import disableAutosize from "./disable-autosize";

export const textareaContent = {
  usage,
  disabled,
  required,
  readonly,
  autosize,
  variants,
  errorMessage,
  description,
  controlled,
  disableAutosize,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      isReadOnly
      label="Description"
      variant="bordered"
      labelPlacement="outside"
      placeholder="Enter your description"
      defaultValue="NextUI is a React UI library that provides a set of accessible, reusable, and beautiful components."
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      isRequired
      label="Description"
      labelPlacement="outside"
      placeholder="Enter your description"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  return (
    <Textarea
      label="Description"
      placeholder="Enter your description"
      className="max-w-xs"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Textarea} from "@nextui-org/react";

export default function App() {
  const variants = ["flat", "faded", "bordered", "underlined"];

  return (
    <div className="w-full grid grid-cols-12 gap-4">
      {variants.map((variant) => (
        <Textarea
          key={variant}
          variant={variant}
          label="Description"
          labelPlacement="outside"
          placeholder="Enter your description"
          className="col-span-12 md:col-span-6 mb-6 md:mb-0"
        />
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {parseAbsoluteToLocal, Time, ZonedDateTime} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let [value, setValue] = React.useState(parseAbsoluteToLocal("2024-04-08T18:45:22Z"));

  let formatter = useDateFormatter({dateStyle: "short", timeStyle: "long"});

  return (
    <div className="w-full flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <TimeInput label="Time (controlled)" value={value} onChange={setValue} />
        <p className="text-default-500 text-sm">
          {value instanceof ZonedDateTime
            ? (value.toDate && formatter.format(value.toDate())) ||
              (value && value.toString()) ||
              "--"
            : ""}
        </p>
      </div>

      <TimeInput defaultValue={new Time(11, 45)} label="Time (uncontrolled)" />
    </div>
  );
}`;

const AppTs = `import {TimeInput} from "@nextui-org/react";
import type {TimeValue} from "@react-types/datepicker";
import {parseAbsoluteToLocal, Time, ZonedDateTime} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";

export default function App() {
  let [value, setValue] = React.useState<TimeInputValue>(parseAbsoluteToLocal("2024-04-08T18:45:22Z"));

  let formatter = useDateFormatter({dateStyle: "short", timeStyle: "long"});

  return (
    <div className="w-full flex flex-row gap-2">
      <div className="w-full flex flex-col gap-y-2">
        <TimeInput label="Time (controlled)" value={value} onChange={setValue} />
        <p className="text-default-500 text-sm">
          {value instanceof ZonedDateTime
            ? (value.toDate && formatter.format(value.toDate())) ||
              (value && value.toString()) ||
              "--"
            : ""}
        </p>
      </div>

      <TimeInput defaultValue={new Time(11, 45)} label="Time (uncontrolled)" />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      isDisabled 
      label="Event Time" 
      defaultValue={new Time(11, 45)} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const ClockCircleLinearIcon = `export const ClockCircleLinearIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <g fill="none" stroke="currentColor" strokeWidth="1.5">
      <circle cx="12" cy="12" r="10" />
      <path d="M12 8v4l2.5 2.5" strokeLinecap="round" strokeLinejoin="round" />
    </g>
  </svg>
);`;

const App = `import {TimeInput} from "@nextui-org/react";
import {ClockCircleLinearIcon} from './ClockCircleLinearIcon';
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      label="Event Time" 
      labelPlacement="outside" 
      defaultValue={new Time(11, 45)} 
      endContent={(
        <ClockCircleLinearIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
      )}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/ClockCircleLinearIcon.jsx": ClockCircleLinearIcon,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";

export default function App() {
  return (
    <TimeInput 
      label="Event Time"
      isInvalid
      errorMessage={(value) => {
        if (value.isInvalid) {
          return "Please enter a valid time";
        }
      }}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";

export default function App() {
  return (
    <TimeInput 
      label="Event Time"
      isInvalid
      errorMessage="Please enter a valid time"
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <TimeInput granularity="hour" label="Hour" value={date} onChange={setDate} />
      <TimeInput granularity="minute" label="Minute" value={date} onChange={setDate} />
      <TimeInput granularity="second" label="Second" value={date} onChange={setDate} />
    </div>
  );
}`;

const AppTs = `import {TimeInput} from "@nextui-org/react";
import type {TimeValue} from "@react-types/datepicker";
import {Time, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  let [date, setDate] = React.useState<TimeInputValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));

  return (
    <div className="w-full max-w-xl flex flex-col items-start gap-4">
      <TimeInput granularity="hour" label="Hour" value={date} onChange={setDate} />
      <TimeInput granularity="minute" label="Minute" value={date} onChange={setDate} />
      <TimeInput granularity="second" label="Second" value={date} onChange={setDate} />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
  "/App.tsx": AppTs,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {parseZonedDateTime} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      label="Meeting time"
      hideTimeZone 
      defaultValue={parseZonedDateTime("2022-11-07T10:45[America/Los_Angeles]")} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time, parseZonedDateTime} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      label="Meeting time"
      hourCycle={24}
      defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
      granularity="minute" 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import required from "./required";
import disabled from "./disabled";
import readonly from "./read-only";
import withoutLabel from "./without-label";
import withDescription from "./with-description";
import errorMessage from "./error-message";
import errorMessageFunction from "./error-message-function";
import labelPlacement from "./label-placement";
import startContent from "./start-content";
import endContent from "./end-content";
import controlled from "./controlled";
import timezones from "./timezones";
import granularity from "./granularity";
import minTimeValue from "./min-time-value";
import maxTimeValue from "./max-time-value";
import placeholderValue from "./placeholder-value";
import hideTimeZone from "./hide-timezone";
import hourCycle from "./hour-cycle";

export const timeInputContent = {
  usage,
  required,
  disabled,
  readonly,
  withoutLabel,
  withDescription,
  errorMessage,
  errorMessageFunction,
  labelPlacement,
  startContent,
  endContent,
  controlled,
  timezones,
  granularity,
  minTimeValue,
  maxTimeValue,
  placeholderValue,
  hideTimeZone,
  hourCycle,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-col items-end gap-4">
      <TimeInput 
        label="Event Time" 
        labelPlacement="inside" 
        defaultValue={new Time(11, 45)} 
        description="inside" 
      />
      <TimeInput 
        label="Event Time" 
        labelPlacement="outside" 
        defaultValue={new Time(11, 45)} 
        description="outside" 
      />
      <TimeInput 
        label="Event Time" 
        labelPlacement="outside-left" 
        defaultValue={new Time(11, 45)} 
        description="outside-left" 
      />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      defaultValue={new Time(18)}
      maxValue={new Time(17)}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      defaultValue={new Time(8)}
      minValue={new Time(9)}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      label="Meeting time"
      placeholderValue={new Time(9)}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      isReadOnly 
      label="Event Time" 
      defaultValue={new Time(11, 45)} 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";

export default function App() {
  return (
    <TimeInput 
      isRequired 
      label="Event Time" 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const ClockCircleLinearIcon = `export const ClockCircleLinearIcon = (props) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 24 24"
    width="1em"
    {...props}
  >
    <g fill="none" stroke="currentColor" strokeWidth="1.5">
      <circle cx="12" cy="12" r="10" />
      <path d="M12 8v4l2.5 2.5" strokeLinecap="round" strokeLinejoin="round" />
    </g>
  </svg>
);`;

const App = `import {TimeInput} from "@nextui-org/react";
import {ClockCircleLinearIcon} from './ClockCircleLinearIcon';
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput 
      label="Event Time" 
      labelPlacement="outside" 
      defaultValue={new Time(11, 45)} 
      startContent={(
        <ClockCircleLinearIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
      )}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/ClockCircleLinearIcon.jsx": ClockCircleLinearIcon,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time, parseZonedDateTime, parseAbsoluteToLocal} from "@internationalized/date";

export default function App() {
  return (
    <div className="w-full max-w-xl flex flex-col items-end gap-4">
    <TimeInput
      defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
      labelPlacement="outside"
    />
    <TimeInput
      defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
      labelPlacement="outside"
    />
  </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4">
      <TimeInput label="Event Time" />
      <TimeInput label="Event Time" defaultValue={new Time(11, 45)} />
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";

export default function App() {
  return (
    <TimeInput 
      label="Event Time"
      description="Please enter your meeting time" 
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {TimeInput} from "@nextui-org/react";
import {Time} from "@internationalized/date";

export default function App() {
  return (
    <TimeInput label={null} defaultValue={new Time(11, 45)} />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Tooltip showArrow={true} content="I am a tooltip">
      <Button>Hover me</Button>
    </Tooltip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  const colors = [
    "default",
    "primary",
    "secondary",
    "success",
    "warning",
    "danger",
    "foreground",
  ];

  return (
    <div className="flex flex-wrap gap-4">
      {colors.map((color) => {
        return (
          <Tooltip key={color} color={color} content={color} className="capitalize">
            <Button variant="flat" color={color} className="capitalize">
              {color}
            </Button>
          </Tooltip>
        )
      })}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  const [isOpen, setIsOpen] = React.useState(false);

  return (
    <div className="flex flex-col gap-2">
      <Tooltip
        isOpen={isOpen}
        onOpenChange={(open) => setIsOpen(open)}
        content="I am a tooltip"
      >
        <Button>Hover me</Button>
      </Tooltip>
      <p className="text-small text-default-500">
        Open: {isOpen ? "true" : "false"}
      </p>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Tooltip
      content={
        <div className="px-1 py-2">
          <div className="text-small font-bold">Custom Content</div>
          <div className="text-tiny">This is a custom tooltip content</div>
        </div>
      }
    >
      <Button variant="bordered">
        Hover me
      </Button>
    </Tooltip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Tooltip 
      content="I am a tooltip"
      delay={0}
      closeDelay={0}
      motionProps={{
        variants: {
          exit: {
            opacity: 0,
            transition: {
              duration: 0.1,
              ease: "easeIn",
            }
          },
          enter: {
            opacity: 1,
            transition: {
              duration: 0.15,
              ease: "easeOut",
            }
          },
        },
      }}
    >
      <Button variant="flat">Hover me</Button>
    </Tooltip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Tooltip 
      showArrow
      placement="right"
      content="I am a tooltip"
      classNames={{
        base: [
          // arrow color
          "before:bg-neutral-400 dark:before:bg-white",
        ],
        content: [
          "py-2 px-4 shadow-xl",
          "text-black bg-gradient-to-br from-white to-neutral-400",
        ],
      }}
    >
      <Button variant="flat">Hover me</Button>
    </Tooltip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-2">
      <Tooltip color="primary" content="Tooltip 1" delay={1000}>
        <Button color="primary" variant="flat">
          Hover me (delay 1000ms)
        </Button>
      </Tooltip>
      <Tooltip color="primary" content="Tooltip 2">
        <Button color="primary" variant="flat">
          Then hover me
        </Button>
      </Tooltip>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-2">
      <Tooltip color="warning" content="Tooltip 1" delay={1000}>
        <Button color="warning" variant="flat">
          Delay Open (1000ms)
        </Button>
      </Tooltip>
      <Tooltip color="warning" closeDelay={2000} content="Tooltip 2">
        <Button color="warning" variant="flat">
          Delay Close (2000ms)
        </Button>
      </Tooltip>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import arrow from "./arrow";
import colors from "./colors";
import offset from "./offset";
import placements from "./placements";
import controlled from "./controlled";
import delay from "./delay";
import delayMultiple from "./delay-multiple";
import customContent from "./custom-content";
import customMotion from "./custom-motion";
import customStyles from "./custom-styles";

export const tooltipContent = {
  usage,
  arrow,
  colors,
  offset,
  placements,
  controlled,
  delay,
  delayMultiple,
  customContent,
  customMotion,
  customStyles,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-2">
      <Tooltip content="Tooltip 1" color="success">
        <Button color="success" variant="faded">
          Default offset (7)
        </Button>
      </Tooltip>
      <Tooltip content="Tooltip 2" color="success" offset={15}>
        <Button color="success" variant="faded">
          15 offset
        </Button>
      </Tooltip>
      <Tooltip content="Tooltip 3" color="success" offset={-7}>
        <Button color="success" variant="faded">
          -7 offset
        </Button>
      </Tooltip>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  const placements = [
    "top-start",
    "top",
    "top-end",
    "bottom-start",
    "bottom",
    "bottom-end",
    "left-start",
    "left",
    "left-end",
    "right-start",
    "right",
    "right-end",
  ];

  return (
    <div className="flex flex-wrap md:inline-grid md:grid-cols-3 gap-4">
      {placements.map((placement) => (
        <Tooltip
          key={placement}
          placement={placement}
          content={placement}
          color="secondary"
        >
          <Button variant="flat" color="secondary" className="capitalize">
            {placement}
          </Button>
        </Tooltip>
      ))}
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Tooltip, Button} from "@nextui-org/react";

export default function App() {
  return (
    <Tooltip content="I am a tooltip">
      <Button>Hover me</Button>
    </Tooltip>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

import usage from "./usage";
import linkDescription from "./link-description";

export const userContent = {
  usage,
  linkDescription,
};

const App = `import {User, Link} from "@nextui-org/react";

export default function App() {
  return (
    <User   
      name="Junior Garcia"
      description={(
        <Link href="https://twitter.com/jrgarciadev" size="sm" isExternal>
          @jrgarciadev
        </Link>
      )}
      avatarProps={{
        src: "https://avatars.githubusercontent.com/u/30373425?v=4"
      }}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {User} from "@nextui-org/react";

export default function App() {
  return (
    <User   
      name="Jane Doe"
      description="Product Designer"
      avatarProps={{
        src: "https://i.pravatar.cc/150?u=a04258114e29026702d"
      }}
    />
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `export default function App() {
  return (
    <div class="bg-primary-500 text-primary-50 rounded-small px-2 py-1">
      This is a primary color box
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4 items-center">
      <Button color="primary" variant="solid" className="rounded-[6px] bg-[#DD62ED] text-[#FFFFFF] data-[focus-visible=true]:outline-[#F182F6]">
        Solid
      </Button>
      <Button color="primary" variant="faded" className="rounded-[6px] bg-[#27272a] border-[#3f3f46] text-[#DD62ED] data-[focus-visible=true]:outline-[#F182F6]">
        Faded
      </Button>  
      <Button color="primary" variant="bordered" className="rounded-[6px] text-[#DD62ED] border-[#DD62ED] data-[focus-visible=true]:outline-[#F182F6]">
        Bordered
      </Button>  
      <Button color="primary" variant="light" className="rounded-[6px] text-[#DD62ED] data-[hover=true]:bg-[#DD62ED]/20 data-[focus-visible=true]:outline-[#F182F6]">
        Light
      </Button>  
      <Button color="primary" variant="flat" className="rounded-[6px] bg-[#DD62ED]/20 text-[#DD62ED] data-[focus-visible=true]:outline-[#F182F6]">
        Flat
      </Button>  
      <Button color="primary" variant="ghost" className="rounded-[6px] border-[#DD62ED] text-[#DD62ED] hover:!bg-[#DD62ED] hover:!text-[#FFFFFF] data-[focus-visible=true]:outline-[#F182F6]">
        Ghost
      </Button>  
      <Button color="primary" variant="shadow" className="rounded-[6px] shadow-[#DD62ED]/40 bg-[#DD62ED] text-[#FFFFFF] data-[focus-visible=true]:outline-[#F182F6]">
        Shadow
      </Button>  
      <Button isDisabled color="primary" variant="solid" className="rounded-[6px] opacity-30 bg-[#DD62ED] text-[#FFFFFF] data-[focus-visible=true]:outline-[#F182F6]">
        Disabled
      </Button>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {extendVariants, Button} from "@nextui-org/react";

const MyButton = extendVariants(Button, {
  variants: {
    color: { 
      olive: "text-[#000] bg-[#84cc16]",
      orange: "bg-[#ff8c00] text-[#fff]",
      violet: "bg-[#8b5cf6] text-[#fff]",
    },
    isDisabled: {
      true: "bg-[#eaeaea] text-[#000] opacity-50 cursor-not-allowed",
    },
    size: { 
      xs: "px-2 min-w-12 h-6 text-tiny gap-1 rounded-small",
      md: "px-4 min-w-20 h-10 text-small gap-2 rounded-small",
      xl: "px-8 min-w-28 h-14 text-large gap-4 rounded-medium",
    },
  },
  defaultVariants: {
    color: "olive",
    size: "xl",
  },
  compoundVariants: [
    {
      isDisabled: true,
      color: "olive",
      class: "bg-[#84cc16]/80 opacity-100"
    }
  ],
});

export default function App() {
  return (
    <MyButton color="olive" size="md">
      Press Me
    </MyButton>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const SearchIcon = `export const SearchIcon = ({
  size = 24,
  strokeWidth = 1.5,
  width,
  height,
  ...props
}) => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height={height || size}
    role="presentation"
    viewBox="0 0 24 24"
    width={width || size}
    {...props}
  >
    <path
      d="M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
    <path
      d="M22 22L20 20"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={strokeWidth}
    />
  </svg>
);`;

const App = `import {extendVariants, Input} from "@nextui-org/react";
import {SearchIcon} from "./SearchIcon";

const MyInput = extendVariants(Input, {
  variants: {
    color: {
      stone: {
        inputWrapper: [
          "bg-zinc-100",
          "border",
          "shadow",
          "transition-colors",
          "focus-within:bg-zinc-100",
          "data-[hover=true]:border-zinc-600",
          "data-[hover=true]:bg-zinc-100",
          "group-data-[focus=true]:border-zinc-600",
          "dark:bg-zinc-900",
          "dark:border-zinc-800",
          "dark:data-[hover=true]:bg-zinc-900",
          "dark:focus-within:bg-zinc-900",
        ],
        input: [
          "text-zinc-800",
          "placeholder:text-zinc-600",
          "dark:text-zinc-400",
          "dark:placeholder:text-zinc-600",
        ],
      },
    },
    size: {
      xs: {
        inputWrapper: "h-6 min-h-6 px-1",
        input: "text-tiny",
      },
      md: {
        inputWrapper: "h-10 min-h-10",
        input: "text-small",
      },
      xl: {
        inputWrapper: "h-14 min-h-14",
        input: "text-medium",
      },
    },
    radius: {
      xs: {
        inputWrapper: "rounded",
      },
      sm: {
        inputWrapper: "rounded-[4px]",
      },
    },
    textSize: {
      base: {
        input: "text-base",
      },
    },
    removeLabel: {
      true: {
        label: "hidden",
      },
      false: {},
    },
  },
  defaultVariants: {
    color: "stone",
    textSize: "base",
    removeLabel: true,
  },
});

export default function App() {
  return (
    <MyInput
      isClearable
      placeholder="Search..."
      radius="md"
      size="md"
      startContent={<SearchIcon className="text-zinc-500" size={16} />}
    />
  );
}`;

const react = {
  "/App.jsx": App,
  "/SearchIcon.jsx": SearchIcon,
};

export default {
  ...react,
};

const App = `import {Button} from '@nextui-org/react';

export default function App() {
  return (
    <div className="flex gap-4">
      <Button className="rounded-[4px] bg-[#BEF264] text-[#000000] data-[focus-visible=true]:outline-[#BEF264]">
        Solid
      </Button>
      <Button variant="ghost" className="rounded-[4px] border-[1px] border-[#BEF264] hover:!bg-[#BEF264] hover:!text-[#000000] data-[focus-visible=true]:outline-[#BEF264]">
        Ghost
      </Button>
    </div>  
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from '@nextui-org/react';

export default function App() {
  return (
    <div className="flex gap-4">
      <Button variant="bordered" className="rounded-[4px] border-[1px]">
        Button
      </Button>
      <Button isDisabled color="primary" className="rounded-[4px] opacity-30">
        Disabled
      </Button>
    </div>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button
      disableRipple
      className="relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-[''] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-[-1] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0"
      size="lg"
    >
      Press me
    </Button>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

const App = `import {CircularProgress, Card, CardBody, CardFooter, Chip} from "@nextui-org/react";

export default function App() {
  return (
    <Card className="w-[240px] h-[240px] bg-gradient-to-br from-violet-500 to-fuchsia-500">
      <CardBody className="justify-center items-center py-0">
        <CircularProgress
          classNames={{
            svg: "w-36 h-36 drop-shadow-md",
            indicator: "stroke-white",
            track: "stroke-white/10",
            value: "text-3xl font-semibold text-white",
          }}
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </CardBody>
    </Card>
  );
}`;

const react = {
  "/App.jsx": App,
};

export default {
  ...react,
};

---
title: NextUI CLI
description: API References for NextUI CLI
---

# NextUI CLI

------

Here's the API reference for the `NextUI CLI`.

Once the `CLI` is installed, run the following command to display available commands:

To get a list of the available CLI commands, run the following command inside your project directory:

```codeBlock bash
nextui -h
```

This will produce the following help output:

```codeBlock bash
NextUI CLI <version>

A command line tool for seamless integration with NextUI

Usage: nextui [command]

Options:
  -v, --version  Show the version number
  --no-cache     Disable cache, by default data will be cached for 30m after the first request
  -h, --help     Display help for commands

Commands:
  init [options] [projectName]       Start a new NextUI project
  add [options] [components...]      Add NextUI components to your project
  upgrade [options] [components...]  Update NextUI components to the latest versions
  remove [options] [components...]   Remove NextUI components from your project
  list [options]                     Show details of installed components
  env [options]                      Display debug information about the local environment
  doctor [options]                   Diagnose problems in your project
  help [command]                     Get help on a specific command
```

## init

To start a new project, use the init command:

```codeBlock bash
nextui init [projectName] [options]
```
### Options

- `-t --template [string]` The template to use for the new project e.g. app, pages
- `-p --package [string]` The package manager to use for the new project (default: `npm`)

### Example

```codeBlock bash
nextui init my-nextui-app -t app
```

output:

```codeBlock bash
NextUI CLI v0.2.1

┌  Create a new project
│
◇  Select a template (Enter to select)
│  ● App (A Next.js 14 with app directory template pre-configured with NextUI (v2) and Tailwind CSS.)
│  ○ Pages (A Next.js 14 with pages directory template pre-configured with NextUI (v2) and Tailwind CSS.)
│  ○ Vite (A Vite template pre-configured with NextUI (v2) and Tailwind CSS.)
│
◇  New project name (Enter to skip with default name)
│  my-nextui-app
│
◇  Select a package manager (Enter to select)
│  ● npm
│  ○ yarn
│  ○ pnpm
│  ○ bun
│
◇  Template created successfully!
│
◇  Next steps ───────╮
│                    │
│  cd my-nextui-app  │
│  npm install       │
│                    │
├────────────────────╯
│
└  🚀 Get started with npm run dev
```

## add

> 1. Auto add the missing required `dependencies` to your project
> 2. Auto add the required `tailwindcss.config.js` configuration to your project
> 3. Detect whether using pnpm, if so, add the required configuration to your `.npmrc` file

To add components to your project, use the add command:

```codeBlock bash
nextui add [components...] [options]
```

### Options

- `-a --all` [boolean] Add all the NextUI components (default: `false`)
- `-p --packagePath` [string] The path to the package.json file
- `-tw --tailwindPath` [string] The path to the tailwind.config file file
- `-app --appPath` [string] The path to the App.tsx file
- `--prettier` [boolean] Add prettier format in the add content which required installed prettier - (default: false)
- `--addApp` [boolean] Add App.tsx file content which required provider (default: `false`)

### Example

Without setting a specific component, the `add` command will show a list of available components.

```codeBlock bash
nextui add
```

Output:

```codeBlock bash
NextUI CLI v0.2.1

? Which components would you like to add? › - Space to select. Return to submit 

Filtered results for: Enter something to filter

◯   accordion
◯   autocomplete
◯   avatar
◯   badge
◯   breadcrumbs
◯   button
◯   calendar
◯   card
◯   checkbox
◯ ↓ chip
```

If you want to add a specific component, you can specify the component name.

```codeBlock bash
nextui add button input
```

Output:

```bash
NextUI CLI v0.2.1

Adding the required dependencies: @nextui-org/button

pnpm add @nextui-org/button
Packages: +1
+
Progress: resolved 470, reused 462, downloaded 0, added 0, done

dependencies:
+ @nextui-org/button 2.0.24

Done in 3.4s

Tailwind CSS settings have been updated in: /project-path/tailwind.config.js

✅ Components added successfully
```

## upgrade

Upgrade the NextUI components to the latest version.

```codeBlock bash
nextui upgrade [components...] [options]
```

### Options

- `-p --packagePath` [string] The path to the package.json file.
- `-a --all` [boolean] Upgrade all the NextUI components (default: `false`).
- `-h, --help` Display help for commands.

### Example

```codeBlock bash
nextui upgrade button
```

Output:

```bash
NextUI CLI v0.2.1

╭───────────────────────── Component ─────────────────────────╮
│  @nextui-org/button              ^2.0.11  ->  ^2.0.31       │
╰─────────────────────────────────────────────────────────────╯

Required min version: @nextui-org/theme>=2.1.0, tailwindcss>=3.4.0
╭───────────────────── PeerDependencies ─────────────────────╮
│  @nextui-org/theme               2.0.1    ->  2.1.0        │
│  tailwindcss                     ^3.2.3   ->  ^3.4.0       │
╰────────────────────────────────────────────────────────────╯
2 minor, 1 patch

? Would you like to proceed with the upgrade? › - Use arrow-keys. Return to submit.
❯   Yes
    No

pnpm add @nextui-org/button@2.0.31 @nextui-org/theme@2.1.0 tailwindcss@3.4.0
Already up to date
Progress: resolved 474, reused 465, downloaded 0, added 0, done
Done in 2.9s

✅ Upgrade complete. All components are up to date.
```

## remove

Remove NextUI components from your project.

> **Note**: If there are no NextUI components after removing, the required content will also be removed._createMdxContent
  
  ```codeBlock bash
  nextui remove [components...] [options]
  ```

### Options

- `-p --packagePath` [string] The path to the package.json file.
- `-a --all` [boolean] Remove all the NextUI components (default: `false`).
- `-tw --tailwindPath` [string] The path to the tailwind.config file file.
- `--prettier` [boolean] Add prettier format in the add content which required installed prettier - (default: false).


### Example

```codeBlock bash
nextui remove button
```

Output:

```bash
NextUI CLI v0.2.1

❗️ Components slated for removal:
╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package              │   Version              │   Status   │   Docs                                        │
│──────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @nextui-org/button   │   2.0.27 🚀latest      │   stable   │   https://nextui.org/docs/components/button   │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
? Confirm removal of these components: › - Use arrow-keys. Return to submit.
❯   Yes
    No

pnpm remove  @nextui-org/button
Already up to date
Progress: resolved 474, reused 465, downloaded 0, added 0, done

dependencies:
- @nextui-org/button 2.0.27

Done in 2.1s

Remove the removed components tailwind content in file:/project-path/tailwind.config.js

✅ Successfully removed the specified NextUI components: @nextui-org/button
```

## list

Show details of installed components.

```codeBlock bash
nextui list [options]
```

### Options

- `-p --packagePath` [string] The path to the package.json file
- `-r --remote` List all components available remotely

### Example

```codeBlock bash
nextui list
```

Output:

```codeBlock bash
NextUI CLI v0.2.1

Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │
│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │
│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │
│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
```

## doctor

Diagnose problems in your project.

> 1. Check whether have `redundant dependencies` in the project
> 2. Check whether the NextUI components `required dependencies are installed` in the project
> 3. Check the required `tailwind.config.js` file and the content is correct
> 4. Check `.npmrc` is correct when using `pnpm`
> 5. Check `peerDependencies with required version` are installed in the project

```codeBlock bash
nextui doctor [options]
```

### Options

- `-p` `--packagePath` [string] The path to the package.json file
- `-tw` `--tailwindPath` [string] The path to the tailwind.config file file
- `-app` `--appPath` [string] The path to the App.tsx file
- `-ca` `--checkApp` [boolean] Open check App (default: `true`)
- `-ct` `--checkTailwind` [boolean] Open check tailwind.config file (default: `true`)
- `-cp` `--checkPnpm` [boolean] Open check Pnpm (default: `true`)


### Example

```codeBlock bash
nextui doctor
```

Output:


If there is a problem in your project, the `doctor` command will display the problem information.

```codeBlock bash
NextUI CLI v0.2.1

NextUI CLI: ❌ Your project has 1 issue that require attention

❗️Issue 1: missingTailwind

Missing tailwind.config.(j|t)s file. To set up, visit: https://nextui.org/docs/guide/installation#tailwind-css-setup
```

Otherwise, the `doctor` command will display the following message.

```codeBlock bash
NextUI CLI v0.2.1

✅ Your project has no detected issues.
```

## env

Display debug information about the local environment.

```codeBlock bash
nextui env [options]
```

### Options
- `-p --packagePath` [string] The path to the package.json file


### Example

```codeBlock bash
nextui env
```

Output:

```codeBlock bash
NextUI CLI 0.2.1

Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │
│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │
│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │
│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Environment Info:
  System:
    OS: darwin
    CPU: arm64
  Binaries:
    Node: v18.18.2
```    
---
title: NextUI Provider
description: API References for NextUI Provider
---

# NextUI Provider

API reference for the `NextUIProvider`. 

------

## Import

<ImportTabs
  commands={{
    main: 'import {NextUIProvider} from "@nextui-org/react";',
    individual: 'import {NextUIProvider} from "@nextui-org/system";',
  }}
/>

## Usage

```jsx
import * as React from "react";
import {NextUIProvider} from "@nextui-org/react";

function App() {
  return (
    <NextUIProvider>
      <YourApplication />
    </NextUIProvider>
  );
}
```

## Props

<Spacer y={6}/>

`navigate`

- **Description**: Provides a client side router to all nested components such as Link, Menu, Tabs, Table, etc.
- **Type**: `((path: string) => void) | undefined`

<Spacer y={2}/>

`locale`

- **Description**: The locale to apply to the children.
- **Type**: `string | undefined`
- **Default**: `en-US`


Here's the supported locales. By default, It is `en-US`.

```tsx
const localeValues = [
  'fr-FR', 'fr-CA', 'de-DE', 'en-US', 'en-GB', 'ja-JP',
  'da-DK', 'nl-NL', 'fi-FI', 'it-IT', 'nb-NO', 'es-ES', 
  'sv-SE', 'pt-BR', 'zh-CN', 'zh-TW', 'ko-KR', 'bg-BG', 
  'hr-HR', 'cs-CZ', 'et-EE', 'hu-HU', 'lv-LV', 'lt-LT', 
  'pl-PL', 'ro-RO', 'ru-RU', 'sr-SP', 'sk-SK', 'sl-SI', 
  'tr-TR', 'uk-UA', 'ar-AE', 'ar-DZ', 'AR-EG', 'ar-SA', 
  'el-GR', 'he-IL', 'fa-AF', 'am-ET', 'hi-IN', 'th-TH'
];
```

Here's an example to set a Spanish locale.

```tsx
"use client";

import {type ReactNode} from "react";
import {NextUIProvider} from "@nextui-org/react";

export function AppProvider(props: AppProviderProps) {
  const {children, className} = props;

  return (
    <NextUIProvider locale="es-ES" className={className}>
      {children}
    </NextUIProvider>
  );
}

interface AppProviderProps {
  children: ReactNode;
  className?: string;
}
```

<Spacer y={2}/>

`defaultDates`

- **Description**: The default dates range that can be selected in the calendar.
- **Type**: `{ minDate?: CalendarDate | undefined; maxDate?: CalendarDate | undefined; }`
- **Default**: `{ minDate: new CalendarDate(1900, 1, 1), maxDate: new CalendarDate(2099, 12, 31) }`

<Spacer y={2}/>

`createCalendar`

- **Description**: 
    This function helps to reduce the bundle size by providing a custom calendar system.

    By default, this includes all calendar systems supported by `@internationalized/date`. However,
    if your application supports a more limited set of regions, or you know you will only be picking dates
    in a certain calendar system, you can reduce your bundle size by providing your own implementation
    of `createCalendar` that includes a subset of these Calendar implementations.

    For example, if your application only supports Gregorian dates, you could implement a `createCalendar`
    function like this:

    ```tsx
    import {GregorianCalendar} from '@internationalized/date';

    function createCalendar(identifier) {
    switch (identifier) {
      case 'gregory':
        return new GregorianCalendar();
      default:
        throw new Error(`Unsupported calendar ${identifier}`);
    }
    }
    ```

    This way, only GregorianCalendar is imported, and the other calendar implementations can be tree-shaken.

- **Type**: `((calendar: SupportedCalendars) => Calendar | null) | undefined`

<Spacer y={2}/>

`disableAnimation`

- **Description**: Disables animations globally. This will also avoid `framer-motion` features to be loaded in the bundle which can potentially reduce the bundle size.
- **Type**: `boolean`
- **Default**: `false`

<Spacer y={2}/>

`disableRipple`

- **Description**: Disables ripple effect globally.
- **Type**: `boolean`
- **Default**: `false`

<Spacer y={2}/>

`skipFramerMotionAnimations`

- **Description**:
  Controls whether `framer-motion` animations are skipped within the application.
  This property is automatically enabled (`true`) when the `disableAnimation` prop is set to `true`,
  effectively skipping all `framer-motion` animations. To retain `framer-motion` animations while
  using the `disableAnimation` prop for other purposes, set this to `false`. However, note that
  animations in NextUI Components are still omitted if the `disableAnimation` prop is `true`.
- **Type**: `boolean`
- **Default**: Same as `disableAnimation`

<Spacer y={2}/>

`validationBehavior`

- **Description**: Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, 
or mark the field as required or invalid via ARIA.
- **Type**: `native | aria`
- **Default**: `aria`

---

## Types

`CalendarDate`

- **Description**: A [CalendarDate](https://react-spectrum.adobe.com/internationalized/date/CalendarDate.html) represents a date without any time components in a specific calendar system from `@internationalized/date`.
- **Type**: `import {CalendarDate} from '@internationalized/date';`

### SupportedCalendars

Supported react-aria i18n calendars.

```tsx
type SupportedCalendars =
  | "buddhist"
  | "ethiopic"
  | "ethioaa"
  | "coptic"
  | "hebrew"
  | "indian"
  | "islamic-civil"
  | "islamic-tbla"
  | "islamic-umalqura"
  | "japanese"
  | "persian"
  | "roc"
  | "gregory";
```
---
title: "Accordion"
description: "Accordion display a list of high-level options that can expand/collapse to reveal more information."
---

import {accordionContent} from "@/content/components/accordion";

# Accordion

Accordion display a list of high-level options that can expand/collapse to reveal more information.

<ComponentLinks component="accordion" />

---


## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add accordion",
    npm: "npm install @nextui-org/accordion",
    yarn: "yarn add @nextui-org/accordion",
    pnpm: "pnpm add @nextui-org/accordion",
    bun: "bun add @nextui-org/accordion"
  }}
/>

## Import

NextUI exports 2 accordion-related components:

- **Accordion**: The main component to display a list of accordion items.
- **AccordionItem**: The item component to display a single accordion item.

<ImportTabs
  commands={{
    main: 'import {Accordion, AccordionItem} from "@nextui-org/react";',
    individual: 'import {Accordion, AccordionItem} from "@nextui-org/accordion";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={accordionContent.usage} />

### With Subtitle

<CodeDemo title="With subtitle" files={accordionContent.subtitle} />

### Expand multiple items

If you set `selectionMode` to `multiple`, then the `Accordion` will allow multiple items to be expanded at the same time.

<CodeDemo title="Expand multiple items" files={accordionContent.multiple} />

### Compact

If you set `isCompact` to `true`, the `Accordion` will be displayed in a compact style.

<CodeDemo title="Compact" files={accordionContent.compact} />

### Variants

Accordion has 4 variants: `light`, `shadow`, `bordered` and `splitted`.

#### Light variant

<CodeDemo title="Light variant" files={accordionContent.lightVariant} />

#### Shadow variant

<CodeDemo title="Shadow variant" files={accordionContent.shadowVariant} />

#### Bordered variant

<CodeDemo title="Bordered variant" files={accordionContent.borderedVariant} />

#### Splitted variant

<CodeDemo title="Splitted variant" files={accordionContent.splittedVariant} />

### Default expanded keys

If you want to expand some items by default, you can set the `defaultExpandedKeys` property to an array of keys.

<CodeDemo title="Default expanded keys" files={accordionContent.defaultExpandedKeys} />

### Disabled keys

If you want to disable some items, you can set the `disabledKeys` property to an array of keys.

<CodeDemo title="Disabled keys" files={accordionContent.disabledKeys} />

### Start content

If you want to display some content before the accordion items, you can set the `startContent` property.

<CodeDemo title="Start content" files={accordionContent.startContent} />

### Custom Indicator

Accordion items have a property called `indicator`. You can use it to customize the open/close indicator.

<CodeDemo title="Custom Open/Close Indicator" files={accordionContent.indicator} />

The indicator can be also a `function`, which receives the `isOpen`, `isDisabled` and the default `indicator` as parameters.

<CodeDemo
  title="Custom Open/Close Indicator Function"
  highlightedLines="15"
  files={accordionContent.indicatorFunction}
/>

### Custom Motion

Accordion offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={accordionContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

### Controlled

Accordion is a controlled component, which means you need to control the `selectedKeys` property by yourself.

<CodeDemo title="Controlled" files={accordionContent.controlled} />

## Accordion Item Slots

- **base**: The accordion item wrapper.
- **heading**: The accordion item heading. It contains the `indicator` and the `title`.
- **trigger**: The button that open/close the accordion item.
- **titleWrapper**: The wrapper of the `title` and `subtitle`.
- **title**: The accordion item title.
- **subtitle**: The accordion item subtitle.
- **startContent**: The content before the accordion item.
- **indicator**: The element that indicates the open/close state of the accordion item.
- **content**: The accordion item content.

### Custom Accordion Styles

You can customize the accordion and accordion items styles by using any of the following properties:

- `className`: The class name of the accordion. Modify the accordion wrapper styles.(Accordion)
- `itemClasses`: The class names of the accordion items. Modify all accordion items styles at once. (Accordion)
- `classNames`: The class names of the accordion items. Modify each accordion item styles separately. (AccordionItem)

Here's an example of how to customize the accordion styles:

<CodeDemo title="Custom Accordion Styles" files={accordionContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`AccordionItem` has the following attributes on the `base` element:

- **data-open**:
  Whether the accordion item is open.
- **data-disabled**:
  When the accordion item is disabled.
- **data-hover**:
  When the accordion item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
- **data-focus**:
  When the accordion item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the accordion item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the accordion item is disabled. Based on `isDisabled` prop.
- **data-pressed**:
  When the accordion item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).

<Spacer y={4} />

## Accessibility

- Keyboard event support for <Kbd>Space</Kbd>, <Kbd>Enter</Kbd>, <Kbd>Arrow Up</Kbd>, <Kbd>Arrow Down</Kbd> and <Kbd>Home</Kbd> / <Kbd>End</Kbd> keys.
- Keyboard focus management and cross browser normalization.
- `aria-expanded` attribute for the accordion item.
- `aria-disabled` attribute for the accordion item.
- `aria-controls` attribute for the accordion item.

<Spacer y={4} />

## API

### Accordion Props

| Attribute                 | Type                                            | Description                                                                                             | Default  |
| ------------------------- | ----------------------------------------------- | ------------------------------------------------------------------------------------------------------- | -------- |
| children                  | `ReactNode` \| `ReactNode[]`                    | The contents of the collection. Usually the array of `AccordionItem`                                    |          |
| variant                   | `light` \| `shadow` \| `bordered` \| `splitted` | The accordion appearance style.                                                                         | `light`  |
| selectionMode             | `none` \| `single` \| `multiple`                | The type of selection that is allowed in the collection.                                                |          |
| selectionBehavior         | `toggle` \| `replace`                           | The accordion selection behavior.                                                                       | `toggle` |
| isCompact                 | `boolean`                                       | Whether all Accordion items should be smaller.                                                          | `false`  |
| isDisabled                | `boolean`                                       | Whether the Accordion items are disabled.                                                               |          |
| showDivider               | `boolean`                                       | Whether to display a divider at the bottom of the each accordion item.                                  | `true`   |
| dividerProps              | [DividerProps](/docs/components/divider)        | The divider component props.                                                                            | -        |
| hideIndicator             | `boolean`                                       | Whether the Accordion items indicator is hidden.                                                        |          |
| disableAnimation          | `boolean`                                       | Whether the Accordion items open/close animation is disabled.                                           |          |
| disableIndicatorAnimation | `boolean`                                       | Whether the Accordion items indicator animation is disabled.                                            |          |
| disallowEmptySelection    | `boolean`                                       | Whether the collection allows empty selection.                                                          |          |
| keepContentMounted        | `boolean`                                       | Whether the Accordion items content should be always mounted.                                           | `false`  |
| fullWidth                 | `boolean`                                       | Whether the accordion should take up the full width of its parent container.                            | `true`   |
| motionProps               | `MotionProps`                                   | The motion properties of the Accordion.                                                                 |          |
| disabledKeys              | `React.Key[]`                                   | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. |          |
| itemClasses               | [Classnames](#accordion-item-classnames)        | The accordion items classNames.                                                                         |          |
| selectedKeys              | `all` \| `React.Key[]`                          | The currently selected keys in the collection (controlled).                                             |          |
| defaultSelectedKeys       | `all` \| `React.Key[]`                          | The initial selected keys in the collection (uncontrolled).                                             |          |
| disabledKeys              | `React.Key[]`                                   | The currently disabled keys in the collection (controlled).                                             |          |

### Accordion Events

| Attribute         | Type                                     | Description                                        |
| ----------------- | ---------------------------------------- | -------------------------------------------------- |
| onSelectionChange | `(keys: "all" ｜ Set<React.Key>) => any` | Handler that is called when the selection changes. |

### Accordion Item Props

| Attribute                 | Type                                              | Description                                                                                                                  | Default |
|---------------------------|---------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|---------|
| children                  | `ReactNode` \| `string`                           | The content of the component.                                                                                                |         |
| title                     | `ReactNode` \| `string`                           | The accordion item title.                                                                                                    |         |
| subtitle                  | `ReactNode` \| `string`                           | The accordion item subtitle.                                                                                                 |         |
| indicator                 | [IndicatorProps](#accordion-item-indicator-props) | The accordion item `expanded` indicator, usually an arrow icon.                                                              |         |
| startContent              | `ReactNode`                                       | The accordion item start content, usually an icon or avatar.                                                                 |         |
| motionProps               | [MotionProps](#motion-props)                      | The props to modify the framer motion animation. Use the `variants` API to create your own animation.                        |         |
| isCompact                 | `boolean`                                         | Whether the AccordionItem is compact.                                                                                        | `false` |
| isDisabled                | `boolean`                                         | The current disabled status.                                                                                                 | `false` |
| keepContentMounted        | `boolean`                                         | Whether the AccordionItem content is kept mounted when closed.                                                               | `false` |
| hideIndicator             | `boolean`                                         | Whether the AccordionItem indicator is hidden.                                                                               | `false` |
| disableAnimation          | `boolean`                                         | Whether the AccordionItem animation is disabled.                                                                             | `false` |
| disableIndicatorAnimation | `boolean`                                         | Whether the AccordionItem indicator animation is disabled.                                                                   | `false` |
| HeadingComponent          | `React.ElementType`                               | Customizable heading tag for Web accessibility. Use headings to describe content and use them consistently and semantically. | `h2`    |
| classNames                | [Classnames](#accordion-item-classnames)          | Allows to set custom class names for the accordion item slots.                                                               | -       |

### Accordion Item Events

| Attribute     | Type                           | Description                                                                                                     |
| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------- |
| onFocus       | `(e: FocusEvent) => void`      | Handler that is called when the element receives focus.                                                         |
| onBlur        | `(e: FocusEvent) => void`      | Handler that is called when the element loses focus.                                                            |
| onFocusChange | `(isFocused: boolean) => void` | Handler that is called when the element's focus status changes.                                                 |
| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler that is called when a key is pressed.                                                                   |
| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler that is called when a key is released.                                                                  |
| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                      |
| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                 |
| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.     |
| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                    |
| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not. |
| onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                 |

---

### Types

#### Accordion Item Indicator Props

```ts
export type AccordionItemIndicatorProps = {
  /**
   * The current indicator, usually an arrow icon.
   */
  indicator?: ReactNode;
  /**
   * The current open status.
   */
  isOpen?: boolean;
  /**
   * The current disabled status.
   * @default false
   */
  isDisabled?: boolean;
};

type indicator?: ReactNode | ((props: AccordionItemIndicatorProps) => ReactNode) | null;
```

### Accordion Item classNames

```ts
export type AccordionItemClassnames = {
  base?: string;
  heading?: string;
  trigger?: string;
  titleWrapper?: string;
  title?: string;
  subtitle?: string;
  startContent?: string;
  indicator?: string;
  content?: string;
};
```

#### Motion Props

```ts
export type MotionProps = {
  /**
   * If `true`, the opacity of the content will be animated
   * @default true
   */
  animateOpacity?: boolean;
  /**
   * The height you want the content in its collapsed state.
   * @default 0
   */
  startingHeight?: number;
  /**
   * The height you want the content in its expanded state.
   * @default "auto"
   */
  endingHeight?: number | string;
  /**
   * The y-axis offset you want the content in its collapsed state.
   * @default 10
   */
  startingY?: number;
  /**
   * The y-axis offset you want the content in its expanded state.
   * @default 0
   */
  endingY?: number;
} & HTMLMotionProps;
```

---
title: "Autocomplete"
description: "An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query."
---

import {autocompleteContent} from "@/content/components/autocomplete";

# Autocomplete

An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.

<ComponentLinks component="autocomplete" reactAriaHook="useComboBox" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add autocomplete",
    npm: "npm install @nextui-org/autocomplete",
    yarn: "yarn add @nextui-org/autocomplete",
    pnpm: "pnpm add @nextui-org/autocomplete",
    bun: "bun add @nextui-org/autocomplete"
  }}
/>


## Import

NextUI exports 3 autocomplete-related components:

- **Autocomplete**: The main component, which is a wrapper for the other components.
- **AutocompleteSection**: The component that contains a group of autocomplete items.
- **AutocompleteItem**: The component that represents a autocomplete item.

<ImportTabs
  commands={{
    main: `import {
  Autocomplete,
  AutocompleteSection,
  AutocompleteItem
} from "@nextui-org/react";`,
    individual: `import {
  Autocomplete,
  AutocompleteSection,
  AutocompleteItem
} from "@nextui-org/autocomplete";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={autocompleteContent.usage} />

### Dynamic items

Autocomplete follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" highlightedLines="8" files={autocompleteContent.dynamic} />

### Disabled

<CodeDemo title="Disabled" highlightedLines="8" files={autocompleteContent.disabled} />

### Disabled Items

You can disable specific items by using the `disabledKeys` property.

<CodeDemo title="Disabled Items" highlightedLines="11" files={autocompleteContent.disabledItems} />

### Required

If you pass the `isRequired` property to the autocomplete, it will have a `danger` asterisk at
the end of the label and the autocomplete will be required.

<CodeDemo title="Required" highlightedLines="8" files={autocompleteContent.required} />

### Read Only

If you pass the `isReadOnly` property to the Autocomplete, the Listbox will open to display 
all available options, but users won't be able to select any of the listed options.

<CodeDemo title="Read Only" highlightedLines="8" files={autocompleteContent.readOnly} />

### Sizes

<CodeDemo title="Sizes" highlightedLines="13,21" files={autocompleteContent.sizes} />

### Colors

<CodeDemo title="Colors" highlightedLines="20" files={autocompleteContent.colors} />

### Variants

<CodeDemo title="Variants" highlightedLines="13,21" files={autocompleteContent.variants} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo
  title="Label Placements"
  highlightedLines="20,34"
  files={autocompleteContent.labelPlacements}
/>

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Start Content

You can use the `startContent` and `endContent` properties to add content to the start and end of
the autocomplete.

<CodeDemo title="Start Content" highlightedLines="13" files={autocompleteContent.startContent} />

### Item Start & End Content

Since the `Autocomplete` component uses the [Listbox](/docs/components/listbox) component under the hood, you can
use the `startContent` and `endContent` properties of the `AutocompleteItem` component to add content to the start
and end of the autocomplete item.

<CodeDemo title="Item Start Content" files={autocompleteContent.itemStartContent} />

### Custom Value

By default, `Autocomplete` doesn't allow users to specify a value that doesn't exist in the list of options and will
revert the input value to the current selected value on blur. By specifying `allowsCustomValue`, this behavior is
suppressed and the user is free to enter any value within the field.

<CodeDemo title="Custom Value" highlightedLines="8" files={autocompleteContent.customValue} />

### Custom Selector Icon

By default, `Autocomplete` uses a `chevron-down` icon as the selector icon which rotates when the autocomplete is open. You can
customize this icon by passing a custom one to the `selectorIcon` property.

<CodeDemo
  title="Custom Selector Icon"
  highlightedLines="15"
  files={autocompleteContent.customSelectorIcon}
/>

> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.

### Without Scroll Shadow

Autocomplete component uses the [ScrollShadow](/docs/components/scroll-shadow) under the hood to show a shadow when the autocomplete content is scrollable.
You can disable this shadow by passing using the `scrollShadowProps` property.

<CodeDemo
  title="Without Scroll Shadow"
  highlightedLines="13-15"
  files={autocompleteContent.withoutScrollShadow}
/>

> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.

### With Description

You can add a description to the autocomplete by passing the `description` property.

<CodeDemo title="With Description" highlightedLines="10" files={autocompleteContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid autocomplete.

<CodeDemo
  title="With Error Message"
  highlightedLines="16-18"
  files={autocompleteContent.errorMessage}
/>

### Events

The `Autocomplete` component supports selection via mouse, keyboard, and touch. You can handle all of these
via the `onSelectionChange` prop. `Autocomplete` will pass the selected key to the onSelectionChange handler.
Additionally, ComboBox accepts an `onInputChange` prop which is triggered whenever the value is edited by the user,
whether through typing or option selection.

The example below uses `onSelectionChange` and `onInputChange` to update the selection and input value stored in
React state.

<CodeDemo title="Events" highlightedLines="25-26" files={autocompleteContent.events} />

### Controlled

You can use the `selectedKey` and `onSelectionChange` properties to control the select value.

<CodeDemo
  title="Controlled with onSelectionChange"
  highlightedLines="15-16"
  files={autocompleteContent.controlled}
/>

### Fully Controlled

By passing in `inputValue`, `selectedKey`, and `items` to the `Autocomplete` you can control exactly what your `Autocomplete` should display.

The following example shows how you would create a controlled `Autocomplete`, controlling everything from the selected value
`selectedKey` to the combobox options `items`.

We recommend using the `useFilter` hook from [@react-aria/i18n](https://react-spectrum.adobe.com/react-aria/useFilter.html#usefilter) to manage the filtering of the items.

<PackageManagers
  commands={{
    npm: "npm install @react-aria/i18n",
    yarn: "yarn add @react-aria/i18n",
    pnpm: "pnpm add @react-aria/i18n",
  }}
/>

```jsx
import {useFilter} from "@react-aria/i18n";
```

<Spacer y={4} />

<CodeDemo
  title="Fully Controlled"
  showPreview={false}
  highlightedLines="63-64,67,69-71"
  files={autocompleteContent.fullyControlled}
/>

> **Note**: It is important to note that you don't have to control every single aspect of a `Autocomplete`. If you decide to only control a single property of the `Autocomplete`, be sure to provide the change handler for that prop as well e.g. controlling `selectedKey` would require `onSelectionChange`.

### Custom Items

You can customize the autocomplete items by modifying the `AutocompleteItem` children.

<CodeDemo title="Custom Items" files={autocompleteContent.customItems} />

### Custom Empty Content Message

By default, a message `No results found.` will be shown if there is no result matching a query with your filter. You can customize the empty content message by modifying the `emptyContent` in `listboxProps`.

<CodeDemo title="Custom Empty Content Message" files={autocompleteContent.customEmptyContentMessage} />

### Custom Filtering

By default, `Autocomplete` uses a `"contains"` function from [useFilter](https://react-spectrum.adobe.com/react-aria/useFilter.html) to filter the
list of options. This can be overridden using the `defaultFilter` prop, or by using the `items` prop to control the
filtered list. When `items` is provided rather than `defaultItems`, `Autocomplete` does no filtering of its own.

The following example uses the `defaultFilter` prop to filter the list of options using a custom filter function.

<CodeDemo
  title="Fully Controlled"
  highlightedLines="22"
  files={autocompleteContent.customFiltering}
/>

### Asynchronous Filtering

Autocomplete supports asynchronous filtering, in the example below we are using the [useAsyncList](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) function
from [react-aria](https://react-spectrum.adobe.com) to handle asynchronous loading and filtering of data from a server.

<PackageManagers
  commands={{
    npm: "npm install @react-stately/data",
    yarn: "yarn add @react-stately/data",
    pnpm: "pnpm add @react-stately/data",
  }}
/>

```jsx
import {useAsyncList} from "@react-stately/data";
```

<Spacer y={2} />

<CodeDemo
  typescriptStrict={true}
  title="Asynchronous Filtering"
  showPreview={false}
  highlightedLines="27-29,33"
  files={autocompleteContent.asyncFiltering}
/>

### Asynchronous Loading

Autocomplete supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.

The `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.

<PackageManagers
  commands={{
    npm: "npm install @nextui-org/use-infinite-scroll",
    yarn: "yarn add @nextui-org/use-infinite-scroll",
    pnpm: "pnpm add @nextui-org/use-infinite-scroll",
  }}
/>

```jsx
import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
```

<Spacer y={2} />

<CodeDemo
  showPreview={false}
  typescriptStrict={true}
  title="Asynchronous Loading"
  highlightedLines="21-22,25,27"
  files={autocompleteContent.asyncLoadingItems}
/>

### With Sections

You can use the `AutocompleteSection` component to group autocomplete items.

<CodeDemo title="With Sections" files={autocompleteContent.sections} />

### Custom Sections Style

You can customize the sections style by using the `classNames` property of the `AutocompleteSection` component.

<CodeDemo title="Custom Sections Style" files={autocompleteContent.customSectionsStyle} />

### Customizing the Autocomplete

You can customize any slot of the autocomplete by using the `classNames` property. Autocomplete
component also provides the [popoverProps](/docs/components/popover#api), [listboxProps](/docs/components/listbox#api), [inputProps](/docs/components/input#api)
properties to customize the popover, listbox and input components.

<CodeDemo title="Custom Styles" files={autocompleteContent.customStyles} />

## Slots

- **base**: The main wrapper of the autocomplete. This wraps the input and popover components.
- **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.
- **listbox**: The listbox component. This is the component that wraps the autocomplete items.
- **popoverContent**: The popover content slot. Use this to modify the popover content styles.
- **endContentWrapper**: The wrapper of the end content. This wraps the clear button and selector button.
- **clearButton**: The clear button slot.
- **selectorButton**: The selector button slot.

## Data Attributes

`Autocomplete` has the following attributes on the `base` element:

- **data-invalid**:
  When the autocomplete is invalid. Based on `isInvalid` prop.
- **data-open**:
  Indicates if the autocomplete's popover is open.

`Autocomplete` has the following attributes on the `selectorButton` element:

- **data-open**:
  Indicates if the autocomplete's popover is open.

`Autocomplete` has the following attributes on the `clearButton` element:

- **data-visible**:
  Indicates if the autocomplete's clear button is visible. By default it is visible when hovering the autocomplete and
  when the autocomplete has a value (desktop), or when the autocomplete has a value (mobile).

`AutocompleteItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the autocomplete item is disabled. Based on autocomplete `disabledKeys` prop.
- **data-selected**:
  When the autocomplete item is selected. Based on autocomplete `selectedKey` prop.
- **data-hover**:
  When the autocomplete item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the autocomplete item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the autocomplete item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the autocomplete item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Support for filtering a list of options by typing
- Support for selecting a single option
- Support for disabled options
- Support for groups of items in sections
- Support for custom user input values
- Support for controlled and uncontrolled options, selection, input value, and open state
- Support for custom filter functions
- Async loading and infinite scrolling support
- Support for virtualized scrolling for performance with long lists
- Exposed to assistive technology as a combobox with ARIA
- Labeling support for accessibility
- Required and invalid states exposed to assistive technology via ARIA
- Support for mouse, touch, and keyboard interactions
- Keyboard support for opening the combo box list box using the arrow keys, including automatically focusing the first or last item accordingly
- Support for opening the list box when typing, on focus, or manually
- Handles virtual clicks on the input from touch screen readers to toggle the list box
- Virtual focus management for combo box list box option navigation
- Hides elements outside the input and list box from assistive technology while the list box is open in a portal
- Custom localized announcements for option focusing, filtering, and selection using an ARIA live region to work around VoiceOver bugs
- Support for description and error message help text linked to the input via ARIA

<Spacer y={4} />

## API

### Autocomplete Props

| Attribute                   | Type                                                                                                                                  | Description                                                                                                                                                   | Default                  |
| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ |
| children\*                  | `ReactNode[]`                                                                                                                         | The children to render. Usually a list of `AutocompleteItem` and `AutocompleteSection` elements.                                                              | -                        |
| label                       | `ReactNode`                                                                                                                           | The content to display as the label.                                                                                                                          | -                        |
| name                        | `string`                                                                                                                              | The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname). | -                        |
| variant                     | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                       | The variant of the Autocomplete.                                                                                                                              | `flat`                   |
| color                       | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                           | The color of the Autocomplete.                                                                                                                                | `default`                |
| size                        | `sm` \| `md` \| `lg`                                                                                                                  | The size of the Autocomplete.                                                                                                                                 | `md`                     |
| radius                      | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                              | The radius of the Autocomplete.                                                                                                                               | -                        |
| items                       | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                | The list of Autocomplete items. (controlled)                                                                                                                  | -                        |
| defaultItems                | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                | The list of Autocomplete items (uncontrolled).                                                                                                                | -                        |
| inputValue                  | `string`                                                                                                                              | The value of the Autocomplete input (controlled).                                                                                                             | -                        |
| defaultInputValue           | `string`                                                                                                                              | The value of the Autocomplete input (uncontrolled).                                                                                                           | -                        |
| allowsCustomValue           | `boolean`                                                                                                                             | Whether the Autocomplete allows a non-item matching input value to be set.                                                                                    | `false`                  |
| allowsEmptyCollection       | `boolean`                                                                                                                             | Whether the autocomplete allows the menu to be open when the collection is empty.                                                                             | `true`                   |
| shouldCloseOnBlur           | `boolean`                                                                                                                             | Whether the Autocomplete should close when the input is blurred.                                                                                              | `true`                   |
| placeholder                 | `string`                                                                                                                              | Temporary text that occupies the text input when it is empty.                                                                                                 | -                        |
| description                 | `ReactNode`                                                                                                                           | A description for the field. Provides a hint such as specific requirements for what to choose.                                                                | -                        |
| menuTrigger                 | `focus` \| `input` \| `manual`                                                                                                        | The action that causes the menu to open.                                                                                                                      | `focus`                  |
| labelPlacement              | `inside` \| `outside` \| `outside-left`                                                                                               | The position of the label.                                                                                                                                    | `inside`                 |
| selectedKey                 | `React.Key`                                                                                                                           | The currently selected key in the collection (controlled).                                                                                                    | -                        |
| defaultSelectedKey          | `React.Key`                                                                                                                           | The initial selected key in the collection (uncontrolled).                                                                                                    | -                        |
| disabledKeys                | `all` \| `React.Key[]`                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                                                       | -                        |
| errorMessage                | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                 | An error message to display below the field.                                                                                                                  | -                        |
| validate                    | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ｜ true ｜ null ｜ undefined`                              | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -                        |
| validationBehavior          | `native` \| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`                   |
| startContent                | `ReactNode`                                                                                                                           | Element to be rendered in the left side of the Autocomplete.                                                                                                  | -                        |
| endContent                  | `ReactNode`                                                                                                                           | Element to be rendered in the right side of the Autocomplete.                                                                                                 | -                        |
| autoFocus                   | `boolean`                                                                                                                             | Whether the Autocomplete should be focused on render.                                                                                                         | `false`                  |
| defaultFilter               | `(textValue: string, inputValue: string) => boolean`                                                                                  | The filter function used to determine if a option should be included in the Autocomplete list.                                                                | -                        |
| filterOptions               | [Intl.CollatorOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator)            | The options used to create the collator used for filtering.                                                                                                   | `{ sensitivity: 'base'}` |
| isReadOnly                  | `boolean`                                                                                                                             | Whether the Autocomplete is read only.                                                                                                                        | `false`                  |
| isRequired                  | `boolean`                                                                                                                             | Whether the Autocomplete is required.                                                                                                                         | `false`                  |
| isInvalid                   | `boolean`                                                                                                                             | Whether the Autocomplete is invalid.                                                                                                                          | `false`                  |
| isDisabled                  | `boolean`                                                                                                                             | Whether the Autocomplete is disabled.                                                                                                                         | `false`                  |
| fullWidth                   | `boolean`                                                                                                                             | Whether the input should take up the width of its parent.                                                                                                     | `true`                   |
| selectorIcon                | `ReactNode`                                                                                                                           | The icon that represents the autocomplete open state. Usually a chevron icon.                                                                                 | -                        |
| clearIcon                   | `ReactNode`                                                                                                                           | The icon to be used in the clear button. Usually a cross icon.                                                                                                | -                        |
| showScrollIndicators        | `boolean`                                                                                                                             | Whether the scroll indicators should be shown when the listbox is scrollable.                                                                                 | `true`                   |
| scrollRef                   | `React.RefObject<HTMLElement>`                                                                                                        | A ref to the scrollable element.                                                                                                                              | -                        |
| inputProps                  | [InputProps](/docs/components/input#api)                                                                                              | Props to be passed to the Input component.                                                                                                                    | -                        |
| popoverProps                | [PopoverProps](/docs/components/popover#api)                                                                                          | Props to be passed to the Popover component.                                                                                                                  | -                        |
| listboxProps                | [ListboxProps](/docs/components/listbox#api)                                                                                          | Props to be passed to the Listbox component.                                                                                                                  | -                        |
| scrollShadowProps           | [ScrollShadowProps](/docs/components/scroll-shadow#api)                                                                               | Props to be passed to the ScrollShadow component.                                                                                                             | -                        |
| selectorButtonProps         | [ButtonProps](/docs/components/button#api)                                                                                            | Props to be passed to the selector button.                                                                                                                    | -                        |
| clearButtonProps            | [ButtonProps](/docs/components/button#api)                                                                                            | Props to be passed to the clear button.                                                                                                                       | -                        |
| isClearable                 | `boolean`                                                                                                                             | Whether the clear button should be shown.                                                                                                                     | `true`                   |
| disableClearable            | `boolean`                                                                                                                             | Whether the clear button should be hidden. (**Deprecated**) Use `isClearable` instead.                                                                        | `false`                  |
| disableAnimation            | `boolean`                                                                                                                             | Whether the Autocomplete should be animated.                                                                                                                  | `true`                   |
| disableSelectorIconRotation | `boolean`                                                                                                                             | Whether the select should disable the rotation of the selector icon.                                                                                          | `false`                  |
| classNames                  | `Record<"base"｜ "listboxWrapper"｜ "listbox"｜ "popoverContent" ｜ "endContentWrapper"｜ "clearButton" ｜ "selectorButton", string>` | Allows to set custom class names for the Autocomplete slots.                                                                                                  | -                        |

### Autocomplete Events

| Attribute         | Type                                                         | Description                                                                                                                                   |
| ----------------- | ------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |
| onOpenChange      | `(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void` | Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu. |
| onInputChange     | `(value: string) => void`                                    | Handler that is called when the Autocomplete input value changes.                                                                             |
| onSelectionChange | `(key: React.Key) => void`                                   | Handler that is called when the Autocomplete selection changes.                                                                               |
| onFocus           | `(e:  FocusEvent<HTMLInputElement>) => void`                 | Handler that is called when the Autocomplete input is focused.                                                                                |
| onBlur            | `(e:  FocusEvent<HTMLInputElement>) => void`                 | Handler that is called when the Autocomplete input is blurred.                                                                                |
| onFocusChange     | `(isFocused: boolean) => void`                               | Handler that is called when the Autocomplete input focus changes.                                                                             |
| onKeyDown         | `(e: KeyboardEvent) => void`                                 | Handler that is called when a key is pressed.                                                                                                 |
| onKeyUp           | `(e: KeyboardEvent) => void`                                 | Handler that is called when a key is released.                                                                                                |
| onClose           | `() => void`                                                 | Handler that is called when the Autocomplete's Popover is closed.                                                                             |

---

### AutocompleteItem Props

Check the [ListboxItem](/docs/components/listbox#listboxitem-props) props.

### AutocompleteItem Events

Check the [ListboxItem](/docs/components/listbox#listboxitem-events) events.

### AutocompleteSection Props

Check the [ListboxSection](/docs/components/listbox#listboxsection-props) props.

---

### Types

#### Menu Trigger Action

```ts
type MenuTriggerAction = "focus" | "input" | "manual";
```

---
title: "Avatar"
description: "The Avatar component is used to represent a user, and displays the profile picture, initials or fallback icon."
---

import {avatarContent} from "@/content/components/avatar";


# Avatar

The Avatar component is used to represent a user, and displays the profile picture, initials or fallback icon.

<ComponentLinks component="avatar" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add avatar",
    npm: "npm install @nextui-org/avatar",
    yarn: "yarn add @nextui-org/avatar",
    pnpm: "pnpm add @nextui-org/avatar",
    bun: "bun add @nextui-org/avatar"
  }}
/>


## Import

NextUI exports 3 avatar-related components:

- **Avatar**: The main component to display an avatar.
- **AvatarGroup**: A wrapper component to display a group of avatars.
- **AvatarIcon**: The default icon used as fallback when the image fails to load.

<ImportTabs
  commands={{
    main: 'import {Avatar, AvatarGroup, AvatarIcon} from "@nextui-org/react";',
    individual: 'import {Avatar, AvatarGroup, AvatarIcon} from "@nextui-org/avatar";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={avatarContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={avatarContent.sizes} />

### Disabled

<CodeDemo title="Disabled" files={avatarContent.disabled} />

### Bordered

<CodeDemo title="Bordered" files={avatarContent.bordered} />

### Radius

<CodeDemo title="Radius" files={avatarContent.radius} />

### Colors

<CodeDemo title="Colors" files={avatarContent.colors} />

### Avatar Fallbacks

If there is an error loading the `src` of the avatar, there are 2 fallbacks:

- If there's a `name` prop, we use it to generate the initials and a random, accessible background color.
- If there's no `name` prop, we use a default avatar.

If the `showFallback` is not passed, the fallbacks will not be displayed.

<CodeDemo title="Avatar Fallbacks" files={avatarContent.fallbacks} />

### Custom Fallback

You can also provide a custom fallback component to be displayed when the `src` fails to load.

<CodeDemo title="Custom Fallback" files={avatarContent.customFallback} />

### Custom Implementation

In case you need to customize the avatar even further, you can use the `useAvatar` hook to create your own implementation.

<CodeDemo showPreview={false} title="Custom implementation" files={avatarContent.customImpl} />

### Custom initials logic

It is possible to customize the logic used to generate the initials by passing a function to the `getInitials` prop.
By default we merge the first characters of each word in the `name` prop.

## Avatar Group

<CodeDemo title="Avatar Group" files={avatarContent.group} />

### Group Disabled

<CodeDemo title="Group Disabled" files={avatarContent.groupDisabled} />

### Group Max Count

You can limit the number of avatars displayed by passing the `max` prop to the `AvatarGroup` component.

<CodeDemo title="Group Max Count" files={avatarContent.groupMax} />

### Group Total Count

You can display the total number of avatars by passing the `total` prop to the `AvatarGroup` component.

<CodeDemo title="Group Total Count" files={avatarContent.groupTotal} />

### Group Custom count

NextUI provides a `renderCount` prop to customize the count displayed when the `total` prop is passed.

<CodeDemo title="Group Custom count" files={avatarContent.groupCustomCount} />

### Group Grid

By passing the `isGrid` prop to the `AvatarGroup` component, the avatars will be displayed in a grid layout.

<CodeDemo title="Usage" files={avatarContent.groupGrid} />

### Group Custom Implementation

In case you need to customize the avatar group even further, you can use the `useAvatarGroup` hook and the
`AvatarGroupProvider` to create your own implementation.

<CodeDemo showPreview={false} title="Custom implementation" files={avatarContent.groupCustomImpl} />

## Slots

- **base**: Avatar wrapper, it includes styles for focus ring, position, and general appearance.
- **img**: Image element within the avatar, it includes styles for opacity transition and size.
- **fallback**: Fallback content when the image fails to load or is not provided, it includes styles for centering the content.
- **name**: Initials displayed when the image is not provided or fails to load, it includes styles for font, text alignment, and inheritance.
- **icon**: Icon element within the avatar, it includes styles for centering the content, text inheritance, and size.

### Custom Avatar Styles

You can customize any part of the avatar by using the `classNames` prop, each `slot` has its own `className`.

<CodeDemo title="Custom Avatar" files={avatarContent.custom} />

<Spacer y={4} />

## Data Attributes

`Avatar` has the following attributes on the `base` element:

- **data-hover**:
  When the avatar is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the avatar is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html), it is applied when `isFocusable` is `true` or when the `as` property is assigned as `button`.
- **data-focus-visible**:
  When the avatar is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html), it is applied when `isFocusable` is `true` or when the `as` property is assigned as `button`.

<Spacer y={4} />

## API

### Avatar Props

| Attribute    | Type                                                                        | Description                                                                  | Default   |
| ------------ | --------------------------------------------------------------------------- | ---------------------------------------------------------------------------- | --------- |
| src          | `string`                                                                    | The source URL of the image to be displayed.                                 | -         |
| color        | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | Sets the avatar background color.                                            | `default` |
| radius       | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | Sets the avatar border radius.                                               | `full`    |
| size         | `sm` \| `md` \| `lg`                                                        | Sets the avatar size.                                                        | `md`      |
| name         | `string`                                                                    | Displays the initials if the image is not provided or fails to load.         | -         |
| icon         | `ReactNode`                                                                 | Displays a custom icon inside the avatar.                                    | -         |
| fallback     | `ReactNode`                                                                 | A custom fallback component to display when the image fails to load.         | -         |
| isBordered   | `boolean`                                                                   | If `true`, adds a border around the avatar.                                  | `false`   |
| isDisabled   | `boolean`                                                                   | If `true`, disables the avatar and applies a disabled styling.               | `false`   |
| isFocusable  | `boolean`                                                                   | If `true`, makes the avatar focusable for keyboard navigation.               | `false`   |
| showFallback | `boolean`                                                                   | If `true`, shows the fallback icon or initials when the image fails to load. | `false`   |
| ImgComponent | `React.ElementType`                                                         | The component to be used as the image element.                               | `img`     |
| imgProps     | `ImgComponentProps`                                                         | Props to be passed to the image element.                                     | -         |
| classNames   | `Record<"base"｜ "img"｜ "fallback"｜ "name"｜ "icon", string>`             | Allows to set custom class names for the avatar slots.                       | -         |

### Avatar Group Props

| Attribute   | Type                               | Description                                         | Default |
| ----------- | ---------------------------------- | --------------------------------------------------- | ------- |
| max         | `number`                           | The maximum number of visible avatars               | `5`     |
| total       | `number`                           | Control the number of avatar not visible            | -       |
| size        | `AvatarProps['size']`              | Size of the avatars                                 | -       |
| color       | `AvatarProps['color']`             | Color of the avatars                                | -       |
| radius      | `AvatarProps['radius']`            | Radius of the avatars                               | -       |
| isGrid      | `boolean`                          | Whether the avatars should be displayed in a grid   | `false` |
| isDisabled  | `boolean`                          | Whether the avatars are disabled                    | -       |
| isBordered  | `boolean`                          | Whether the avatars have a border                   | -       |
| renderCount | `(count: number) => ReactNode`     | This allows you to render a custom count component. | -       |
| classNames  | `Record<"base"｜ "count", string>` | Allows to set custom class names for the avatar group slots. | -  |

---
title: "Badge"
description: "Badges are used as a small numerical value or status descriptor for UI elements."
---

import {badgeContent} from "@/content/components/badge";

# Badge

Badges are used as a small numerical value or status descriptor for UI elements.

<ComponentLinks component="badge" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add badge",
    npm: "npm install @nextui-org/badge",
    yarn: "yarn add @nextui-org/badge",
    pnpm: "pnpm add @nextui-org/badge",
    bun: "bun add @nextui-org/badge"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Badge} from "@nextui-org/react";',
    individual: 'import {Badge} from "@nextui-org/badge";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={badgeContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={badgeContent.sizes} />

### Colors

<CodeDemo title="Colors" files={badgeContent.colors} />

### Variants

<CodeDemo title="Variants" files={badgeContent.variants} />

### Placements

<CodeDemo title="Placements" files={badgeContent.placements} />

### Shapes

For a better positioning, you can use the `shape` property to define the shape of the badge.

<CodeDemo title="Shapes" files={badgeContent.shapes} />

### Badge Visibility

You can control the visibility of the badge by using the `isInvisible` property.

<CodeDemo title="Badge visibility" files={badgeContent.visibility} />

### Content Examples

<CodeDemo title="Content examples" files={badgeContent.contentExamples} />

### Disable Outline

By default, the badge has an outline, you can disable it by using the `showOutline={false}` property.

<CodeDemo title="Disable outline" files={badgeContent.showOutline} />

### Accessibility

It's not advisable to depend on the badge's content for accurate announcement.
Instead, consider supplying a comprehensive description, such as using `aria-label`.

<CodeDemo title="Accessibility" files={badgeContent.a11y} />

<Spacer y={4} />

## API

### Badge Props

| Attribute        | Type                                                                        | Description                                                                              | Default     |
| ---------------- | --------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- | ----------- |
| children \*      | `ReactNode`                                                                 | The wrapped component.                                                                   | -           |
| content          | `string` \| `number` \| `ReactNode`                                         | The content of the badge. The badge will be rendered relative to its children.           | -           |
| variant          | `solid` \| `flat` \| `faded` \| `shadow`                                    | The variant style of the badge.                                                          | `solid`     |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the badge.                                                                  | `default`   |
| size             | `sm` \| `md` \| `lg`                                                        | The size of the badge.                                                                   | `md`        |
| shape            | `circle` \| `rectangle`                                                     | The shape of the badge.                                                                  | `rectangle` |
| placement        | `top-right` \| `top-left` \| `bottom-right` \| `bottom-left`                | The placement of the badge.                                                              | `top-right` |
| showOutline      | `boolean`                                                                   | If `true`, the badge will have an outline.                                               | `true`      |
| disableOutline   | `boolean`                                                                   | If `true`, the badge will not have an outline. **Deprecated** use `showOutline` instead. | `false`     |
| disableAnimation | `boolean`                                                                   | If `true`, the badge will not have an animation.                                         | `false`     |
| isInvisible      | `boolean`                                                                   | If `true`, the badge will be invisible.                                                  | `false`     |
| isOneChar        | `boolean`                                                                   | If `true`, the badge will have the same width and height.                                | `false`     |
| isDot            | `boolean`                                                                   | If `true`, the badge will have smaller dimensions.                                       | `false`     |
| classNames       | `Record<"base"｜"badge", string>`                                           | Allows to set custom class names for the badge slots.                                    | -           |

---
title: "Breadcrumbs"
description: "Breadcrumbs display a hierarchy of links to the current page or resource in an application."
---

import {breadcrumbsContent} from "@/content/components/breadcrumbs";

# Breadcrumbs

Breadcrumbs display a hierarchy of links to the current page or resource in an application.

<ComponentLinks component="breadcrumbs" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add breadcrumbs",
    npm: "npm install @nextui-org/breadcrumbs",
    yarn: "yarn add @nextui-org/breadcrumbs",
    pnpm: "pnpm add @nextui-org/breadcrumbs",
    bun: "bun add @nextui-org/breadcrumbs"
  }}
/>


## Import

NextUI exports 2 breadcrumb-related components:

- **Breadcumbs**: The main component, which is a wrapper for the other components.
- **BreadcrumbItem**: The component that represents a breadcrumb item.

<ImportTabs
  commands={{
    main: 'import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/react";',
    individual: 'import {Breadcrumbs, BreadcrumbItem} from "@nextui-org/breadcrumbs";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={breadcrumbsContent.usage} />

### Disabled

Disabled breadcrumbs display items but prevent navigation, ensuring a consistent layout. The last item, signifying the current page, isn't disabled.

<CodeDemo title="Disabled" files={breadcrumbsContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={breadcrumbsContent.sizes} />

### Colors

<CodeDemo title="Colors" files={breadcrumbsContent.colors} />

### Variants

<CodeDemo title="Variants" files={breadcrumbsContent.variants} />

### Underlines

<CodeDemo title="Underlines" files={breadcrumbsContent.underlines} />

### Radius

<CodeDemo title="Radius" files={breadcrumbsContent.radius} />

### Routing

The `<BreadcrumbItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.

<CodeDemo title="Routing" files={breadcrumbsContent.routing} />

### Controlled

You can control the current/active item by using the `isCurrent` and `onAction` props.

<CodeDemo title="Controlled" files={breadcrumbsContent.controlled} />

> **Note**: If needed you can use the `onPress` prop to handle the click event on the breadcrumb item.

### Menu Type

It is possible to use the `Breadcrumbs` component as a horizontal menu. This is useful when you want to display a list
of possible navigations and let the user choose one of them.

<CodeDemo title="Menu Type" files={breadcrumbsContent.menuType} />

### Start & End Content

You can add any element to the start or end of the breadcrumbs by using the `startContent` and `endContent` props. The
above example uses the `startContent` prop to add icons to the start of the breadcrumbs.

<CodeDemo title="Start & End Content" files={breadcrumbsContent.startEndContent} />

### Custom Separator

You can customize the separator between breadcrumbs by using the `separator` prop.

<CodeDemo title="Separator" files={breadcrumbsContent.separator} />

### Custom Items

the `BreadcrumbItem` component accepts any element as its children. This allows you to customize the appearance of the
breadcrumb items.

The above example uses the [Dropdown](/docs/components/dropdown) component to create a dropdown menu in the breadcrumb.

<CodeDemo title="Custom Items" files={breadcrumbsContent.customItems} />

The `Breadcrumbs` component picks only the `BreadcrumbItem` components as its children. This means that you cannot
place any other component directly inside the `Breadcrumbs` component.

```tsx
// ❌ This will not work,
// The Button will not be picked by the Breadcrumbs component.
<Breadcrumbs>
  <BreadcrumbItem>Item 1</BreadcrumbItem>
  <Button>Item 2</Button>
</Breadcrumbs>

// ✅ Instead, you can wrap the Button inside a BreadcrumbItem.
<Breadcrumbs>
  <BreadcrumbItem>Item 1</BreadcrumbItem>
  <BreadcrumbItem>
    <Button>Item 2</Button>
  </BreadcrumbItem>
</Breadcrumbs>
```

### Collapsing Items

The `Breadcrumb` component provides 3 props to control the collapsing of items:

- `maxItems`: Specifies the maximum number of breadcrumbs to display. When there are more
  than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
  will be shown, with an ellipsis in between.
- `itemsBeforeCollapse`: If max items is exceeded, the number of items to show before the ellipsis.
- `itemsAfterCollapse`: If max items is exceeded, the number of items to show after the ellipsis.

<CodeDemo title="Collapsing Items" files={breadcrumbsContent.collapsingItems} />

> **Note**: The ellipsis item will use the first collapsed item as its `href` prop.

### Customizing the Ellipsis Item

You can customize the ellipsis item by using the `renderEllipsis` prop. This prop accepts a function that returns a
React element.

<CodeDemo title="Customizing the Ellipsis Item" files={breadcrumbsContent.customizingEllipsis} />

## Slots

- Breadcrumbs Slots

- **base**: The main slot for the breadcrumbs. It wraps the `list` slot.
- **list**: The list of breadcrumbs wrapper.
- **ellipsis**: The slot for the ellipsis item. This is only visible when the breadcrumbs are collapsed.
- **separator**: The slot for the custom separator, the one that can be set using the `separator` prop.

- BreadcrumbItem Slots

- **base**: The main slot for the breadcrumb item. It wraps the `item` slot.
- **item**: The breadcrumb item wrapper.
- **separator**: The slot for the item separator.

### Customizing the Breadcrumbs Styles

You can customize the `Breadcrumbs` style by using the `classNames` prop and its items by using the `itemClasses` prop.

<CodeDemo title="Custom Breadcrumbs Styles" files={breadcrumbsContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`BreadcrumbItem` has the following attributes on the `item` element:

- **data-current**:
  When the breadcrumb item is the current item. Based on breadcrumb `isCurrent` prop or on whether the item is the last one.
- **data-disabled**:
  When the breadcrumb item is disabled. Based on breadcrumb `isDisabled` prop.
- **data-focus**:
  When the breadcrumb item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the breadcrumb item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Implemented as an ordered list of items.
- Support for mouse, touch, and keyboard interactions on breadcrumbs.
- Support for navigation links via `<a>` elements or custom element types via ARIA.
- Localized ARIA labeling support for landmark navigation region.
- Support for disabled breadcrumbs.
- The last item is automatically marked as the current page using `aria-current`.

<Spacer y={4} />

## API

### Breadcrumbs Props

| Attribute           | Type                                                                           | Description                                                                     | Default      |
| ------------------- | ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------- | ------------ |
| children\*          | `ReactNode`                                                                    | The contents of the Breadcrumbs. Usually a list of `BreadcrumbItem` components. | -            |
| variant             | `solid` \| `bordered` \| `light`                                               | The Breadcrumbs list appearance style.                                          | `solid`      |
| color               | `foreground` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The Breadcrumbs' items color theme.                                             | `foreground` |
| size                | `sm` \| `md` \| `lg`                                                           | The Breadcrumbs' items size.                                                    | `md`         |
| radius              | `none` \| `sm` \| `md` \| `lg` \| `full`                                       | The Breadcrumbs list border radius.                                             | -            |
| underline           | `none` \| `active` \| `hover` \| `focus` \| `always`                           | The Breadcrumbs' items underline style.                                         | `none`       |
| separator           | `ReactNode`                                                                    | The custom separator between Breadcrumbs. It is a chevron by default.           | -            |
| maxItems            | `number`                                                                       | The maximum number of breadcrumbs to display.                                   | -            |
| itemsBeforeCollapse | `number`                                                                       | The number of items to show before the ellipsis.                                | -            |
| itemsAfterCollapse  | `number`                                                                       | The number of items to show after the ellipsis.                                 | -            |
| hideSeparator       | `boolean`                                                                      | Whether to hide the separator between breadcrumbs.                              | `false`      |
| isDisabled          | `boolean`                                                                      | Whether the Breadcrumbs are disabled except the last item.                      | `false`      |
| disableAnimation    | `boolean`                                                                      | Whether the Breadcrumbs should display animations.                              | `false`      |
| itemClasses         | `Record<"base"｜ "item"｜ "separator", string>`                                | Allows to set custom class names for the breadcrumbs item slots.                | -            |
| classNames          | `Record<"base"｜ "list"｜ "ellipsis"｜ "separator", string>`                   | Allows to set custom class names for the breadcrumbs slots.                     | -            |

### Breadcrumbs Functions

| Attribute      | Type                                                | Description                                                |
| -------------- | --------------------------------------------------- | ---------------------------------------------------------- |
| renderEllipsis | [RenderEllipsisFunction](#render-ellipsis-function) | Handler called when the press is released over the target. |

### Breadcrumbs Events

| Attribute | Type                       | Description                                                                  |
| --------- | -------------------------- | ---------------------------------------------------------------------------- |
| onAction  | `(key: React.Key) => void` | Handler called when any breadcrumb item is pressed. It returns the item key. |

<Spacer y={2} />

### BreadcrumbItem Props

| Attribute        | Type                                                                           | Description                                               | Default      |
| ---------------- | ------------------------------------------------------------------------------ | --------------------------------------------------------- | ------------ |
| children\*       | `ReactNode`                                                                    | The contents of the item. Usually the link label or icon. | -            |
| color            | `foreground` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The item color theme.                                     | `foreground` |
| size             | `sm` \| `md` \| `lg`                                                           | The item size.                                            | `md`         |
| underline        | `none` \| `active` \| `hover` \| `focus` \| `always`                           | The item underline style.                                 | `none`       |
| startContent     | `ReactNode`                                                                    | The item start content.                                   | -            |
| endContent       | `ReactNode`                                                                    | The item end content.                                     | -            |
| separator        | `ReactNode`                                                                    | The item custom separator. It is a chevron by default.    | -            |
| isCurrent        | `boolean`                                                                      | Whether the item is the current/active one.               | `false`      |
| isLast           | `boolean`                                                                      | Whether the item is the last one.                         | `false`      |
| hideSeparator    | `boolean`                                                                      | Whether to hide the item separator.                       | `false`      |
| isDisabled       | `boolean`                                                                      | Whether the item is disabled.                             | `false`      |
| disableAnimation | `boolean`                                                                      | Whether the item should display animations.               | `false`      |
| classNames       | `Record<"base"｜ "item"｜ "separator", string>`                                | Allows to set custom class names for the item slots.      | -            |

### BreadcrumbItem Events

| Attribute    | Type                         | Description                                                                                                 |
| ------------ | ---------------------------- | ----------------------------------------------------------------------------------------------------------- |
| onPress      | `(e: PressEvent) => void`    | Handler called when the press is released over the target.                                                  |
| onPressStart | `(e: PressEvent) => void`    | Handler called when a press interaction starts.                                                             |
| onPressEnd   | `(e: PressEvent) => void`    | Handler called when a press interaction ends, either over the target or when the pointer leaves the target. |
| onKeyDown    | `(e: KeyboardEvent) => void` | Handler called when a key is pressed.                                                                       |
| onKeyUp      | `(e: KeyboardEvent) => void` | Handler called when a key is released.                                                                      |

<Spacer y={2} />

### Types

#### Render Ellipsis Function

```ts
export type RenderEllipsisItemProps = {
  /**
   * The collapsed items.
   */
  items: BreadcrumbItemProps[];
  /**
   * The max number of items.
   */
  maxItems: number;
  /**
   * The picked item to render the ellipsis.
   */
  collapsedItem: ReactNode;
  /**
   * The default ellipsis icon.
   */
  ellipsisIcon: ReactNode;
  /**
   * Number of items to show before the ellipsis.
   */
  itemsBeforeCollapse: number;
  /**
   * Number of items to show after the ellipsis.
   */
  itemsAfterCollapse: number;
  /**
   * The separator between each breadcrumb. It is a chevron by default.
   */
  separator: ReactNode;
};

renderEllipsis: (props: RenderEllipsisItemProps) => ReactNode;
```

---
title: "Button"
description: "Buttons allow users to perform actions and choose with a single tap."
---

import {buttonContent} from "@/content/components/button";

# Button

Buttons allow users to perform actions and choose with a single tap.

<ComponentLinks component="button" reactAriaHook="useButton" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add button",
    npm: "npm install @nextui-org/button",
    yarn: "yarn add @nextui-org/button",
    pnpm: "pnpm add @nextui-org/button",
    bun: "bun add @nextui-org/button"
  }}
/>

## Import

NextUI exports 2 button-related components:

- **Button**: The main component to display a button.
- **ButtonGroup**: A wrapper component to display a group of buttons.

<ImportTabs
  commands={{
    main: 'import {Button, ButtonGroup} from "@nextui-org/react";',
    individual: 'import {Button, ButtonGroup} from "@nextui-org/button";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={buttonContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={buttonContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={buttonContent.sizes} />

### Radius

<CodeDemo title="Radius" files={buttonContent.radius} />

### Colors

<CodeDemo title="Colors" files={buttonContent.colors} />

### Variants

<CodeDemo title="Variants" files={buttonContent.variants} />

### Loading

Pass the `isLoading` prop to display a [Spinner](/docs/components/spinner) component inside the button.

<CodeDemo title="Loading" files={buttonContent.loading} />

You can also customize the loading spinner by passing the a custom component to the `spinner` prop.

<CodeDemo title="Custom Loading" files={buttonContent.loadingCustom} />

### With Icons

You can add icons to the `Button` by passing the `startContent` or `endContent` props.

<CodeDemo title="With Icons" files={buttonContent.icons} />

### Icon Only

You can also display a button without text by passing the `isIconOnly` prop and the desired icon as `children`.

<CodeDemo title="With Icons" files={buttonContent.iconOnly} />

### Custom Styles

You can customize the `Button` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={buttonContent.customStyles} />

> Custom class names will override the default ones thanks to [Tailwind Merge](https://github.com/dcastil/tailwind-merge) library. It
> means that you don't need to worry about class conflicts.

### Custom Implementation

You can also use the `useButton` hook to create your own button component.

<CodeDemo showPreview={false} title="Custom Implementation" files={buttonContent.customImpl} />

## Button Group

<CodeDemo title="Button Group" files={buttonContent.group} />

### Group Disabled

The `ButtonGroup` component also accepts the `isDisabled` prop to disable all buttons inside it.

<CodeDemo title="Group Disabled" files={buttonContent.groupDisabled} />

### Group Use case

A common use case for the `ButtonGroup` component is to display a group of two buttons one for the selected value and another for the `dropdown`.

<CodeDemo title="Group Use case" files={buttonContent.groupUseCase} />

> See the [Dropdown](/docs/components/dropdown) component for more details.

<Spacer y={4} />

## Data Attributes

`Button` has the following attributes on the `base` element:

- **data-hover**:
  When the button is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the button is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the button is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the button is disabled. Based on `isDisabled` prop.
- **data-pressed**:
  When the button is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-loading**:
  When the button is loading. Based on `isLoading` prop.

<Spacer y={4} />

## Accessibility

- Button has role of `button`.
- Keyboard event support for <Kbd>Space</Kbd> and <Kbd>Enter</Kbd> keys.
- Mouse and touch event handling, and press state management.
- Keyboard focus management and cross browser normalization.

We recommend to read this [blog post](https://react-spectrum.adobe.com/blog/building-a-button-part-1.html) about the complexities of
building buttons that work well across devices and interaction methods.

<Spacer y={4} />

## API

### Button Props

| Attribute        | Type                                                                         | Description                                                  | Default   |
| ---------------- | ---------------------------------------------------------------------------- | ------------------------------------------------------------ | --------- |
| children         | `ReactNode`                                                                  | The content to display in the button.                        | -         |
| variant          | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow` \| `ghost` | The button appearance style.                                 | `solid`   |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`  | The button color theme.                                      | `default` |
| size             | `sm` \| `md` \| `lg`                                                         | The button size.                                             | `md`      |
| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                     | The button border radius.                                    | -         |
| startContent     | `ReactNode`                                                                  | The button start content.                                    | -         |
| endContent       | `ReactNode`                                                                  | The button end content.                                      | -         |
| spinner          | `ReactNode`                                                                  | Spinner to display when loading.                             | -         |
| spinnerPlacement | `start` \| `end`                                                             | The spinner placement.                                       | `start`   |
| fullWidth        | `boolean`                                                                    | Whether the button should take the full width of its parent. | `false`   |
| isIconOnly       | `boolean`                                                                    | Whether the button should have the same width and height.    | `false`   |
| isDisabled       | `boolean`                                                                    | Whether the button is disabled.                              | `false`   |
| isLoading        | `boolean`                                                                    | Whether the button is loading.                               | `false`   |
| disableRipple    | `boolean`                                                                    | Whether the button should display a ripple effect on press.  | `false`   |
| disableAnimation | `boolean`                                                                    | Whether the button should display animations.                | `false`   |

### Button Events

| Attribute     | Type                           | Description                                                                                                     |
| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------- |
| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                      |
| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                 |
| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.     |
| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                    |
| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not. |
| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler called when a key is pressed.                                                                           |
| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler called when a key is released.                                                                          |
| onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                 |

### Button Group Props

| Attribute  | Type                                                                         | Description                                     | Default   |
| ---------- | ---------------------------------------------------------------------------- | ----------------------------------------------- | --------- |
| children   | `ReactNode` \| `ReactNode[]`                                                 | The buttons to display.                         | -         |
| variant    | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow` \| `ghost` | The buttons appearance style.                   | `solid`   |
| color      | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`  | The buttons color theme.                        | `default` |
| size       | `sm` \| `md` \| `lg`                                                         | The buttons size.                               | `md`      |
| radius     | `none` \| `sm` \| `md` \| `lg` \| `full`                                     | The buttons border radius.                      | `xl`      |
| fullWidth  | `boolean`                                                                    | Whether the buttons should take the full width. | `false`   |
| isDisabled | `boolean`                                                                    | Whether the buttons are disabled.               | `false`   |

---
title: "Calendar"
description: "The Calendar component is used to display one or more date grids and allows users to select a single date."
---

import {calendarContent} from "@/content/components/calendar";

# Calendar

A calendar consists of a grouping element containing one or more date grids (e.g. months), and a previous and next button for navigating between date ranges. Each calendar grid consists of cells containing button elements that can be pressed and navigated to using the arrow keys to select a date.

<ComponentLinks component="calendar" reactAriaHook="useCalendar" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add calendar",
    npm: "npm install @nextui-org/calendar",
    yarn: "yarn add @nextui-org/calendar",
    pnpm: "pnpm add @nextui-org/calendar",
    bun: "bun add @nextui-org/calendar",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Calendar} from "@nextui-org/react";',
    individual: 'import {Calendar} from "@nextui-org/calendar";',
  }}
/>

## Usage

A Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the `value` prop.

Date values are provided using objects in the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) package. This library handles correct international date manipulation across calendars, time zones, and other localization concerns.

<CodeDemo title="Usage" files={calendarContent.usage} />

### Disabled

The `isDisabled` boolean prop makes the Calendar disabled. Cells cannot be focused or selected.

<CodeDemo title="Disabled" files={calendarContent.disabled} />

### Read Only

The `isReadOnly` boolean prop makes the Calendar's value immutable. Unlike `isDisabled`, the Calendar remains focusable.

<CodeDemo title="Read Only" files={calendarContent.readonly} />

### Controlled

A Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the value prop.

<CodeDemo title="Controlled" files={calendarContent.controlled} />

### Min Date Value

By default, Calendar allows selecting any date. The `minValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates after today.

<CodeDemo title="Min Date Value" files={calendarContent.minDateValue} />

### Max Date Value

By default, Calendar allows selecting any date. The `maxValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates before today.

<CodeDemo title="Max Date Value" files={calendarContent.maxDateValue} />

### Unavailable Dates

Calendar supports marking certain dates as unavailable. These dates remain focusable with the keyboard so that navigation is consistent, but cannot be selected by the user. In this example, they are displayed in red. The `isDateUnavailable` prop accepts a callback that is called to evaluate whether each visible date is unavailable.

<CodeDemo title="Unavailable Dates" files={calendarContent.unavailableDates} />

### Controlled Focused Value

Calendar tries to avoid allowing the user to select invalid dates in the first place. However, if according to application logic a selected date is invalid, the isInvalid prop can be set. This alerts assistive technology users that the selection is invalid, and can be used for styling purposes as well. In addition, the errorMessage slot may be used to help the user fix the issue.

By default, the selected date is focused when a Calendar first mounts. If no `value` or `defaultValue` prop is provided, then the current date is focused. However, Calendar supports controlling which date is focused using the `focusedValue` and `onFocusChange` props. This also determines which month is visible. The `defaultFocusedValue` prop allows setting the initial focused date when the Calendar first mounts, without controlling it.

<CodeDemo title="Controlled Focused Value" files={calendarContent.controlledFocusedValue} />

### Invalid Date

This example validates that the selected date is a weekday and not a weekend according to the current locale.

<CodeDemo title="Invalid Date" files={calendarContent.invalidDate} />

### With Month And Year Picker

Calendar supports month and year picker for rapid selection.

<CodeDemo title="With Month And Year Picker" files={calendarContent.withMonthAndYearPicker} />

### International Calendars

Calendar supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the `Provider` component.

<CodeDemo title="International Calendars" files={calendarContent.internationalCalendars} />

### Visible Months

By default, the Calendar displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time.

<CodeDemo title="Visible Months" files={calendarContent.visibleMonths} />

### Page Behaviour

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behaviour" files={calendarContent.pageBehaviour} />

### Presets

Here's the example to customize `topContent` and `bottomContent` to have some preset values.

<CodeDemo title="Presets" files={calendarContent.presets} />

## Slots

- **base**: Calendar wrapper, it handles alignment, placement, and general appearance.
- **prevButton**: The previous button of the calendar.
- **nextButton**: The next button of the calendar.
- **headerWrapper**: Wraps the picker (month / year).
- **header**: The header element.
- **title**: A description of the visible date range, for use in the calendar title.
- **gridWrapper**: The wrapper for the calendar grid.
- **grid**: The date grid element (e.g. `<table>`).
- **gridHeader**: The date grid header element (e.g. `<th>`).
- **gridHeaderRow**: The date grid header row element (e.g. `<tr>`).
- **gridHeaderCell**: The date grid header cell element (e.g. `<td>`).
- **gridBody**: The date grid body element (e.g. `<tbody>`).
- **gridBodyRow**: The date grid body row element (e.g. `<tr>`).
- **cell**: The date grid cell element (e.g. `<td>`).
- **cellButton**: The button element within the cell.
- **pickerWrapper**: The wrapper for the picker
- **pickerMonthList**: The month list picker.
- **pickerYearList**: The year list picker.
- **pickerHighlight**: The highlighted item of the picker.
- **pickerItem**: The item of the picker.
- **helperWrapper**: The helper message of the calendar.
- **errorMessage**: The error message of the calendar.

<Spacer y={4} />

## Data Attributes

`Calendar` has the following attributes on the `CalendarCell` element:

- **data-focused**:
  Whether the cell is focused.
- **data-hovered**:
  Whether the cell is currently hovered with a mouse.
- **data-pressed**:
  Whether the cell is currently being pressed.
- **data-unavailable**:
  Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they are unavailable, such as a different color or a strikethrough.
- **data-disabled**:
  Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.
- **data-focus-visible**:
  Whether the cell is keyboard focused.
- **data-outside-visible-range**:
  Whether the cell is outside the visible range of the calendar.
- **data-outside-month**:
  Whether the cell is outside the current month.
- **data-selected**:
  Whether the cell is selected.
- **data-selected-start**:
  Whether the cell is the first date in a range selection.
- **data-selected-end**:
  Whether the cell is the last date in a range selection.
- **data-invalid**:
  Whether the cell is part of an invalid selection.

<Spacer y={4} />

## Accessibility

- Display one or more months at once, or a custom time range for use cases like a week view. Minimum and maximum values, unavailable dates, and non-contiguous selections are supported as well.
- Support for 13 calendar systems used around the world, including Gregorian, Buddhist, Islamic, Persian, and more. Locale-specific formatting, number systems, and right-to-left support are available as well.
- Calendar cells can be navigated and selected using the keyboard, and localized screen reader messages are included to announce when the selection and visible date range change.

<Spacer y={4} />

## API

### Calendar Props

| Attribute               | Type                                                                                                                                                                                                                                                                                                                                                                                          | Description                                                                                                                                                                               | Default             |
| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- |
| value                   | `DateValue \| null`                                                                                                                                                                                                                                                                                                                                                                           | The current value (controlled).                                                                                                                                                           | -                   |
| defaultValue            | `DateValue \| null`                                                                                                                                                                                                                                                                                                                                                                           | The default value (uncontrolled).                                                                                                                                                         | -                   |
| minValue                | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The minimum allowed date that a user may select.                                                                                                                                          | -                   |
| maxValue                | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The maximum allowed date that a user may select.                                                                                                                                          | -                   |
| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                                                                                                                                                                                                                                   | The color of the time input.                                                                                                                                                              | `default`           |
| visibleMonths           | `number`                                                                                                                                                                                                                                                                                                                                                                                      | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop                                    | `1`                 |
| focusedValue            | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | Controls the currently focused date within the calendar.                                                                                                                                  | -                   |
| defaultFocusedValue     | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The date that is focused when the calendar first mounts (uncountrolled).                                                                                                                  | -                   |
| calendarWidth           | `number` \| `string`                                                                                                                                                                                                                                                                                                                                                                          | The width to be applied to the calendar component. This value is multiplied by the `visibleMonths` number to determine the total width of the calendar.                                   | `256`               |
| pageBehavior            | `single` \| `visible`                                                                                                                                                                                                                                                                                                                                                                         | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                                       | `visible`           |
| weekdayStyle            | `narrow` \|`short` \| `long` \| `undefined`                                                                                                                                                                                                                                                                                                                                                   | The style of weekday names to display in the calendar grid header, e.g. single letter, abbreviation, or full day name.                                                                    | `narrow`            |
| showMonthAndYearPickers | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the label should be crossed out.                                                                                                                                                  | `false`             |
| isDisabled              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar is disabled.                                                                                                                                                         | `false`             |
| isReadOnly              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar value is immutable.                                                                                                                                                  | `false`             |
| isInvalid               | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the current selection is invalid according to application logic.                                                                                                                  | -                   |
| autoFocus               | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to automatically focus the calendar when it mounts.                                                                                                                               | `false`             |
| showHelper              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to show the description or error message.                                                                                                                                         | `false`             |
| showShadow              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to show the shadow in the selected date.                                                                                                                                          | `false`             |
| isHeaderExpanded        | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar header is expanded. This is only available if the `showMonthAndYearPickers` prop is set to `true`.                                                                   | `false`             |
| isHeaderDefaultExpanded | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar header should be expanded by default.This is only available if the `showMonthAndYearPickers` prop is set to `true`.                                                  | `false`             |
| topContent              | `ReactNode`                                                                                                                                                                                                                                                                                                                                                                                   | Custom content to be included in the top of the calendar.                                                                                                                                 | -                   |
| bottomContent           | `ReactNode`                                                                                                                                                                                                                                                                                                                                                                                   | Custom content to be included in the bottom of the calendar.                                                                                                                              | -                   |
| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                                                                                                                                                                                                                                                                                | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                                                  | -                   |
| createCalendar          | `(calendar: SupportedCalendars) => Calendar \| null`                                                                                                                                                                                                                                                                                                                                          | This function helps to reduce the bundle size by providing a custom calendar system. You can also use the NextUIProvider to provide the createCalendar function to all nested components. | `all<br> calendars` |
| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                                                                                                                                                                                                                                                             | An error message for the field.                                                                                                                                                           | -                   |
| hideDisabledDates       | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to hide the disabled or invalid dates.                                                                                                                                            | `false`             |
| disableAnimation        | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to disable the animation of the calendar.                                                                                                                                         | `false`             |
| classNames              | `Record<"base"｜ "prevButton"｜ "nextButton"｜ "headerWrapper" \| "header" \| "title" \| "content" \| "gridWrapper" \| "grid" \| "gridHeader" \| "gridHeaderRow" \| "gridHeaderCell" \| "gridBody" \| "gridBodyRow" \| "cell" \| "cellButton" \| "pickerWrapper" \| "pickerMonthList" \| "pickerYearList" \| "pickerHighlight" \| "pickerItem" \| "helperWrapper" \| "errorMessage", string>`  | Allows to set custom class names for the calendar slots.                                                                                                                                  | -                   |

### Calendar Events

| Attribute              | Type                               | Description                                                                                                                              |
| ---------------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| onChange               | `(value: MappedDateValue) => void` | Handler that is called when the value changes.                                                                                           |
| onFocusChange          | `(date: CalendarDate) => void`     | Handler that is called when the focused date changes.                                                                                    |
| onHeaderExpandedChange | `(isExpanded: boolean) => void`    | The event handler for the calendar header expanded state. This is only available if the `showMonthAndYearPickers` prop is set to `true`. |

### Types

#### Supported Calendars

```ts
/**
 * Supported react-aria i18n calendars.
 */
export type SupportedCalendars =
  | "buddhist"
  | "ethiopic"
  | "ethioaa"
  | "coptic"
  | "hebrew"
  | "indian"
  | "islamic-civil"
  | "islamic-tbla"
  | "islamic-umalqura"
  | "japanese"
  | "persian"
  | "roc"
  | "gregory";
```

---
title: "Card"
description: "Card is a container for text, photos, and actions in the context of a single subject."
---

import {cardContent} from "@/content/components/card";

# Card

Card is a container for text, photos, and actions in the context of a single subject.

<ComponentLinks component="card" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add card",
    npm: "npm install @nextui-org/card",
    yarn: "yarn add @nextui-org/card",
    pnpm: "pnpm add @nextui-org/card",
    bun: "bun add @nextui-org/card"
  }}
/>


## Import

NextUI exports 4 card-related components:

- **Card**: The main component to display a card.
- **CardHeader**: Commonly used for the title of a card.
- **CardBody**: The content of the card.
- **CardFooter**: Commonly used for actions.

<ImportTabs
  commands={{
    main: 'import {Card, CardHeader, CardBody, CardFooter} from "@nextui-org/react";',
    individual: 'import {Card, CardHeader, CardBody, CardFooter} from "@nextui-org/card";',
  }}
/>

## Usage

<CodeDemo isPreviewCentered title="Usage" files={cardContent.usage} />

### With Divider

<CodeDemo isPreviewCentered title="With Divider" files={cardContent.divider} />

> See the [Divider](/docs/components/divider) component for more details.

### With Image

<CodeDemo isPreviewCentered title="With Image" files={cardContent.image} />

### Blurred Footer

You can pass the `isFooterBlurred` prop to the card to blur the footer.

<CodeDemo isPreviewCentered title="Blurred Footer" files={cardContent.blurredFooter} />

### Composition

You can use other NextUI components inside the card to compose a more complex card.

<CodeDemo isPreviewCentered title="Composition" files={cardContent.composition} />

### Blurred Card

You can pass the `isBlurred` prop to the card to blur the card.

<CodeDemo isGradientBox title="Blurred Card" files={cardContent.blurred} />

### Primary Action

If you pass the `isPressable` prop to the card, it will be rendered as a button.

<CodeDemo title="Primary Action" files={cardContent.primaryAction} />

> **Note**: that the used callback function is `onPress` instead of `onClick`. Please see the [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html#usepress) component for more details.

### Cover Image

You can use `Image` component as the cover of the card by taking it out of the `CardBody` component.

<CodeDemo title="Cover Image" files={cardContent.coverImage} />

<Spacer y={4} />

## Data Attributes

`Card` has the following attributes on the `base` element:

- **data-hover**:
  When the card is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the card is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the card is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the card is disabled. Based on `isDisabled` prop.
- **data-pressed**:
  When the card is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)

<Spacer y={4} />

## API

### Card Props

| Attribute                 | Type                                                    | Description                                                                   | Default |
| ------------------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------- | ------- |
| children                  | `ReactNode` \| `ReactNode[]`                            | Usually the Card parts, `CardHeader`, `CardBody` and `CardFooter`.            | -       |
| shadow                    | `none` \| `sm` \| `md` \| `lg`                          | The card shadow.                                                              | `md`    |
| radius                    | `none` \| `sm` \| `md` \| `lg`                          | The card border radius.                                                       | `lg`    |
| fullWidth                 | `boolean`                                               | Whether the card should take the full width of its parent.                    | `false` |
| isHoverable               | `boolean`                                               | Whether the card should change the background on hover.                       | `false` |
| isPressable               | `boolean`                                               | Whether the card should allow to be pressed.                                  | `false` |
| isBlurred                 | `boolean`                                               | Whether the card background should be blurred.                                | `false` |
| isFooterBlurred           | `boolean`                                               | Whether the card footer background should be blurred.                         | `false` |
| isDisabled                | `boolean`                                               | Whether the card should be disabled. The press events will be ignored.        | `false` |
| disableAnimation          | `boolean`                                               | Whether to disable the animation.                                             | `false` |
| disableRipple             | `boolean`                                               | Whether to disable ripple effect. Only when `isPressable` is true.            | `false` |
| allowTextSelectionOnPress | `boolean`                                               | Whether to allow text selection on pressing. Only when `isPressable` is true. | `false` |
| classNames                | `Record<"base"｜ "header"｜ "body"｜ "footer", string>` | Allows to set custom class names for the card slots.                          | -       |

### Card Events

| Attribute     | Type                           | Description                                                                                                             |
| ------------- | ------------------------------ | ----------------------------------------------------------------------------------------------------------------------- |
| onPress       | `(e: PressEvent) => void`      | Handler that is called when the press is released over the target.                                                      |
| onPressStart  | `(e: PressEvent) => void`      | Handler that is called when a press interaction starts.                                                                 |
| onPressEnd    | `(e: PressEvent) => void`      | Handler that is called when a press interaction ends, either over the target or when the pointer leaves the target.     |
| onPressChange | `(isPressed: boolean) => void` | Handler that is called when the press state changes.                                                                    |
| onPressUp     | `(e: PressEvent) => void`      | Handler that is called when a press is released over the target, regardless of whether it started on the target or not. |

---
title: "Checkbox Group"
description: "A CheckboxGroup allows users to select one or more items from a list of choices."
---

import {checkboxGroupContent} from "@/content/components/checkbox-group";

# Checkbox Group

A CheckboxGroup allows users to select one or more items from a list of choices.

<ComponentLinks component="checkbox" storybook="checkboxgroup" reactAriaHook="useCheckboxGroup" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add checkbox",
    npm: "npm install @nextui-org/checkbox",
    yarn: "yarn add @nextui-org/checkbox",
    pnpm: "pnpm add @nextui-org/checkbox",
    bun: "bun add @nextui-org/checkbox"
  }}
/>


## Import

NextUI exports 2 checkbox-related components:

- **CheckboxGroup**: The root component, it wraps the label and the wrapper.
- **Checkbox**: The checkbox component.

<ImportTabs
  commands={{
    main: 'import {CheckboxGroup, Checkbox} from "@nextui-org/react";',
    individual: 'import {CheckboxGroup, Checkbox} from "@nextui-org/checkbox";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={checkboxGroupContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={checkboxGroupContent.disabled} />

### Horizontal

<CodeDemo title="Horizontal" files={checkboxGroupContent.horizontal} />

### Controlled

You can use the `value` and `onValueChange` properties to control the checkbox input value.

<CodeDemo title="Controlled" files={checkboxGroupContent.controlled} />

### Invalid

<CodeDemo title="Invalid" files={checkboxGroupContent.invalid} />

## Slots

- **base**: Checkbox group root wrapper, it wraps the label and the wrapper.
- **wrapper**: Checkbox group wrapper, it wraps all checkboxes.
- **label**: Checkbox group label, it is placed before the wrapper.
- **description**: The description of the checkbox group.
- **errorMessage**: The error message of the checkbox group.

### Custom Styles

You can customize the `CheckboxGroup` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={checkboxGroupContent.customStyles} />

### Custom Implementation

In case you need to customize the checkbox even further, you can use the `useCheckboxGroup` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={checkboxGroupContent.customImplementation} />

> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.

<Spacer y={4} />

## API

### Checkbox Group Props

| Attribute          | Type                                                                        | Description                                                                                                                                                   | Default    |
| ------------------ | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
| children           | `ReactNode[]` \| `ReactNode[]`                                              | The checkboxes items.                                                                                                                                         | -          |
| orientation        | `vertical` \| `horizontal`                                                  | The axis the checkbox group items should align with.                                                                                                          | `vertical` |
| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the checkboxes.                                                                                                                                  | `primary`  |
| size               | `xs` \| `sm` \| `md` \| `lg` \| `xl`                                        | The size of the checkboxes.                                                                                                                                   | `md`       |
| radius             | `none` \| `base` \| `xs` \| `sm` \| `md` \| `lg` \| `xl` \| `full`          | The radius of the checkboxes.                                                                                                                                 | `md`       |
| name               | `string`                                                                    | The name of the CheckboxGroup, used when submitting an HTML form.                                                                                             | -          |
| label              | `string`                                                                    | The label of the CheckboxGroup.                                                                                                                               | -          |
| value              | `string[]`                                                                  | The current selected values. (controlled).                                                                                                                    | -          |
| lineThrough        | `boolean`                                                                   | Whether the checkboxes label should be crossed out.                                                                                                           | `false`    |
| defaultValue       | `string[]`                                                                  | The default selected values. (uncontrolled).                                                                                                                  | -          |
| isInvalid          | `boolean`                                                                   | Whether the checkbox group is invalid.                                                                                                                        | `false`    |
| validationState    | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                        | -          |
| description        | `ReactNode`                                                                 | The checkbox group description.                                                                                                                               | -          |
| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | The checkbox group error message.                                                                                                                             | -          |
| validate           | `(value: string[]) => ValidationError ｜ true ｜ null ｜ undefined`          | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -          |
| validationBehavior | `native` \| `aria`                                                          | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |
| isDisabled         | `boolean`                                                                   | Whether the checkbox group is disabled.                                                                                                                       | `false`    |
| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                     | `false`    |
| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                           | -          |
| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                     | `false`    |
| classNames         | `Record<"base"｜ "wrapper"｜ "label", string>`                              | Allows to set custom class names for the checkbox group slots.                                                                                                | -          |

### Checkbox Group Events

| Attribute | Type                        | Description                                    |
| --------- | --------------------------- | ---------------------------------------------- |
| onChange  | `(value: string[]) => void` | Handler that is called when the value changes. |

---
title: "Checkbox"
description: "Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected."
---

import {checkboxContent} from "@/content/components/checkbox";

# Checkbox

Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.

<ComponentLinks component="checkbox" reactAriaHook="useCheckbox" />

---

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add checkbox",
    npm: "npm install @nextui-org/checkbox",
    yarn: "yarn add @nextui-org/checkbox",
    pnpm: "pnpm add @nextui-org/checkbox",
    bun: "bun add @nextui-org/checkbox"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Checkbox} from "@nextui-org/react";',
    individual: 'import {Checkbox} from "@nextui-org/checkbox";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={checkboxContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={checkboxContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={checkboxContent.sizes} />

### Colors

<CodeDemo title="Colors" files={checkboxContent.colors} />

### Radius

<CodeDemo title="Radius" files={checkboxContent.radius} />

### Indeterminate

The `isIndeterminate` prop sets a `Checkbox` to an indeterminate state, overriding its appearance and maintaining it until set to `false`, regardless of user interaction.

<CodeDemo title="Indeterminate" files={checkboxContent.indeterminate} />

### Line Through

<CodeDemo title="Line Through" files={checkboxContent.lineThrough} />

### Custom Check Icon

> By default, `IconProps` will be passed to your icon component.  Please make sure that `isSelected`, `isIndeterminate`, and `disableAnimation` are not passed to a DOM element.

<CodeDemo title="Custom Check Icon" files={checkboxContent.customCheckIcon} />

### Controlled

<CodeDemo title="Controlled Checkbox" files={checkboxContent.controlled} />

> **Note**: NextUI `Checkbox` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

## Slots

- **base**: Checkbox wrapper, it handles alignment, placement, and general appearance.
- **wrapper**: An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.
- **icon**: Icon within the checkbox, controlling size, visibility, and changes when checked.
- **label**: The text associated with the checkbox.

### Custom Styles

You can customize the `Checkbox` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={checkboxContent.customStyles} />

### Custom Implementation

In case you need to customize the checkbox even further, you can use the `useCheckbox` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={checkboxContent.customImplementation} />

> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.

<Spacer y={4} />

## Data Attributes

`Checkbox` has the following attributes on the `base` element:

- **data-selected**:
  When the checkbox is checked. Based on `isSelected` prop.
- **data-pressed**:
  When the checkbox is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-invalid**:
  When the checkbox is invalid. Based on `validationState` prop.
- **data-readonly**:
  When the checkbox is readonly. Based on `isReadOnly` prop.
- **data-indeterminate**:
  When the checkbox is indeterminate. Based on `isIndeterminate` prop.
- **data-hover**:
  When the checkbox is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the checkbox is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the checkbox is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the checkbox is disabled. Based on `isDisabled` prop.
- **data-loading**:
  When the checkbox is loading. Based on `isLoading` prop.

<Spacer y={4} />

## Accessibility

- Built with a native HTML `<input>` element.
- Full support for browser features like form autofill.
- Keyboard focus management and cross browser normalization.
- Keyboard event support for <Kbd>Tab</Kbd> and <Kbd>Space</Kbd> keys.
- Labeling support for assistive technology.
- Indeterminate state support.

<Spacer y={4} />

## API

### Checkbox Props

| Attribute        | Type                                                                        | Description                                                                                                           | Default   |
| ---------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------- |
| children         | `ReactNode`                                                                 | The label of the checkbox.                                                                                            | -         |
| icon             | [CheckboxIconProps](#checkbox-icon-props)                                   | The icon to be displayed when the checkbox is checked.                                                                | -         |
| value            | `string`                                                                    | The value of the checkbox element, used when submitting an HTML form.                                                    |           |
| name             | `string`                                                                    | The name of the checkbox element, used when submitting an HTML form.                                                     |           |
| size             | `sm` \| `md` \| `lg`                                                        | The size of the checkbox.                                                                                             | `md`      |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the checkbox.                                                                                            | `primary` |
| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The radius of the checkbox.                                                                                           | -         |
| lineThrough      | `boolean`                                                                   | Whether the label should be crossed out.                                                                              | `false`   |
| isSelected       | `boolean`                                                                   | Whether the element should be selected (controlled).                                                                  |           |
| defaultSelected  | `boolean`                                                                   | Whether the element should be selected (uncontrolled).                                                                |           |
| isRequired       | `boolean`                                                                   | Whether user checkbox is required on the checkbox before form submission.                                                   | `false`   |
| isReadOnly       | `boolean`                                                                   | Whether the checkbox can be selected but not changed by the user.                                                        |           |
| isDisabled       | `boolean`                                                                   | Whether the checkbox is disabled.                                                                                     | `false`   |
| isIndeterminate  | `boolean`                                                                   | Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction. |           |
| isInvalid        | `boolean`                                                                   | Whether the checkbox is invalid.                                                                                         | `false`   |
| validationState  | `valid` \| `invalid`                                                        | Whether the checkbox should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead. | -         |
| disableAnimation | `boolean`                                                                   | Whether the animation should be disabled.                                                                             | `false`   |
| classNames       | `Record<"base"｜ "wrapper"｜ "icon"｜ "label", string>`                     | Allows to set custom class names for the checkbox slots.                                                              | -         |

### Checkbox Events

| Attribute     | Type                                  | Description                                                                                                                                              |
| ------------- | ------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing `event.target.checked` (boolean). |
| onValueChange | `(isSelected: boolean) => void`       | Handler that is called when the element's selection state changes.                                                                                       |

### Types

#### Checkbox Icon Props

```ts
type IconProps = {
  "data-checked": string;
  isSelected: boolean;
  isIndeterminate: boolean;
  disableAnimation: boolean;
  className: string;
};

type CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);
```

---
title: "Chip"
description: "A Chip is a small block of essential information that represent an input, attribute, or action."
---

import {chipContent} from "@/content/components/chip";

# Chip

A Chip is a small block of essential information that represent an input, attribute, or action.

<ComponentLinks component="chip" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add chip",
    npm: "npm install @nextui-org/chip",
    yarn: "yarn add @nextui-org/chip",
    pnpm: "pnpm add @nextui-org/chip",
    bun: "bun add @nextui-org/chip"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Chip} from "@nextui-org/react";',
    individual: 'import {Chip} from "@nextui-org/chip";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={chipContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={chipContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={chipContent.sizes} />

### Colors

<CodeDemo title="Colors" files={chipContent.colors} />

### Radius

<CodeDemo title="Radius" files={chipContent.radius} />

### Variants

<CodeDemo title="Variants" files={chipContent.variants} />

### Start & End Content

<CodeDemo title="Start & End Content" files={chipContent.startEndContent} />

### With Close Button

If you pass the `onClose` prop, the close button will be visible. You can override the close icon by passing the `endContent` prop.

<CodeDemo title="With Close Button" files={chipContent.closeButton} />

### With Avatar

<CodeDemo title="With Avatar" files={chipContent.avatar} />

### List of Chips

<CodeDemo title="List of Chips" files={chipContent.list} />

## Slots

- **base**: The base slot of the chip, it is the container of the chip.
- **content**: The content slot of the chip, it is the container of the chip children.
- **dot**: Small dot on the left side of the chip. It is visible when the `variant=dot` prop is passed.
- **avatar**: Avatar classes of the chip. It is visible when the `avatar` prop is passed.
- **closeButton**: Close button classes of the chip. It is visible when the `onClose` prop is passed.

### Custom Styles

You can customize the `Chip` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={chipContent.customStyles} />

<Spacer y={4} />

## API

### Chip Props

| Attribute    | Type                                                                         | Description                                                                                                                  | Default   |
| ------------ | ---------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | --------- |
| children     | `ReactNode`                                                                  | The content of the chip.                                                                                                     | -         |
| variant      | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow` \| `dot`   | The chip appearance style.                                                                                                   | `solid`   |
| color        | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`  | The color of the chip.                                                                                                       | `default` |
| size         | `sm` \| `md` \| `lg`                                                         | The size of the chip.                                                                                                        | `md`      |
| radius       | `none` \| `sm` \| `md` \| `lg` \| `full`                                     | The radius of the chip.                                                                                                      | `full`    |
| avatar       | `ReactNode`                                                                  | Avatar to be rendered in the left side of the chip.                                                                          | -         |
| startContent | `ReactNode`                                                                  | Element to be rendered in the left side of the chip. This prop overrides the `avatar` prop.                                  | -         |
| endContent   | `ReactNode`                                                                  | Element to be rendered in the right side of the chip. This prop overrides the default close button when `onClose` is passed. | -         |
| isDisabled   | `boolean`                                                                    | Whether the chip is disabled.                                                                                                | `false`   |
| classNames   | `Record<"base"｜ "content"｜ "dot"｜ "avatar"｜ "closeButton", string>`      | Allows to set custom class names for the chip slots.                                                                         | -         |

### Chip Events

| Attribute | Type                      | Description                                                                                                                        |
| --------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |
| onClose   | `(e: PressEvent) => void` | Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent). |

---
title: "Circular Progress"
description: "Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process."
---

import {circularProgressContent} from "@/content/components/circular-progress";

# Circular Progress

Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.

<ComponentLinks component="progress" styles="circular-progress" storybook="circularprogress" reactAriaHook="useProgressBar" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add progress",
    npm: "npm install @nextui-org/progress",
    yarn: "yarn add @nextui-org/progress",
    pnpm: "pnpm add @nextui-org/progress",
    bun: "bun add @nextui-org/progress"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {CircularProgress} from "@nextui-org/react";',
    individual: 'import {CircularProgress} from "@nextui-org/progress";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={circularProgressContent.usage} />

> **Note**: Make sure to pass the `aria-label` prop when the `label` prop is not provided. This is required for accessibility.

### Sizes

<CodeDemo title="Sizes" files={circularProgressContent.sizes} />

### Colors

<CodeDemo title="Colors" files={circularProgressContent.colors} />

### With Label

<CodeDemo title="With Label" files={circularProgressContent.label} />

### With Value

<CodeDemo title="With Value" files={circularProgressContent.value} />

### Value Formatting

Values are formatted as a percentage by default, but this can be modified by using the
`formatOptions` prop to specify a different format. `formatOptions` is compatible with the
option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.

<CodeDemo
  title="Value Formatting"
  files={circularProgressContent.valueFormatting}
  highlightedLines="10"
/>

## Slots

- **base**: The base slot of the circular progress, it is the main container.
- **svgWrapper**: The wrapper of the svg circles and the value label.
- **svg**: The svg element of the circles.
- **track**: The track is the background circle of the circular progress.
- **indicator**: The indicator is the one that is filled according to the `value`.
- **value**: The value content.
- **label**: The label content.

### Custom Styles

You can customize the `CircularProgress` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo
  title="Custom Styles"
  files={circularProgressContent.customStyles}
  highlightedLines="9-12"
/>

<Spacer y={4} />

## Data Attributes

`CircularProgress` has the following attributes on the `base` element:

- **data-indeterminate**:
  Indicates whether the progress is indeterminate.
- **data-disabled**:
  Indicates whether the progress is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a progress bar via ARIA.
- Labeling support for accessibility.
- Internationalized number formatting as a percentage or value.
- Determinate and indeterminate progress support.
- Exposes the `aria-valuenow`, `aria-valuemin`, `aria-valuemax` and `aria-valuetext` attributes.

<Spacer y={4} />

## API

### Circular Progress Props

| Attribute        | Type                                                                                                                    | Description                                                       | Default              |
| ---------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- | -------------------- |
| label            | `ReactNode`                                                                                                             | The content to display as the label.                              | -                    |
| size             | `sm` \| `md` \| `lg`                                                                                                    | The size of the indicator.                                        | `md`                 |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                             | The color of the indicator.                                       | `primary`            |
| value            | `number`                                                                                                                | The current value (controlled).                                   | -                    |
| valueLabel       | `ReactNode`                                                                                                             | The content to display as the value's label (e.g. 1 of 4).        | -                    |
| minValue         | `number`                                                                                                                | The smallest value allowed for the input.                         | `0`                  |
| maxValue         | `number`                                                                                                                | The largest value allowed for the input.                          | `100`                |
| formatOptions    | [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) | The options to format the value.                                  | `{style: 'percent'}` |
| isIndeterminate  | `boolean`                                                                                                               | Whether the progress is indeterminate.                            | `true`               |
| showValueLabel   | `boolean`                                                                                                               | Whether to show the value label.                                  | `true`               |
| strokeWidth      | `number`                                                                                                                | The width of the progress stroke.                                 | `2`                  |
| isDisabled       | `boolean`                                                                                                               | Whether the progress is disabled.                                 | `false`              |
| disableAnimation | `boolean`                                                                                                               | Whether to disable the animation.                                 | `false`              |
| classNames       | `Record<"base"｜"svgWrapper"｜"svg"｜"track"｜"indicator"｜"value"｜"label", string>`                                   | Allows to set custom class names for the circular progress slots. | -                    |

---
title: "Code"
description: "Code is a component used to display inline code. "
---

import {codeContent} from "@/content/components/code";

# Code

Code is a component used to display inline code.

<ComponentLinks component="code" rscCompatible />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add code",
    npm: "npm install @nextui-org/code",
    yarn: "yarn add @nextui-org/code",
    pnpm: "pnpm add @nextui-org/code",
    bun: "bun add @nextui-org/code"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Code} from "@nextui-org/react";',
    individual: 'import {Code} from "@nextui-org/code";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={codeContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={codeContent.sizes} />

### Colors

<CodeDemo title="Colors" files={codeContent.colors} />

<Spacer y={4} />

## API

### Code Props

| Attribute | Type                                                                        | Description              | Default   |
| --------- | --------------------------------------------------------------------------- | ------------------------ | --------- |
| children  | `ReactNode`                                                                 | The content of the code. | -         |
| size      | `sm` \| `md` \| `lg`                                                        | The size of the code.    | `sm`      |
| color     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the code.   | `default` |
| radius    | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The radius of the code.  | `sm`      |

---
title: "DateInput"
description: "DateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment."
---

import {dateInputContent} from "@/content/components/date-input";

# DateInput

DateInput is a component that allows users to enter and edit date and time values using a keyboard.
Each part of a date value is displayed in an individually editable segment.

<ComponentLinks component="date-input" storybook="dateinput" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add date-input",
    npm: "npm install @nextui-org/date-input",
    yarn: "yarn add @nextui-org/date-input",
    pnpm: "pnpm add @nextui-org/date-input",
    bun: "bun add @nextui-org/date-input",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {DateInput} from "@nextui-org/react";',
    individual: 'import {DateInput} from "@nextui-org/date-input";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={dateInputContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={dateInputContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={dateInputContent.readOnly} />

### Required

<CodeDemo title="Required" files={dateInputContent.required} />

### Variants

<CodeDemo title="Variants" files={dateInputContent.variants} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={dateInputContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Start & End Content

You can use the `startContent` and `endContent` properties to add content to the start and end of the `DateInput`.

<CodeDemo title="Start and End Content" files={dateInputContent.startEndContent} />

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={dateInputContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={dateInputContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult]((https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).

<CodeDemo title="With Error Message Function" files={dateInputContent.errorMessageFunction} />

### Controlled

You can use the `value` and `onChange` properties to control the input value.

<CodeDemo title="Controlled" files={dateInputContent.controlled} />

### Time Zones

DateInput is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,
and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateInputContent.timeZones} />

### Granularity

The granularity prop allows you to control the smallest unit that is displayed by DateInput By default,
the value is displayed with "day" granularity (year, month, and day),
and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateInputContent.granularity} />

### Min Date And Max Date

The minValue and maxValue props can also be used to ensure the value is within a specific range.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
```

<CodeDemo title="Min Date And Max Date" files={dateInputContent.minAndMaxDate} />

### International Calendar

DateInput supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.
Dates are automatically displayed in the appropriate calendar system for the user's locale.
The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),
passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="International Calendar" files={dateInputContent.internationalCalendar} />

### Hide Time Zone

When a `ZonedDateTime` object is provided as the value to DateInput, the time zone abbreviation is displayed by default.
However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the hideTimeZone option.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<CodeDemo title="Hide Time Zone" files={dateInputContent.hideTimeZone} />

### Hourly Cycle

By default, DateInput displays times in either 12 or 24 hour hour format depending on the user's locale.
However, this can be overridden using the `hourCycle` prop if needed for a specific usecase.
This example forces DateInput to use 24-hour time, regardless of the locale.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<CodeDemo title="Hide Time Zone" files={dateInputContent.hourlyCycle} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the date-input, it is the one that is displayed above, inside or left of the date-input.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The date-input element.
- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.
- **clearButton**: The clear button, it is at the end of the input.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the date-input.
- **errorMessage**: The error message of the date-input.

<Spacer y={4} />

## Data Attributes

`DateInput` has the following attributes on the `base` element:

- **data-slot**:
  All slots have this prop. which slot the element represents(e.g. `slot`).
- **data-invalid**:
  When the date-input is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the date-input is required. Based on `isRequired` prop.
- **data-readonly**:
  When the date-input is readonly. Based on `isReadOnly` prop.
- **data-disabled**:
  When the date-input is disabled. Based on `isDisabled` prop.
- **data-has-helper**:
  When the date-input has helper text(`errorMessage` or `description`). Base on those two props.
- **data-has-start-content**:
  When the date-input has a start content. Base on those `startContent` prop.
- **data-has-end-content**:
  When the date-input has a end content. Base on those `endContent` prop.

<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input via ARIA.
- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.
- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.

<Spacer y={4} />

## API

### DateInput Props

| Attribute               | Type                                                                                                                              | Description                                                                                                                                                   | Default   |
| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
| label                   | `ReactNode`                                                                                                                       | The content to display as the label.                                                                                                                          | -         |
| value                   | `DateValue`                                                                                                                       | The current value of the date input (controlled).                                                                                                             | -         |
| defaultValue            | `DateValue`                                                                                                                       | The default value of the date input (uncontrolled).                                                                                                           | -         |
| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                   | The variant of the date input.                                                                                                                                | `flat`    |
| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                       | The color of the date input.                                                                                                                                  | `default` |
| size                    | `sm` \| `md` \| `lg`                                                                                                              | The size of the date input.                                                                                                                                   | `md`      |
| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                          | The radius of the date input.                                                                                                                                 | -         |
| placeholderValue        | `DateValue`                                                                                                                       | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.                          | -         |
| minValue                | `DateValue`                                                                                                                       | The minimum allowed date that a user may select.                                                                                                              | -         |
| maxValue                | `DateValue`                                                                                                                       | The maximum allowed date that a user may select.                                                                                                              | -         |
| locale                  | `string`                                                                                                                          | The locale to display and edit the value according to.                                                                                                        | -         |
| description             | `ReactNode`                                                                                                                       | A description for the date input. Provides a hint such as specific requirements for what to choose.                                                           | -         |
| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                 | An error message for the date input.                                                                                                                          | -         |
| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ｜ true ｜ null ｜ undefined`                                              | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -         |
| validationBehavior      | `native` \| `aria`                                                                                                                | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
| startContent            | `ReactNode`                                                                                                                       | Element to be rendered in the left side of the date input.                                                                                                    | -         |
| endContent              | `ReactNode`                                                                                                                       | Element to be rendered in the right side of the date input.                                                                                                   | -         |
| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                           | The position of the label.                                                                                                                                    | `inside`  |
| isRequired              | `boolean`                                                                                                                         | Whether user input is required on the input before form submission.                                                                                           | `false`   |
| isReadOnly              | `boolean`                                                                                                                         | Whether the input can be selected but not changed by the user.                                                                                                | -         |
| isDisabled              | `boolean`                                                                                                                         | Whether the input is disabled.                                                                                                                                | `false`   |
| isInvalid               | `boolean`                                                                                                                         | Whether the input value is invalid.                                                                                                                           | `false`   |
| inputRef                | `ReactRef<HTMLInputElement \| null>`                                                                                              | A ref for the hidden input element for HTML form submission.                                                                                                  | -         |
| createCalendar          | `(name: string) => Calendar`                                                                                                      | A function that creates a Calendar object for a given calendar identifier.                                                                                    | -         |
| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                    | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      | -         |
| autoFocus               | `boolean`                                                                                                                         | Whether the element should receive focus on render.                                                                                                           | `false`   |
| hourCycle               | `12` \| `24`                                                                                                                      | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -         |
| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                           | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                 | -         |
| hideTimeZone            | `boolean`                                                                                                                         | Whether to hide the time zone abbreviation.                                                                                                                   | `false`   |
| shouldForceLeadingZeros | `boolean`                                                                                                                         | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`    |
| disableAnimation        | `boolean`                                                                                                                         | Whether to disable animations.                                                                                                                                | `false`   |
| classNames              | `Record<"base"｜ "label"｜ "inputWrapper"｜ "innerWrapper"｜ "input"｜ "helperWrapper"｜ "description"｜ "errorMessage", string>`   | Allows to set custom class names for the date input slots.                                                                                                    | -         |

### DateInput Events

| Attribute     | Type                                                                   | Description                                                     |     |
| ------------- | ---------------------------------------------------------------------- | --------------------------------------------------------------- | --- |
| onChange      | `((value: ZonedDateTime \| CalendarDate \| CalendarDateTime) => void)` | Handler that is called when the date-input's value changes.     | -   |
| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element receives focus.         | -   |
| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element loses focus.            | -   |
| onFocusChange | `(isFocused: boolean) => void`                                         | Handler that is called when the element's focus status changes. | -   |
| onKeyDown     | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is pressed.                   | -   |
| onKeyUp       | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is released.                  | -   |

---
title: "DatePicker"
description: "DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value."
---

import {datePickerContent} from "@/content/components/date-picker";

# DatePicker

DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.

<ComponentLinks component="date-picker" storybook="datepicker" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add date-picker",
    npm: "npm install @nextui-org/date-picker",
    yarn: "yarn add @nextui-org/date-picker",
    pnpm: "pnpm add @nextui-org/date-picker",
    bun: "bun add @nextui-org/date-picker",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {DatePicker} from "@nextui-org/react";',
    individual: 'import {DatePicker} from "@nextui-org/date-picker";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={datePickerContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={datePickerContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={datePickerContent.readOnly} />

### Required

<CodeDemo title="Required" files={datePickerContent.required} />

### Variants

<CodeDemo title="Variants" files={datePickerContent.variants} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={datePickerContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### With Description

You can add a description to the date-picker by passing the `description` property.

<CodeDemo title="With Description" files={datePickerContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={datePickerContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult]((https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).

<CodeDemo title="With Error Message Function" files={datePickerContent.errorMessageFunction} />

### With Month and Year Pickers

<CodeDemo title="With Month and Year Pickers" files={datePickerContent.withMonthAndYearPickers} />

### With Time Fields

<CodeDemo title="With Time Fields" files={datePickerContent.withTimeField} />

### Selector Icon

You can use the `selector` to add content to the start and end of the date-picker.

<CodeDemo title="Start and End Content" files={datePickerContent.selectorIcon} />

### Controlled

You can use the `value` and `onChange` properties to control the input value.

<CodeDemo title="Controlled" files={datePickerContent.controlled} />

### Time Zones

DatePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,
and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={datePickerContent.timeZones} />

### Granularity

The granularity prop allows you to control the smallest unit that is displayed by DatePicker By default,
the value is displayed with "day" granularity (year, month, and day),
and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={datePickerContent.granularity} />

### Min Date And Max Date

The minValue and maxValue props can also be used to ensure the value is within a specific range.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
```

<CodeDemo title="Min Date And Max Date" files={datePickerContent.minAndMaxDate} />

### International Calendar

DatePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.
Dates are automatically displayed in the appropriate calendar system for the user's locale.
The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),
passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="International Calendar" files={datePickerContent.internationalCalendar} />

### Unavailable Dates

DatePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";
```

<CodeDemo title="Unavailable Dates" files={datePickerContent.unavailableDates} />

### Visible Months

By default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.

<CodeDemo title="Visible Months" files={datePickerContent.visibleMonth} />

### Page Behavior

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behavior" files={datePickerContent.pageBehavior} />

### Preset

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {
  DateValue,
  now,
  useLocale,
  startOfWeek,
  startOfMonth,
  useDateFormatter,
  getLocalTimeZone,
} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="Preset" files={datePickerContent.preset} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **selectorButton**: Selector button element.
- **selectorIcon**: Selector icon element.
- **popoverContent**: The calendar popover element.
- **calendar**: The calendar element.
- **calendarContent**: The calendar's content element.
- **timeInputLabel**: The time-input component's label element.
- **timeInput**: The time-input component element.

<Spacer y={4} />

## Data Attributes

`DatePicker` has the following attributes on the `base` element:

- **data-slot**:
  All slots have this prop. which slot the element represents(e.g. `canlendar`).
- **data-open**:
  Indicates if the calendar popover is open.
- **data-invalid**:
  When the date-picker is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the date-picker is required. Based on `isRequired` prop.
- **data-readonly**:
  When the date-picker is readonly. Based on `isReadOnly` prop.
- **data-disabled**:
  When the date-picker is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.
- Users can also open a calendar popover to select dates in a standard month grid.
- Localized screen reader messages are included to announce when the selection and visible date range change.
- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.
- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors

<Spacer y={4} />

## API

### DatePicker Props

| Attribute               | Type                                                                                                                                                     | Description                                                                                                                                                   | Default                                                              |
| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------       | -------------------------------------------------------------------- |
| label                   | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                          | -                                                                    |
| value                   | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The current value of the date-picker (controlled).                                                                                                            | -                                                                    |
| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                          | The variant of the date input.                                                                                                                                | `flat`                                                               |
| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                              | The color of the date input.                                                                                                                                  | `default`                                                            |
| size                    | `sm` \| `md` \| `lg`                                                                                                                                     | The size of the date input.                                                                                                                                   | `md`                                                                 |
| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                 | The radius of the date input.                                                                                                                                 | -                                                                    |
| defaultValue            | `string` \| undefined                                                                                                                                    | The default value of the date-picker (uncontrolled).                                                                                                          | -                                                                    |
| placeholderValue        | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-picker.                                                                                                                           | -                                                                    |
| description             | `ReactNode`                                                                                                                                              | A description for the date-picker. Provides a hint such as specific requirements for what to choose.                                                          | -                                                                    |
| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                          | -                                                                    |
| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ｜ true ｜ null ｜ undefined`                                                                     | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -                                                                    |
| validationBehavior      | `native` \| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`                                                               |
| startContent            | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-picker.                                                                                                   | -                                                                    |
| endContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-picker.                                                                                                  | -                                                                    |
| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                                                  | The position of the label.                                                                                                                                    | `inside`                                                             |
| isRequired              | `boolean`                                                                                                                                                | Whether user input is required on the date-picker before form submission.                                                                                     | `false`                                                              |
| isReadOnly              | `boolean`                                                                                                                                                | Whether the date-picker can be selected but not changed by the user.                                                                                          |                                                                      |
| isDisabled              | `boolean`                                                                                                                                                | Whether the date-picker is disabled.                                                                                                                          | `false`                                                              |
| isInvalid               | `boolean`                                                                                                                                                | Whether the date-picker is invalid.                                                                                                                           | `false`                                                              |
| visibleMonths           | `number` \| `undefined`                                                                                                                                  | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.       | `1`                                                                  |
| selectorIcon            | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                          |                                                                      |
| pageBehavior            | `PageBehavior` \| `undefined`                                                                                                                            | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.           | `visible`                                                            |
| visibleMonths           | `number` \| `undefined`                                                                                                                                  | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.       | `1`                                                                  |
| calendarWidth           | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                            | `256`                                                                |
| CalendarTopContent      | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                         |                                                                      |
| isDateUnavailable       | `((date: DateValue) => boolean)` \| `undefined`                                                                                                          | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      |
| autoFocus               | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                           | `false`                                                              |
| hourCycle               | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -                                                                    |
| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                 | -                                                                    |
| hideTimeZone            | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                                   | `false`                                                              |
| shouldForceLeadingZeros | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`                                                               |
| CalendarBottomContent   | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                      |                                                                      |
| showMonthAndYearPickers | `boolean` \| `undefined`                                                                                                                                 | Whether the calendar should show month and year pickers.                                                                                                      | false                                                                |
| popoverProps            | `PopoverProps` \| `undefined`                                                                                                                            | Props to be passed to the popover component.                                                                                                                  | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`     |
| selectorButtonProps     | `ButtonProps` \| `undefined`                                                                                                                             | Props to be passed to the selector button component.                                                                                                          | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
| calendarProps           | `CalendarProps` \| `undefined`                                                                                                                           | Props to be passed to the selector button component.                                                                                                          | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
| timeInputProps          | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                               | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
| disableAnimation        | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                 | `false`                                                              |
| classNames              | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-picker slots.                                                                                                   | -                                                                    |
| dateInputClassNames     | `Record<"base"｜ "label"｜ "inputWrapper"｜ "innerWrapper"｜ "input"｜ "helperWrapper"｜ "description"｜ "errorMessage", string>`                          | Allows to set custom class names for the [date input slots](/docs/components/date-input#slots).                                                               | -                                                                    |

### DatePicker Events

| Attribute     | Type                                                                                 | Description                                                     |     |
| ------------- | ------------------------------------------------------------------------------------ | --------------------------------------------------------------- | --- |
| onChange      | `((value: ZonedDateTime  \| CalendarDate \| CalendarDateTime) => void)` \| undefined | Handler that is called when the date-picker's value changes.    | -   |
| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                                          | Handler that is called when the element receives focus.         | -   |
| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                                          | Handler that is called when the element loses focus.            | -   |
| onFocusChange | `(isFocused: boolean) => void`                                                       | Handler that is called when the element's focus status changes. | -   |
| onKeyDown     | `(e: KeyboardEvent) => void`                                                         | Handler that is called when a key is pressed.                   | -   |
| onKeyUp       | `(e: KeyboardEvent) => void`                                                         | Handler that is called when a key is released.                  | -   |

---
title: "Date Range Picker"
description: "DateRangePicker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range."
---

import {dateRangePickerContent} from "@/content/components/date-range-picker";

# Date Range Picker

Date Range Picker combines two DateInputs and a RangeCalendar popover to allow users to enter or select a date and time range.

<ComponentLinks component="date-picker" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add date-picker",
    npm: "npm install @nextui-org/date-picker",
    yarn: "yarn add @nextui-org/date-picker",
    pnpm: "pnpm add @nextui-org/date-picker",
    bun: "bun add @nextui-org/date-picker",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {DateRangePicker} from "@nextui-org/react";',
    individual: 'import {DateRangePicker} from "@nextui-org/date-picker";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={dateRangePickerContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={dateRangePickerContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={dateRangePickerContent.readOnly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the input will be required.

<CodeDemo title="Required" files={dateRangePickerContent.required} />

### Variants

<CodeDemo title="Variants" files={dateRangePickerContent.variants} />

### Visible Months

By default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.

<CodeDemo title="Visible Months" files={dateRangePickerContent.visibleMonth} />

### Page Behavior

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behavior" files={dateRangePickerContent.pageBehavior} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={dateRangePickerContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={dateRangePickerContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={dateRangePickerContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult]((https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).

<CodeDemo title="With Error Message Function" files={dateRangePickerContent.errorMessageFunction} />

### With Time Fields

DateRangePicker automatically includes time fields when a `CalendarDateTime` or `ZonedDateTime` object is provided as the value.

<CodeDemo title="With Time Fields" files={dateRangePickerContent.withTimeField} />

### Selector Icon

You can use the `selector` to add content to the start and end of the date-range-picker.

<CodeDemo title="Start and End Content" files={dateRangePickerContent.selectorIcon} />

### Controlled

You can use the `value` and `onChange` properties to control the input value.

<CodeDemo title="Controlled" files={dateRangePickerContent.controlled} />

### Time Zones

DateRangePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,
and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {parseZonedDateTime} from "@internationalized/date";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateRangePickerContent.timeZones} />

### Granularity

The granularity prop allows you to control the smallest unit that is displayed by DateRangePicker By default,
the value is displayed with "day" granularity (year, month, and day),
and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {useDateFormatter} from "@react-aria/i18n";
```

<Spacer y={2} />

<CodeDemo title="Time Zones" files={dateRangePickerContent.granularity} />

### Min Date And Max Date

The minValue and maxValue props can also be used to ensure the value is within a specific range.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date",
    yarn: "yarn add @internationalized/date",
    pnpm: "pnpm add @internationalized/date",
  }}
/>

```jsx
import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
```

<CodeDemo title="Min Date And Max Date" files={dateRangePickerContent.minAndMaxDate} />

### International Calendar

DateRangePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.
Dates are automatically displayed in the appropriate calendar system for the user's locale.
The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),
passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
import {I18nProvider} from "@react-aria/i18n";
```

<CodeDemo title="International Calendar" files={dateRangePickerContent.internationalCalendar} />

### Unavailable Dates

DateRangePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";
```

<CodeDemo title="Unavailable Dates" files={dateRangePickerContent.unavailableDates} />

### Non Contiguous

The allowsNonContiguousRanges prop enables a range to be selected even if there are unavailable dates in the middle.
The value emitted in the onChange event will still be a single range with a start and end property,
but unavailable dates will not be displayed as selected.
It is up to applications to split the full selected range into multiple as needed for business logic.

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
import {useLocale} from "@react-aria/i18n";
```

<CodeDemo title="Non Contiguous" files={dateRangePickerContent.nonContigous} />

### Presets

[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings
in multiple formats into `ZonedDateTime` objects.

<PackageManagers
  commands={{
    npm: "npm install @internationalized/date @react-aria/i18n",
    yarn: "yarn add @internationalized/date @react-aria/i18n",
    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
  }}
/>

```jsx
import {
  DateValue,
  now,
  startOfWeek,
  startOfMonth,
  getLocalTimeZone,
} from "@internationalized/date";
import {useLocale, useDateFormatter} from "@react-aria/i18n";
```

<CodeDemo title="Presets" files={dateRangePickerContent.presets} />

## Slots

- **base**: base element. it handles alignment, placement, and general appearance.
- **label**: Label of the date-range-picker, it is the one that is displayed above, inside or left of the date-input.
- **calendar**: The calendar element.
- **selectorButton**: Selector button element.
- **selectorIcon**: Selector icon element.
- **popoverContent**: The calendar popover element.
- **calendarContent**: The calendar's content element.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The input element.
- **segment**: The segment element.
- **separator**: The separator element.
- **bottomContent**: The bottom content element.
- **timeInputWrapper**: The wrapper element for the input element.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the date-input.
- **errorMessage**: The error message of the date-input.

### Custom Styles

You can customize the `DateRangePicker` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={dateRangePickerContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`DateRangePicker` has the following attributes on the `base` element:

- **data-slot**:
  All slots have this prop. which slot the element represents(e.g. `canlendar`).
- **data-open**:
  Indicates if the calendar popover is open.
- **data-invalid**:
  When the date-range-picker is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the date-range-picker is required. Based on `isRequired` prop.
- **data-readonly**:
  When the date-range-picker is readonly. Based on `isReadOnly` prop.
- **data-disabled**:
  When the date-range-picker is disabled. Based on `isDisabled` prop.
- **data-has-start-content**:
  When the date-range-picker has a start content. Base on those `startContent` prop.
- **data-has-end-content**:
  When the date-range-picker has a end content. Base on those `endContent` prop.
- **data-has-multiple-months**:
  When the date-range-picker's `visibleMonth` is more than 2.

<Spacer y={4} />

## Accessibility

- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale
- Users can also open a calendar popover to select date ranges in a standard month grid. Localized screen reader messages are included to announce when the selection and visible date range change.
- Date segments are editable using an easy to use numeric keypad, date ranges can be selected by dragging over dates in the calendar using a touch screen, and all interactions are accessible using touch-based screen readers.
- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors

<Spacer y={4} />

## API

### DateRangePicker Props

| Attribute                 | Type                                                                                                                                                     | Description                                                                                                                                                             | Default                                                              |
|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------|
| label                     | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                                    | -                                                                    |
| value                     | `RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>` \| `undefined` \| `null`                                                                 | The current value of the date-range-picker (controlled).                                                                                                                | -                                                                    |
| variant                   | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                          | The variant of the date input.                                                                                                                                          | `flat`                                                               |
| color                     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                              | The color of the date input.                                                                                                                                            | `default`                                                            |
| size                      | `sm` \| `md` \| `lg`                                                                                                                                     | The size of the date input.                                                                                                                                             | `md`                                                                 |
| radius                    | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                 | The radius of the date input.                                                                                                                                           | -                                                                    |
| minValue                  | `RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>` \| `undefined` \| `null`                                                                 | The minimum value of the date-range-picker.                                                                                                                             | -                                                                    |
| maxValue                  | `RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>` \| `undefined` \| `null`                                                                 | The maximum value of the date-range-picker.                                                                                                                             | -                                                                    |
| defaultValue              | `string` \| undefined                                                                                                                                    | The default value of the date-range-picker (uncontrolled).                                                                                                              | -                                                                    |
| placeholderValue          | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-range-picker.                                                                                                                               | -                                                                    |
| description               | `ReactNode`                                                                                                                                              | A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.                                                              | -                                                                    |
| errorMessage              | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                                    | -                                                                    |
| validate                  | `(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError ｜ true ｜ null ｜ undefined`                                                         | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -                                                                    |
| validationBehavior        | `native` \| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.          | `aria`                                                               |
| startContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-range-picker.                                                                                                       | -                                                                    |
| endContent                | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-range-picker.                                                                                                      | -                                                                    |
| startName                 | `string`                                                                                                                                                 | The name of the start date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname) | -                                                                    |
| endName                   | `string`                                                                                                                                                 | The name of the end date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname)   | -                                                                    |
| labelPlacement            | `inside` \| `outside` \| `outside-left`                                                                                                                  | The position of the label.                                                                                                                                              | `inside`                                                             |
| isOpen                    | `boolean`                                                                                                                                                | Whether the date picker popover is open.                                                                                                                                | -                                                                    |
| defaultOpen               | `boolean`                                                                                                                                                | Whether the date picker popover is open by default.                                                                                                                     | `false`                                                              |
| isRequired                | `boolean`                                                                                                                                                | Whether user input is required on the date-range-picker before form submission.                                                                                         | `false`                                                              |
| isReadOnly                | `boolean`                                                                                                                                                | Whether the date-range-picker can be selected but not changed by the user.                                                                                              |                                                                      |
| isDisabled                | `boolean`                                                                                                                                                | Whether the date-range-picker is disabled.                                                                                                                              | `false`                                                              |
| isInvalid                 | `boolean`                                                                                                                                                | Whether the date-range-picker is invalid.                                                                                                                               | `false`                                                              |
| selectorIcon              | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                                    |                                                                      |
| pageBehavior              | `single` \| `visible`                                                                                                                                    | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                     | `visible`                                                            |
| visibleMonths             | `number`                                                                                                                                                 | The number of months to display at once. Up to 3 months are supported.                                                                                                  | `1`                                                                  |
| autoFocus                 | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                                     | `false`                                                              |
| hourCycle                 | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                           | -                                                                    |
| granularity               | `day` \| `hour` \| `minute` \| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                           | -                                                                    |
| hideTimeZone              | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                                             | `false`                                                              |
| allowsNonContiguousRanges | `boolean`                                                                                                                                                | When combined with `isDateUnavailable`, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.                            | false                                                                |
| shouldForceLeadingZeros   | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                                | `true`                                                               |
| calendarWidth             | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                                      | `256`                                                                |
| CalendarTopContent        | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                                   |                                                                      |
| CalendarBottomContent     | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                                |                                                                      |
| allowsNonContiguousRanges | `boolean`                                                                                                                                                | enables a range to be selected even if there are unavailable dates in the middle                                                                                        | false                                                                |
| popoverProps              | `PopoverProps`                                                                                                                                           | Props to be passed to the popover component.                                                                                                                            | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`     |
| selectorButtonProps       | `ButtonProps`                                                                                                                                            | Props to be passed to the selector button component.                                                                                                                    | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
| calendarProps             | `CalendarProps`                                                                                                                                          | Props to be passed to the selector button component.                                                                                                                    | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
| timeInputProps            | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                                         | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
| disableAnimation          | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                           | `false`                                                              |
| classNames                | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-range-picker slots.                                                                                                       | -                                                                    |

### DateRangePicker Events

| Attribute     | Type                                                                                            | Description                                                              |     |
| ------------- | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | --- |
| onChange      | `((value: RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>) => void)` \| undefined | Handler that is called when the date-range-picker's value changes.       | -   |
| onOpenChange  | `(isOpen: boolean) => void`                                                                     | Handler that is called when the date picker popover is opened or closed. | -   |
| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                                                     | Handler that is called when the element receives focus.                  | -   |
| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                                                     | Handler that is called when the element loses focus.                     | -   |
| onFocusChange | `(isFocused: boolean) => void`                                                                  | Handler that is called when the element's focus status changes.          | -   |
| onKeyDown     | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is pressed.                            | -   |
| onKeyUp       | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is released.                           | -   |

---
title: "Divider"
description: "Divider is a component that separates content in a page."
---

import {dividerContent} from "@/content/components/divider";

# Divider

Divider is a component that separates content in a page.

<ComponentLinks component="divider" reactAriaHook="useSeparator" rscCompatible />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add divider",
    npm: "npm install @nextui-org/divider",
    yarn: "yarn add @nextui-org/divider",
    pnpm: "pnpm add @nextui-org/divider",
    bun: "bun add @nextui-org/divider"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Divider} from "@nextui-org/react";',
    individual: 'import {Divider} from "@nextui-org/divider";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={dividerContent.usage} />

<Spacer y={4}/>  

## Data Attributes

`Divider` has the following attributes on the `base` element:

- **data-orientation**:
  The orientation of the divider. Based on `orientation` prop.

<Spacer y={4}/>  

## Accessibility

- Separator role is added to the divider.
- Support for horizontal and vertical orientation.
- Support for HTML `<hr>` element or a custom element type.

<Spacer y={4}/>  

## API

### Divider Props

| Attribute   | Type                       | Description                     | Default      |
| ----------- | -------------------------- | ------------------------------- | ------------ |
| orientation | `horizontal` \| `vertical` | The orientation of the divider. | `horizontal` |

---
title: "Dropdown"
description: "Displays a list of actions or options that a user can choose."
---

import {dropdownContent} from "@/content/components/dropdown";

# Dropdown

Displays a list of actions or options that a user can choose.

<ComponentLinks component="dropdown" reactAriaHook="useMenu" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add dropdown",
    npm: "npm install @nextui-org/dropdown",
    yarn: "yarn add @nextui-org/dropdown",
    pnpm: "pnpm add @nextui-org/dropdown",
    bun: "bun add @nextui-org/dropdown"
  }}
/>


## Import

NextUI exports 5 dropdown-related components:

- **Dropdown**: The main component, which is a wrapper for the other components. This component is an extension of the [Popover](/docs/components/popover) component, so it accepts all the props of the Popover component.
- **DropdownTrigger**: The component that triggers the dropdown menu to open.
- **DropdownMenu**: The component that contains the dropdown items.
- **DropdownSection**: The component that contains a group of dropdown items.
- **DropdownItem**: The component that represents a dropdown item.

<ImportTabs
  commands={{
    main: `import {
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownSection,
  DropdownItem
} from "@nextui-org/react";`,
    individual: `import {
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownSection,
  DropdownItem
} from "@nextui-org/dropdown";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={dropdownContent.usage} />

### Dynamic items

Dropdown follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" files={dropdownContent.dynamic} />

### Disabled Keys

Dropdown items can be disabled using the `disabledKeys` prop to the `DropdownMenu` component.

<CodeDemo title="Disabled Keys" highlightedLines="17" files={dropdownContent.disabledKeys} />

> **Note**: It's important to have a unique key for each item, otherwise the disabled keys will not work.

### Action event

You can use the `onAction` prop to get the key of the selected item.

<CodeDemo title="Action event" highlightedLines="15" files={dropdownContent.action} />

### Variants

You can use the `variant` in the `DropdownMenu` component to change the `hover` style of the dropdown items.

<CodeDemo title="Variants" highlightedLines="21-22" files={dropdownContent.variants} />

### Single Selection

You can set the `selectionMode` property as `single` to allow the user to select only one item at a time.

<CodeDemo
  title="Single Selection"
  highlightedLines="26-28"
  files={dropdownContent.singleSelection}
/>

### Multiple Selection

You can set the `selectionMode` property as `multiple` to allow the user to select multiple items at a time.

<CodeDemo
  title="Multiple Selection"
  highlightedLines="26-28"
  files={dropdownContent.multipleSelection}
/>

> **Note**: To allow empty selection, you can set the `disallowEmptySelection` property as `false`.

### With Shortcut

You can use the `shortcut` prop to add a shortcut to the dropdown item.

<CodeDemo title="With Shortcut" highlightedLines="14-19" files={dropdownContent.shortcut} />

> **Note**: Dropdown does not handle the shortcut event, you need to handle it yourself.

### With Icons

It is possible to add icons to the dropdown items using the `startContent` / `endContent` props.

<CodeDemo title="With Icons" highlightedLines="23,30,37,47" files={dropdownContent.icons} />

> **Note**: If you use `currentColor` as the icon color, the icon will have the same color as the item text.

### With Description

You can use the `description` prop to add a description to the dropdown item.

<CodeDemo
  title="With Description"
  highlightedLines="23,31,39,50"
  files={dropdownContent.description}
/>

### With Sections

You can use the `DropdownSection` component to group dropdown items.

<CodeDemo title="With Sections" highlightedLines="20,46" files={dropdownContent.sections} />

> **Note**: Sections without a `title` must provide an `aria-label` for accessibility.

### Custom Trigger

You can use any component as a trigger for the dropdown menu, just wrap it in the `DropdownTrigger` component.

<CodeDemo title="Custom Trigger" highlightedLines="17-18" files={dropdownContent.customTrigger} />

### Changing the backdrop

As we mentioned earlier, the `Dropdown` component is an extension of the [Popover](/docs/components/popover) component,
so it accepts all the props of the Popover component, including the `backdrop` prop.

<CodeDemo title="Changing the backdrop" highlightedLines="17" files={dropdownContent.backdrop} />

### Routing

The `<DropdownItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.

```jsx
import {Dropdown, DropdownMenu, DropdownTrigger, DropdownItem, Button} from "@nextui-org/react";

function App() {
  return (
    <Dropdown>
      <DropdownTrigger>
        <Button variant="bordered">Open Menu</Button>
      </DropdownTrigger>
      <DropdownMenu aria-label="Link Actions">
        <DropdownItem key="home" href="/home">
          Home
        </DropdownItem>
        <DropdownItem key="about" href="/about">
          About
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}
```

## Slots

Dropdown has 3 components with slots the `DropdownMenu`, `DropdownItem` and `DropdownSection` components.

### DropdownMenu

- **base**: The main wrapper for the menu component. This slot wraps the `topContent`, `bottomContent` and the `list` slot.
- **list**: The slot for the menu list component. You can see this slot as the `ul` slot.
- **emptyContent**: The slot content to display when the collection is empty.

### DropdownItem

- **base**: The main slot for the dropdown item. It wraps all the other slots.
- **wrapper**: The `title` and `description` wrapper.
- **title**: The title of the dropdown item.
- **description**: The description of the dropdown item.
- **shortcut**: The shortcut slot.
- **selectedIcon**: The selected icon slot. This is only visible when the item is selected.

### DropdownSection

- **base**: The main slot for the dropdown section. It wraps all the other slots.
- **heading**: The title that is render on top of the section group.
- **group**: The group of dropdown items.
- **divider**: The divider that is render between the groups. This is only visible when `showDivider` is `true`.

### Customizing the dropdown popover

The `Dropdown` component is an extension of the [Popover](/docs/components/popover) component, so you can use the same
slots to customize the dropdown.

<CodeDemo
  title="Custom Popover Styles"
  highlightedLines="14-15"
  files={dropdownContent.customPopoverStyles}
/>

### Customizing the dropdown items style

You can customize the dropdown items either by using the `DropdownMenu` `itemClasses` prop or by using the
`DropdownItem` slots, the `itemClasses` allows you to customize all the items at once, while the slots allow
you to customize each item individually.

<CodeDemo title="Custom Dropdown Items Styles" files={dropdownContent.customItemsStyles} />

<Spacer y={4} />

### Keyboard Interactions

| Key                              | Description                                                                                                                                   |
| -------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| <Kbd>Space</Kbd>                 | When focus is on `DropdownTrigger`, opens the dropdown menu and focuses the first item. When focus is on an item, activates the focused item. |
| <Kbd>Enter</Kbd>                 | When focus is on `DropdownTrigger`, opens the dropdown menu and focuses the first item. When focus is on an item, activates the focused item. |
| <Kbd>ArrowDown</Kbd>             | When focus is on `DropdownTrigger`, opens the dropdown menu. When focus is on an item, moves focus to the next item.                          |
| <Kbd>ArrowUp</Kbd>               | When focus is on an item, moves focus to the previous item.                                                                                   |
| <Kbd>Esc</Kbd>                   | Closes the dropdown menu and moves focus to `DropdownTrigger`.                                                                                |
| <Kbd>A-Z</Kbd> or <Kbd>a-z</Kbd> | When the menu is open, moves focus to the next menu item with a label that starts with the typed character if such an menu item exists.       |

<Spacer y={4} />

## Data Attributes

`DropdownItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the dropdown item is disabled. Based on dropdown `disabledKeys` prop.
- **data-selected**:
  When the dropdown item is selected. Based on dropdown `selectedKeys` prop.
- **data-hover**:
  When the dropdown item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the dropdown item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the dropdown item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the dropdown item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a `button` with a `menu` using ARIA.
- Support for single, multiple, or no selection.
- Support for disabled items.
- Support for sections.
- Complex item labeling support for accessibility.
- Keyboard navigation support including arrow keys, home/end, page up/down. See [Keyboard Interactions](#keyboard-interactions) for more details.
- Automatic scrolling support during keyboard navigation.
- Keyboard support for opening the menu using the arrow keys, including automatically focusing the first or last item accordingly.
- Typeahead to allow focusing items by typing text.
- Virtualized scrolling support for performance with long lists.

<Spacer y={4} />

## API

### Dropdown Props

| Attribute         | Type                                     | Description                                                                                           | Default |
| ----------------- | ---------------------------------------- | ----------------------------------------------------------------------------------------------------- | ------- |
| children\*        | `ReactNode[]`                            | The children to render. Usually a `DropdownTrigger` and `DropdownMenu` elements.                      | -       |
| type              | `menu` \| `listbox`                      | Type of overlay that is opened by the dropdown trigger.                                               | `menu`  |
| trigger           | `press` \| `longPress`                   | How the dropdown menu is triggered.                                                                   | `press` |
| isDisabled        | `boolean`                                | Whether the dropdown trigger is disabled.                                                             | `false` |
| closeOnSelect     | `boolean`                                | Whether the dropdown menu should be closed when an item is selected.                                  | `true`  |
| shouldBlockScroll | `boolean`                                | Whether the dropdown menu should block scrolling outside the menu.                                    | `true`  |
| PopoverProps      | [PopoverProps](/docs/components/popover) | Since the dropdown is an extension of the popover, it accepts all the props of the popover component. | -       |

### Dropdown Events

| Attribute                    | Type                        | Description                                                                                                             |
| ---------------------------- | --------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| onOpenChange                 | `(isOpen: boolean) => void` | Handler that is called when the dropdown's open state changes.                                                          |
| shouldCloseOnInteractOutside | `(e: HTMLElement) => void`  | When user interacts with the argument element outside of the dropdown ref, return `true` if `onClose` should be called. |
| onClose                      | `() => void`                | Handler that is called when the dropdown should close.                                                                  |

---

### DropdownTrigger Props

| Attribute | Type        | Description                                                                                                                                                                   | Default |
| --------- | ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| children  | `ReactNode` | The dropdown trigger component, ensure the `children` passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility. | -       |

---

### DropdownMenu Props

| Attribute              | Type                                                                                                   | Description                                                                                             |             |
| ---------------------- | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------- | ----------- |
| children\*             | `ReactNode` \| `((item: T) => ReactElement)`                                                           | The contents of the collection. It's usually the `DropdownItem` or `DropdownSection`. (static)          | -           |
| items                  | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | Item objects in the collection. (dynamic)                                                               | -           |
| variant                | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow`                                      | The dropdown items appearance style.                                                                    | `solid`     |
| color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                            | The dropdown items color theme.                                                                         | `default`   |
| selectionMode          | `none` \| `single` \| `multiple`                                                                       | The type of selection that is allowed in the collection.                                                | -           |
| selectedKeys           | `all` \| `Iterable<React.Key>`                                                                                          | The currently selected keys in the collection (controlled).                                             | -           |
| disabledKeys           | `Iterable<React.Key>`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. | -           |
| defaultSelectedKeys    | `all` \| `Iterable<React.Key>`                                                                                 | The initial selected keys in the collection (uncontrolled).                                             | -           |
| disallowEmptySelection | `boolean`                                                                                              | Whether the collection allows empty selection.                                                          | `false`     |
| autoFocus              | `boolean` \| `first` \| `last`                                                                         | Where the focus should be set.                                                                          | `false`     |
| topContent             | `ReactNode`                                                                                            | The content to display above the listbox items.                                                         | -           |
| bottomContent          | `ReactNode`                                                                                            | The content to display below the listbox items.                                                         | -           |
| emptyContent           | `ReactNode`                                                                                            | The content to display when the collection is empty.                                                    | `No items.` |
| hideEmptyContent       | `boolean`                                                                                              | Whether to not display the empty content when the collection is empty.                                  | `false`     |
| hideSelectedIcon       | `boolean`                                                                                              | Whether to hide the check icon when the items are selected.                                             | `false`     |
| shouldFocusWrap        | `boolean`                                                                                              | Whether keyboard navigation is circular.                                                                | `false`     |
| closeOnSelect          | `boolean`                                                                                              | Whether the dropdown menu should be closed when an item is selected.                                    | `true`      |
| disableAnimation       | `boolean`                                                                                              | Whether to disable the animation of the dropdown items.                                                 | `false`     |
| classNames             | `Record<"base"｜ "list"｜ "emptyContent", string>`                                                     | Allows to set custom class names for the dropdown menu slots.                                           | -           |
| itemClasses            | `Record<"base"｜ "wrapper"｜ "title"｜ "description"｜ "shortcut" ｜ "selectedIcon", string>`          | Allows to set custom class names for the dropdown item slots.                                           | -           |

### DropdownMenu Events

| Attribute         | Type                          | Description                                                                |
| ----------------- | ----------------------------- | -------------------------------------------------------------------------- |
| onAction          | `(key: React.Key) => void`    | Handler that is called when an item is selected.                           |
| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void` | Handler that is called when the selection changes.                         |
| onClose           | `() => void`                  | Handler that is called when the menu should close after selecting an item. |

---

### DropdownSection Props

| Attribute        | Type                                                                                                   | Description                                                                                 | Default |
| ---------------- | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------- | ------- |
| children\*       | `ReactNode`                                                                                            | The contents of the dropdown section. Usually a list of `DropdownItem` components. (static) | -       |
| title            | `string`                                                                                               | The title of the dropdown section.                                                          | -       |
| items            | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | Item objects in the collection. (dynamic)                                                   | -       |
| hideSelectedIcon | `boolean`                                                                                              | Whether to hide the check icon when the items are selected.                                 | `false` |
| showDivider      | `boolean`                                                                                              | Whether to show the divider between the groups.                                             | `false` |
| dividerProps     | [DividerProps](/docs/components/divider)                                                               | The divider component props.                                                                | -       |
| classNames       | `Record<"base"｜ "heading"｜ "group"｜ "divider", string>`                                             | Allows to set custom class names for the dropdown section slots.                            | -       |
| itemClasses      | `Record<"base"｜ "wrapper"｜ "title"｜ "description"｜ "shortcut" ｜ "selectedIcon", string>`          | Allows to set custom class names for the dropdown item slots.                               | -       |

---

### DropdownItem Props

| Attribute        | Type                                                                                          | Description                                                                                                                                                                      | Default |
| ---------------- | --------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| children\*       | `ReactNode`                                                                                   | The contents of the dropdown item.                                                                                                                                               | -       |
| key              | `React.Key`                                                                                   | The unique key for the dropdown item.                                                                                                                                            | -       |
| title            | `string` \| `ReactNode`                                                                       | The title of the dropdown item.                                                                                                                                                  | -       |
| textValue        | `string`                                                                                      | A string representation of the item's contents, used for features like typeahead.                                                                                                | -       |
| description      | `string` \| `ReactNode`                                                                       | The description of the dropdown item.                                                                                                                                            | -       |
| shortcut         | `string` \| `ReactNode`                                                                       | The dropdown item keyboard shortcut.                                                                                                                                             | -       |
| startContent     | `ReactNode`                                                                                   | The start content of the dropdown item.                                                                                                                                          | -       |
| endContent       | `ReactNode`                                                                                   | The end content of the dropdown item. This is positioned after the shortcut and the selected icon.                                                                               | -       |
| selectedIcon     | [SelectedIconProps](#dropdown-item-selected-icon-props)                                       | Custom icon to render when the item is selected.                                                                                                                                 | -       |
| showDivider      | `boolean`                                                                                     | Whether to show a divider below the item.                                                                                                                                        | `false` |
| href             | `string`                                                                                      | A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).                                                                                   | -       |
| target           | `HTMLAttributeAnchorTarget`                                                                   | The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).                                                                   | -       |
| rel              | `string`                                                                                      | The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).                                  | -       |
| download         | `boolean` \| `string`                                                                         | Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download). | -       |
| ping             | `string`                                                                                      | A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).                                   | -       |
| referrerPolicy   | `HTMLAttributeReferrerPolicy`                                                                 | How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).                                 | -       |
| isDisabled       | `boolean`                                                                                     | Whether the dropdown item should be disabled. (**Deprecated**) pass **disabledKeys** to `DropdownMenu` instead.                                                                  | `false` |
| isSelected       | `boolean`                                                                                     | Whether the dropdown item should be selected. (**Deprecated**) pass **selectedKeys** to `DropdownMenu` instead.                                                                  | `false` |
| isReadOnly       | `boolean`                                                                                     | Whether the dropdown item press events should be ignored.                                                                                                                        | `false` |
| hideSelectedIcon | `boolean`                                                                                     | Whether to hide the check icon when the item is selected.                                                                                                                        | `false` |
| closeOnSelect    | `boolean`                                                                                     | Whether the dropdown menu should be closed when the item is selected.                                                                                                            | `true`  |
| classNames       | `Record<"base"｜ "wrapper"｜ "title"｜ "description"｜ "shortcut" ｜ "selectedIcon", string>` | Allows to set custom class names for the dropdown item slots.                                                                                                                    | -       |

### DropdownItem Events

| Attribute     | Type                           | Description                                                                                                                  |
| ------------- | ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------- |
| onAction      | `() => void`                   | Handler that is called when the dropdown item is selected. (**Deprecated**) pass to `DropdownMenu` instead.                  |
| onClose       | `() => void`                   | Handler that is called when the dropdown item should close after selecting. (**Deprecated**) pass to `DropdownMenu` instead. |
| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                                   |
| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                              |
| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.                  |
| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                                 |
| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not.              |
| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler called when a key is pressed.                                                                                        |
| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler called when a key is released.                                                                                       |
| onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                              |

---

### Types

#### Dropdown Item Selected Icon Props

```ts
export type DropdownItemSelectedIconProps = {
  /**
   * The current icon, usually an checkmark icon.
   */
  icon?: ReactNode;
  /**
   * The current selected status.
   */
  isSelected?: boolean;
  /**
   * The current disabled status.
   * @default false
   */
  isDisabled?: boolean;
};

type selectedIcon?: ReactNode | ((props: DropdownItemSelectedIconProps) => ReactNode) | null;
```

---
title: "Image"
description: "The Image component is used to display images with support for fallback."
---

import {imageContent} from "@/content/components/image";

# Image

The Image component is used to display images with support for fallback.

<ComponentLinks component="image" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add image",
    npm: "npm install @nextui-org/image",
    yarn: "yarn add @nextui-org/image",
    pnpm: "pnpm add @nextui-org/image",
    bun: "bun add @nextui-org/image"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Image} from "@nextui-org/react";',
    individual: 'import {Image} from "@nextui-org/image";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={imageContent.usage} />

### Blurred

You can use the `isBlurred` prop to duplicate the image and blur it to create a blurred effect.

<CodeDemo title="Blurred" files={imageContent.blurred} />

### Zoomed

You can use the `isZoomed` prop make the image zoomed when hovered.

<CodeDemo title="Zoomed" files={imageContent.zoomed} />

### Animated Loading

Image component has a built-in `skeleton` animation to indicate the image is loading and an
`opacity` animation when the image loads.

<CodeDemo displayMode="visible" title="Animated Loading" files={imageContent.loading} />

> **Note**: The `URL` uses `https://app.requestly.io/delay` to simulate a slow network.

### Image with fallback

You can use the `fallbackSrc` prop to display a fallback image when:

- The `fallbackSrc` prop is provided.
- The image provided in `src` is still loading.
- The image provided in `src` fails to load.
- The image provided in `src` is not found.

<CodeDemo displayMode="visible" title="Image with fallback" files={imageContent.fallback} />

### With Next.js Image

Next.js provides an optimized [Image](https://nextjs.org/docs/app/api-reference/components/image) component,
you can use it with NextUI `Image` component as well.

<CodeDemo showPreview={false} title="With Next.js Image" files={imageContent.nextjs} />

> **Note**: NextUI's `Image` component is `client-side`, using hooks like `useState` for loading states
> and animations. Use Next.js `Image` alone if these features aren't required.

## Slots

- **img**: Slot for the image element.
- **wrapper**: Image wrapper, it handles alignment, placement, and general appearance.
- **zoomedWrapper**: The wrapper slot for the zoomed image it avoids the image content to overflow the parent container.
- **blurredImg**: The wrapper slot for the duplicated blurred image.

## API

### Image Props

| Attribute       | Type                                                                 | Description                                                                                                                                                                                                 | Default |
| --------------- | -------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| src             | `string`                                                             | The image source.                                                                                                                                                                                           | -       |
| srcSet          | `string`                                                             | The image srcSet.                                                                                                                                                                                           | -       |
| sizes           | `string`                                                             | The image sizes.                                                                                                                                                                                            | -       |
| alt             | `string`                                                             | The image alt.                                                                                                                                                                                              | -       |
| width           | `number`                                                             | The image width.                                                                                                                                                                                            | -       |
| height          | `number`                                                             | The image height.                                                                                                                                                                                           | -       |
| radius          | `none` \| `sm` \| `md` \| `lg` \| `full`                             | The image border radius.                                                                                                                                                                                    | `xl`    |
| shadow          | `none` \| `sm` \| `md` \| `lg`                                       | The image shadow.                                                                                                                                                                                           | `none`  |
| loading         | `eager` \| `lazy`                                                    | A loading strategy to use for the image.                                                                                                                                                                    | -       |
| fallbackSrc     | `string`                                                             | The fallback image source.                                                                                                                                                                                  | -       |
| isBlurred       | `boolean`                                                            | Whether the image should have a duplicated blurred image at the background.                                                                                                                                 | `false` |
| isZoomed        | `boolean`                                                            | Whether the image should be zoomed when hovered.                                                                                                                                                            | `false` |
| removeWrapper   | `boolean`                                                            | Whether to remove the wrapper element. This will cause the image to be rendered as a direct child of the parent element. If you set this prop as `true` neither the skeleton nor the zoom effect will work. | `false` |
| disableSkeleton | `boolean`                                                            | Whether the image should disable the skeleton animation while loading.                                                                                                                                      | `false` |
| classNames      | `Record<"img"｜ "wrapper"｜ "zoomedWrapper"｜ "blurredImg", string>` | Allows to set custom class names for the image slots.                                                                                                                                                       | -       |

### Image Events

| Attribute | Type                                  | Description                                          |
| --------- | ------------------------------------- | ---------------------------------------------------- |
| onLoad    | `ReactEventHandler<HTMLImageElement>` | Handler that is called when the image load.          |
| onError   | `() => void`                          | Handler that is called when the image fails to load. |

---
title: "Input"
description: "Input is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more."
---

import {inputContent} from "@/content/components/input";

# Input

Input is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more.

<ComponentLinks component="input" reactAriaHook="useTextField" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add input",
    npm: "npm install @nextui-org/input",
    yarn: "yarn add @nextui-org/input",
    pnpm: "pnpm add @nextui-org/input",
    bun: "bun add @nextui-org/input"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Input} from "@nextui-org/react";',
    individual: 'import {Input} from "@nextui-org/input";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={inputContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={inputContent.disabled} />

### Read Only

<CodeDemo title="Read Only" files={inputContent.readOnly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the input will be required.

<CodeDemo title="Required" files={inputContent.required} />

### Sizes

<CodeDemo title="Sizes" files={inputContent.sizes} />

### Colors

<CodeDemo title="Colors" files={inputContent.colors} />

### Variants

<CodeDemo title="Variants" files={inputContent.variants} />

### Radius

<CodeDemo title="Radius" files={inputContent.radius} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" files={inputContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Password Input

You can use the `type` property to change the input type to `password`.

<CodeDemo title="Password Input" highlightedLines="25" files={inputContent.password} />

### Clear Button

If you pass the `isClearable` property to the input, it will have a clear button at the
end of the input, it will be visible when the input has a value.

<CodeDemo title="Clear Button" highlightedLines="7" files={inputContent.clearButton} />

### Start & End Content

You can use the `startContent` and `endContent` properties to add content to the start and end of the input.

<CodeDemo title="Start and End Content" files={inputContent.startEndContent} />

### With Description

You can add a description to the input by passing the `description` property.

<CodeDemo title="With Description" files={inputContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input. `errorMessage` is only shown when `isInvalid` is set to `true`.

<CodeDemo title="With Error Message" files={inputContent.errorMessage} />

Example with `regex` email validation:

<CodeDemo title="With Regex Validation" files={inputContent.regexValidation} />

### Controlled

You can use the `value` and `onValueChange` properties to control the input value.

<CodeDemo title="Controlled" files={inputContent.controlled} />

> **Note**: NextUI `Input` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the input, it is the one that is displayed above, inside or left of the input.
- **mainWrapper**: Wraps the `inputWrapper` when position is `outside` / `outside-left`.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.
- **input**: The input element.
- **clearButton**: The clear button, it is at the end of the input.
- **helperWrapper**: Wraps the `description` and the `errorMessage`.
- **description**: The description of the input.
- **errorMessage**: The error message of the input.

### Custom Styles

You can customize the `Input` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" highlightedLines="13-31" files={inputContent.customStyles} />

### Custom Implementation

In case you need to customize the input even further, you can use the `useInput` hook to create your own implementation.

<CodeDemo
  showPreview={false}
  showOpenInCodeSandbox={true}
  title="Custom Implementation"
  files={inputContent.customImpl}
/>

<Spacer y={4} />

## Data Attributes

`Input` has the following attributes on the `base` element:

- **data-invalid**:
  When the input is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the input is required. Based on `isRequired` prop.
- **data-readonly**:
  When the input is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the input is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the input is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-within**:
  When the input is being focused or any of its children. Based on [useFocusWithin](https://react-spectrum.adobe.com/react-aria/useFocusWithin.html).
- **data-focus-visible**:
  When the input is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the input is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input via ARIA.

<Spacer y={4} />

## API

### Input Props

| Attribute          | Type                                                                                                                                                                   | Description                                                                                                                                                   | Default   |
| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
| children           | `ReactNode`                                                                                                                                                            | The content of the input.                                                                                                                                     | -         |
| variant            | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                        | The variant of the input.                                                                                                                                     | `flat`    |
| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                            | The color of the input.                                                                                                                                       | `default` |
| size               | `sm` \| `md` \| `lg`                                                                                                                                                   | The size of the input.                                                                                                                                        | `md`      |
| radius             | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                               | The radius of the input.                                                                                                                                      | -         |
| label              | `ReactNode`                                                                                                                                                            | The content to display as the label.                                                                                                                          | -         |
| value              | `string`                                                                                                                                                               | The current value of the input (controlled).                                                                                                                  | -         |
| defaultValue       | `string`                                                                                                                                                               | The default value of the input (uncontrolled).                                                                                                                | -         |
| placeholder        | `string`                                                                                                                                                               | The placeholder of the input.                                                                                                                                 | -         |
| description        | `ReactNode`                                                                                                                                                            | A description for the input. Provides a hint such as specific requirements for what to choose.                                                                | -         |
| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                                                  | An error message for the input. It is only shown when `isInvalid` is set to `true`                                                                            | -         |
| validate           | `(value: string) => ValidationError ｜ true ｜ null ｜ undefined`                                                                                                       | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -         |
| validationBehavior | `native` \| `aria`                                                                                                                                                     | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
| startContent       | `ReactNode`                                                                                                                                                            | Element to be rendered in the left side of the input.                                                                                                         | -         |
| endContent         | `ReactNode`                                                                                                                                                            | Element to be rendered in the right side of the input.                                                                                                        | -         |
| labelPlacement     | `inside` \| `outside` \| `outside-left`                                                                                                                                | The position of the label.                                                                                                                                    | `inside`  |
| fullWidth          | `boolean`                                                                                                                                                              | Whether the input should take up the width of its parent.                                                                                                     | `true`    |
| isClearable        | `boolean`                                                                                                                                                              | Whether the input should have a clear button.                                                                                                                 | `false`   |
| isRequired         | `boolean`                                                                                                                                                              | Whether user input is required on the input before form submission.                                                                                           | `false`   |
| isReadOnly         | `boolean`                                                                                                                                                              | Whether the input can be selected but not changed by the user.                                                                                                |           |
| isDisabled         | `boolean`                                                                                                                                                              | Whether the input is disabled.                                                                                                                                | `false`   |
| isInvalid          | `boolean`                                                                                                                                                              | Whether the input is invalid.                                                                                                                                 | `false`   |
| baseRef            | `RefObject<HTMLDivElement>`                                                                                                                                            | The ref to the base element.                                                                                                                                  | -         |
| validationState    | `valid` \| `invalid`                                                                                                                                                   | Whether the input should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                         | -         |
| disableAnimation   | `boolean`                                                                                                                                                              | Whether the input should be animated.                                                                                                                         | `false`   |
| classNames         | `Record<"base"｜ "label"｜ "inputWrapper"｜ "innerWrapper"｜ "mainWrapper" ｜ "input" ｜ "clearButton" ｜ "helperWrapper" ｜ "description" ｜ "errorMessage", string>`    | Allows to set custom class names for the Input slots.                                                                                                         | -         |

### Input Events

| Attribute     | Type                                  | Description                                                                                                                         |
| ------------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |
| onValueChange | `(value: string) => void`             | Handler that is called when the element's value changes.                                                                            |
| onClear       | `() => void`                          | Handler that is called when the clear button is clicked.                                                                            |

---
title: "Keyboard Key"
description: "Keyboard key is a component to display which key or combination of keys performs a given action."
---

import {kbdContent} from "@/content/components/kbd";

# Keyboard Key

Keyboard key is a component to display which key or combination of keys performs a given action.

<ComponentLinks component="kbd" rscCompatible />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add kbd",
    npm: "npm install @nextui-org/kbd",
    yarn: "yarn add @nextui-org/kbd",
    pnpm: "pnpm add @nextui-org/kbd",
    bun: "bun add @nextui-org/kbd"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Kbd} from "@nextui-org/react";',
    individual: 'import {Kbd} from "@nextui-org/kbd";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={kbdContent.usage} />

### Keys

<CodeDemo title="Keys" files={kbdContent.keys} />

> **Note**: Check the [API](#keyboard-keys) section to see all available keys.

## Slots

- **base**: Kbd wrapper, it handles alignment, placement, and general appearance.
- **abbr**: The `keys` wrapper that handles the appearance of the keys.
- **content**: The children wrapper that handles the appearance of the content.

<Spacer y={4}/>  

## Accessibility

- Each command `key` has a `title` attribute that describes the action that the key performs.

<Spacer y={4}/>  

## API

### Keyboard Key Props

| Attribute  | Type                                                   | Description                                              | Default |
| ---------- | ------------------------------------------------------ | -------------------------------------------------------- | ------- |
| children   | `ReactNode`                                            | The content of the keyboard key.                         | -       |
| keys       | [KbdKey](#keyboard-keys) \| [KbdKey[]](#keyboard-keys) | The keys of the keyboard key.                            | -       |
| classNames | `Record<"base"｜"abbr"｜"content",string>`          | Allows to set custom class names for the checkbox slots. | -       |

### Keyboard Keys

List of supported keys.

```ts
type KbdKey =
  | "command"
  | "shift"
  | "ctrl"
  | "option"
  | "enter"
  | "delete"
  | "escape"
  | "tab"
  | "capslock"
  | "up"
  | "right"
  | "down"
  | "left"
  | "pageup"
  | "pagedown"
  | "home"
  | "end"
  | "help"
  | "space";
```

---
title: "Link"
description: "Links allow users to click their way from page to page. This component is styled to resemble a hyperlink and semantically renders an <a>"
---

import {linkContent} from "@/content/components/link";

# Link

Links allow users to click their way from page to page. This component is styled to resemble a hyperlink and semantically renders an `<a>`

<ComponentLinks component="link" reactAriaHook="useLink" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add link",
    npm: "npm install @nextui-org/link",
    yarn: "yarn add @nextui-org/link",
    pnpm: "pnpm add @nextui-org/link",
    bun: "bun add @nextui-org/link"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Link} from "@nextui-org/react";',
    individual: 'import {Link} from "@nextui-org/link";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={linkContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={linkContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={linkContent.sizes} />

### Colors

<CodeDemo title="Colors" files={linkContent.colors} />

### Underline

<CodeDemo title="Underline" files={linkContent.underline} />

### External

If you pass the `isExternal` prop, the link will have the `target="_blank"` and `rel="noopener noreferrer"` attributes.

<CodeDemo title="External" files={linkContent.external} />

### Custom Anchor Icon

<CodeDemo title="Custom Anchor Icon" files={linkContent.customAnchorIcon} />

### Block Link

If you pass the `isBlock` prop, the link will be rendered as a block element with a `hover` effect.

<CodeDemo title="Block Link" files={linkContent.block} />

### Polymorphic Component

NextUI components expose a `as` prop that allows you to customize the React element type that is used to render the component.

<CodeDemo title="Polymorphic Component" files={linkContent.polymorphic} />

### Routing

The `<Link>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and 
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.


```jsx
import {Link} from "@nextui-org/react";

function App() {
  return (
    <>
      <Link href="/home">Home</Link>
      <Link href="/about">About</Link>
    </>
  );
}
```

### Custom Implementation

In case you need to customize the link even further, you can use the `useLink` hook to create your own implementation.

<CodeDemo showPreview={false} title="Custom implementation" files={linkContent.customImpl} />

<Spacer y={4} />

## Data Attributes

`Link` has the following attributes on the `base` element:

- **data-focus**:
  When the link is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)
- **data-focus-visible**:
  When the link is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)
- **data-disabled**:
  When the link is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Support for mouse, touch, and keyboard interactions.
- Support for navigation links via `<a>` elements or custom element types via ARIA.
- Support for disabled links.
- Keyboard users may activate links using the <Kbd>Enter</Kbd> key.

<Spacer y={4} />

## API

### Link Props

| Attribute        | Type                                                                           | Description                                                                                                                                                                      | Default   |
| ---------------- | ------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
| size             | `sm` \| `md` \| `lg`                                                           | The size of the link.                                                                                                                                                            | `md`      |
| color            | `foreground` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the link.                                                                                                                                                           | `primary` |
| underline        | `none` \| `hover` \| `always` \| `active` \| `focus`                           | The underline of the link.                                                                                                                                                       | `none`    |
| href             | `string`                                                                       | A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).                                                                                   | -         |
| target           | `HTMLAttributeAnchorTarget`                                                    | The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).                                                                   | -         |
| rel              | `string`                                                                       | The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).                                  | -         |
| download         | `boolean` \| `string`                                                          | Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download). | -         |
| ping             | `string`                                                                       | A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).                                   | -         |
| referrerPolicy   | `HTMLAttributeReferrerPolicy`                                                  | How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).                                 | -         |
| isExternal       | `boolean`                                                                      | Whether the link should open in a new tab.                                                                                                                                       | `false`   |
| showAnchorIcon   | `boolean`                                                                      | Whether to show the anchor icon.                                                                                                                                                 | `false`   |
| anchorIcon       | `ReactNode`                                                                    | The anchor icon.                                                                                                                                                                 | -         |
| isBlock          | `boolean`                                                                      | Whether the link should be rendered as block with a hover effect.                                                                                                                | `false`   |
| isDisabled       | `boolean`                                                                      | Whether the link is disabled.                                                                                                                                                    | `false`   |
| disableAnimation | `boolean`                                                                      | Whether to disable link and block animations.                                                                                                                                    | `false`   |

### Link Events

| Attribute     | Type                           | Description                                                                                                     | Default |
| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------- | ------- |
| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                      | -       |
| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                 | -       |
| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.     | -       |
| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                    | -       |
| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not. | -       |
| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler called when a key is pressed.                                                                           | -       |
| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler called when a key is released.                                                                          | -       |
| onClick       | `MouseEventHandler`            | The native link click event handler (**Deprecated**) use **onPress** instead.                                   | -       |

---
title: "Listbox"
description: "A listbox displays a list of options and allows a user to select one or more of them."
---

import {listboxContent} from "@/content/components/listbox";

# Listbox

A listbox displays a list of options and allows a user to select one or more of them.

<ComponentLinks component="listbox" reactAriaHook="useListBox" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add listbox",
    npm: "npm install @nextui-org/listbox",
    yarn: "yarn add @nextui-org/listbox",
    pnpm: "pnpm add @nextui-org/listbox",
    bun: "bun add @nextui-org/listbox"
  }}
/>

## Import

NextUI exports 3 listbox-related components:

- **Listbox**: The main component, which is a wrapper for the other components.
- **ListboxSection**: The component that contains a group of listbox items.
- **ListboxItem**: The component that represents a listbox item.

<ImportTabs
  commands={{
    main: `import {
  Listbox,
  ListboxSection,
  ListboxItem
} from "@nextui-org/react";`,
    individual: `import {
  Listbox,
  ListboxSection,
  ListboxItem
} from "@nextui-org/listbox";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={listboxContent.usage} />

### Dynamic items

Listbox follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" files={listboxContent.dynamic} />

### Disabled Keys

Listbox items can be disabled using the `disabledKeys` prop to the `Listbox` component.

<CodeDemo title="Disabled Keys" highlightedLines="10" files={listboxContent.disabledKeys} />

> **Note**: It's important to have a unique key for each item, otherwise the disabled keys will not work.

### Variants

You can use the `variant` in the `Listbox` component to change the `hover` style of the listbox items.

<CodeDemo title="Variants" highlightedLines="18" files={listboxContent.variants} />

### Single Selection

You can set the `selectionMode` property as `single` to allow the user to select only one item at a time.

<CodeDemo
  title="Single Selection"
  highlightedLines="20-22"
  files={listboxContent.singleSelection}
/>

### Multiple Selection

You can set the `selectionMode` property as `multiple` to allow the user to select multiple items at a time.

<CodeDemo
  title="Multiple Selection"
  highlightedLines="20-22"
  files={listboxContent.multipleSelection}
/>

> **Note**: To allow empty selection, you can set the `disallowEmptySelection` property as `false`.

### With Icons

It is possible to add icons to the listbox items using the `startContent` / `endContent` props.

<CodeDemo title="With Icons" highlightedLines="23,30,38" files={listboxContent.icons} />

> **Note**: If you use `currentColor` as the icon color, the icon will have the same color as the item text.

### With Description

You can use the `description` prop to add a description to the listbox item.

<CodeDemo
  title="With Description"
  highlightedLines="17,24,32,41"
  files={listboxContent.description}
/>

### With Top & Bottom Content

You can use the `topContent` and `bottomContent` props to add content above and below the listbox items.

<CodeDemo title="With Top & Bottom Content" files={listboxContent.topContent} />

### With Sections

You can use the `ListboxSection` component to group listbox items.

<CodeDemo title="With Sections" highlightedLines="15,38" files={listboxContent.sections} />

> **Note**: Sections without a `title` must provide an `aria-label` for accessibility.

### Routing

The `<ListboxItem>` component works with frameworks and client side routers like [Next.js](https://nextjs.org/) and
[React Router](https://reactrouter.com/en/main). See the [Routing](/docs/guide/routing) guide to learn how to set this up.

```jsx
import {Listbox, ListboxItem} from "@nextui-org/react";

function App() {
  return (
    <Listbox>
      <ListboxItem key="home" href="/home">
        Home
      </ListboxItem>
      <ListboxItem key="about" href="/about">
        About
      </ListboxItem>
    </Listbox>
  );
}
```

## Slots

Listbox has 3 components with slots the base one `Listbox`, `ListboxItem` and `ListboxSection` components.

### Listbox

- **base**: The main wrapper for the listbox component. This slot wraps the `topContent`, `bottomContent` and the `list` slot.
- **list**: The slot for the listbox component. You can see this slot as the `ul` slot.
- **emptyContent**: The slot content to display when the collection is empty.

### ListboxItem

- **base**: The main slot for the listbox item. It wraps all the other slots.
- **wrapper**: The `title` and `description` wrapper.
- **title**: The title of the listbox item.
- **description**: The description of the listbox item.
- **selectedIcon**: The selected icon slot. This is only visible when the item is selected.

### ListboxSection

- **base**: The main slot for the listbox section. It wraps all the other slots.
- **heading**: The title that is render on top of the section group.
- **group**: The group of listbox items.
- **divider**: The divider that is render between the groups. This is only visible when `showDivider` is `true`.

### Customizing the listbox

You can customize the `Listbox` items style by using the `itemClasses` prop and passing custom Tailwind CSS classes.

<CodeDemo title="Custom Styles" files={listboxContent.customStyles} />

> **Note**: In the above example, we've utilized the [Boxicons](https://boxicons.com/) icons collection.

<Spacer y={4} />

### Keyboard Interactions

| Key                                  | Description                                                                                                      |
| ------------------------------------ | ---------------------------------------------------------------------------------------------------------------- |
| <Kbd>Home</Kbd>                      | Moves focus to the first item.                                                                                   |
| <Kbd>End</Kbd>                       | Moves focus to the last item.                                                                                    |
| <Kbd>ArrowDown</Kbd>                 | When focus is on an item, moves focus to the next item.                                                          |
| <Kbd>ArrowUp</Kbd>                   | When focus is on an item, moves focus to the previous item.                                                      |
| <Kbd>Enter</Kbd> or <Kbd>Space</Kbd> | When focus is on an item, selects the item.                                                                      |
| <Kbd>A-Z</Kbd> or <Kbd>a-z</Kbd>     | Moves focus to the next menu item with a label that starts with the typed character if such an menu item exists. |

## Data Attributes

`ListboxItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the listbox item is disabled. Based on listbox `disabledKeys` prop.
- **data-selected**:
  When the listbox item is selected. Based on listbox `selectedKeys` prop.
- **data-selectable**:
  When the listbox item is selectable. Based on listbox `selectionMode` prop.
- **data-hover**:
  When the listbox item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the listbox item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the listbox item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the listbox item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a `listbox` using ARIA.
- Support for single, multiple, or no selection.
- Support for disabled items.
- Support for sections.
- Labeling support for accessibility.
- Support for mouse, touch, and keyboard interactions.
- Tab stop focus management.
- Keyboard navigation support including arrow keys, home/end, page up/down, select all, and clear.
- Automatic scrolling support during keyboard navigation.
- Typeahead to allow focusing options by typing text.

<Spacer y={4} />

## API

### Listbox Props

| Attribute              | Type                                                                                                   | Description                                                                                              | Default     |
| ---------------------- | ------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------- | ----------- |
| children\*             | `ReactNode[]`                                                                                          | The children to render. Usually a list of `ListboxItem` or `ListboxSection`                              | -           |
| items                  | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | Item objects in the collection. (dynamic)                                                                | -           |
| variant                | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow`                                      | The listbox items appearance style.                                                                      | `solid`     |
| color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                            | The listbox items color theme.                                                                           | `default`   |
| selectionMode          | `none` \| `single` \| `multiple`                                                                       | The type of selection that is allowed in the collection.                                                 | -           |
| selectedKeys           | `React.Key[]`                                                                                          | The currently selected keys in the collection (controlled).                                              | -           |
| disabledKeys           | `React.Key[]`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.  | -           |
| defaultSelectedKeys    | `all` \| `React.Key[]`                                                                                 | The initial selected keys in the collection (uncontrolled).                                              | -           |
| disallowEmptySelection | `boolean`                                                                                              | Whether the collection allows empty selection.                                                           | `false`     |
| shouldHighlightOnFocus | `boolean`                                                                                              | Whether the focused item should be highlighted. It applies the same styles to the items as when hovered. | `false`     |
| autoFocus              | `boolean` \| `first` \| `last`                                                                         | Where the focus should be set.                                                                           | `false`     |
| topContent             | `ReactNode`                                                                                            | The content to display above the listbox items.                                                          | -           |
| bottomContent          | `ReactNode`                                                                                            | The content to display below the listbox items.                                                          | -           |
| emptyContent           | `ReactNode`                                                                                            | The content to display when the collection is empty.                                                     | `No items.` |
| shouldFocusWrap        | `boolean`                                                                                              | Whether keyboard navigation is circular.                                                                 | `false`     |
| hideEmptyContent       | `boolean`                                                                                              | Whether to not display the empty content when the collection is empty.                                   | `false`     |
| hideSelectedIcon       | `boolean`                                                                                              | Whether to hide the check icon when the items are selected.                                              | `false`     |
| disableAnimation       | `boolean`                                                                                              | Whether to disable the animation of the listbox items.                                                   | `false`     |
| classNames             | `Record<"base"｜ "list"｜ "emptyContent", string>`                                                     | Allows to set custom class names for the listbox slots.                                                  | -           |
| itemClasses            | `Record<"base"｜ "wrapper"｜ "title"｜ "description"｜ "selectedIcon", string>`                        | Allows to set custom class names for the listbox item slots.                                             | -           |

### Listbox Events

| Attribute         | Type                          | Description                                        |
| ----------------- | ----------------------------- | -------------------------------------------------- |
| onAction          | `(key: React.Key) => void`    | Handler that is called when an item is selected.   |
| onSelectionChange | `(keys: React.Key[]) => void` | Handler that is called when the selection changes. |

---

### ListboxSection Props

| Attribute        | Type                                                                                                   | Description                                                                               | Default |
| ---------------- | ------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------- | ------- |
| children\*       | `ReactNode`                                                                                            | The contents of the listbox section. Usually a list of `ListboxItem` components. (static) | -       |
| title            | `string`                                                                                               | The title of the listbox section.                                                         | -       |
| items            | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | Item objects in the collection. (dynamic)                                                 | -       |
| hideSelectedIcon | `boolean`                                                                                              | Whether to hide the check icon when the items are selected.                               | `false` |
| showDivider      | `boolean`                                                                                              | Whether to show the divider between the groups.                                           | `false` |
| dividerProps     | [DividerProps](/docs/components/divider)                                                               | The divider component props.                                                              | -       |
| classNames       | `Record<"base"｜ "heading"｜ "group"｜ "divider", string>`                                             | Allows to set custom class names for the listbox section slots.                           | -       |
| itemClasses      | `Record<"base"｜ "wrapper"｜ "title"｜ "description"｜ "shortcut" ｜ "selectedIcon", string>`          | Allows to set custom class names for the listbox item slots.                              | -       |

---

### ListboxItem Props

| Attribute              | Type                                                                                          | Description                                                                                                                                                                      | Default |
| ---------------------- | --------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| children\*             | `ReactNode`                                                                                   | The contents of the listbox item.                                                                                                                                                | -       |
| key                    | `React.Key`                                                                                   | The unique key for the listbox item.                                                                                                                                             | -       |
| title                  | `string` \| `ReactNode`                                                                       | The title of the listbox item.                                                                                                                                                   | -       |
| textValue              | `string`                                                                                      | A string representation of the item's contents, used for features like typeahead.                                                                                                | -       |
| description            | `string` \| `ReactNode`                                                                       | The description of the listbox item.                                                                                                                                             | -       |
| shortcut               | `string` \| `ReactNode`                                                                       | The listbox item keyboard shortcut.                                                                                                                                              | -       |
| startContent           | `ReactNode`                                                                                   | The start content of the listbox item.                                                                                                                                           | -       |
| endContent             | `ReactNode`                                                                                   | The end content of the listbox item. This is positioned after the shortcut and the selected icon.                                                                                | -       |
| selectedIcon           | [SelectedIconProps](#listbox-item-selected-icon-props)                                        | Custom icon to render when the item is selected.                                                                                                                                 | -       |
| href                   | `string`                                                                                      | A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).                                                                                   | -       |
| target                 | `HTMLAttributeAnchorTarget`                                                                   | The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).                                                                   | -       |
| rel                    | `string`                                                                                      | The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).                                  | -       |
| download               | `boolean` \| `string`                                                                         | Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download). | -       |
| ping                   | `string`                                                                                      | A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).                                   | -       |
| referrerPolicy         | `HTMLAttributeReferrerPolicy`                                                                 | How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).                                 | -       |
| shouldHighlightOnFocus | `boolean`                                                                                     | Whether the focused item should be highlighted. It applies the same styles to the item as when hovered.                                                                          | `false` |
| hideSelectedIcon       | `boolean`                                                                                     | Whether to hide the check icon when the item is selected.                                                                                                                        | `false` |
| showDivider            | `boolean`                                                                                     | Whether to show a divider below the item.                                                                                                                                        | `false` |
| isDisabled             | `boolean`                                                                                     | Whether the listbox item should be disabled. (**Deprecated**) pass **disabledKeys** to `Listbox` instead.                                                                        | `false` |
| isSelected             | `boolean`                                                                                     | Whether the listbox item should be selected. (**Deprecated**) pass **selectedKeys** to `Listbox` instead.                                                                        | `false` |
| isReadOnly             | `boolean`                                                                                     | Whether the listbox item press events should be ignored.                                                                                                                         | `false` |
| classNames             | `Record<"base"｜ "wrapper"｜ "title"｜ "description"｜ "shortcut" ｜ "selectedIcon", string>` | Allows to set custom class names for the listbox item slots.                                                                                                                     | -       |

### ListboxItem Events

| Attribute     | Type                           | Description                                                                                                     |
| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------- |
| onAction      | `() => void`                   | Handler that is called when the listbox item is selected. (**Deprecated**) pass to `Listbox` instead.           |
| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                      |
| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                 |
| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.     |
| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                    |
| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not. |
| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler called when a key is pressed.                                                                           |
| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler called when a key is released.                                                                          |
| onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                 |

---

### Types

#### Listbox Item Selected Icon Props

```ts
export type ListboxItemSelectedIconProps = {
  /**
   * The current icon, usually an checkmark icon.
   */
  icon?: ReactNode;
  /**
   * The current selected status.
   */
  isSelected?: boolean;
  /**
   * The current disabled status.
   * @default false
   */
  isDisabled?: boolean;
};

type selectedIcon?: ReactNode | ((props: ListboxItemSelectedIconProps) => ReactNode) | null;
```

---
title: "Modal"
description: "Display a dialog with a custom content that requires attention or provides additional information."
---

import {modalContent} from "@/content/components/modal";

# Modal

Displays a dialog with a custom content that requires attention or provides additional information.

<ComponentLinks component="modal" reactAriaHook="useModal" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add modal",
    npm: "npm install @nextui-org/modal",
    yarn: "yarn add @nextui-org/modal",
    pnpm: "pnpm add @nextui-org/modal",
    bun: "bun add @nextui-org/modal"
  }}
/>


## Import

NextUI exports 5 modal-related components:

- **Modal**: The main component to display a modal.
- **ModalContent**: The wrapper of the other modal components.
- **ModalHeader**: The header of the modal.
- **ModalBody**: The body of the modal.
- **ModalFooter**: The footer of the modal.

<ImportTabs
  commands={{
    main: `import {
  Modal, 
  ModalContent, 
  ModalHeader, 
  ModalBody, 
  ModalFooter
} from "@nextui-org/react";`,
    individual:
      `import {
  Modal, 
  ModalContent, 
  ModalHeader, 
  ModalBody, 
  ModalFooter
} from "@nextui-org/modal";`,
  }}
/>

## Usage

When the modal opens:

- Focus is bounded within the modal and set to the first tabbable element.
- Content behind a modal dialog is inert, meaning that users cannot interact with it.

<CodeDemo title="Usage" files={modalContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={modalContent.sizes} />

### Non-dissmissable

By default, the modal can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key. 
You can disable this behavior by setting the following properties:

- Set the `isDismissable` property to `false` to prevent the modal from closing when clicking on the overlay.
- Set the `isKeyboardDismissDisabled` property to `true` to prevent the modal from closing when pressing the Esc key.

<CodeDemo title="Non-dissmissible" files={modalContent.nonDismissable} />

### Modal placement

By default the modal is centered on screens higher than `sm` and is at the `bottom` of the screen on mobile. This placement is called `auto`, but
you can change it by using the `placement` prop.

<CodeDemo
  asIframe
  title="Modal placement"
  iframeInitialWidth={320}
  previewHeight="680px"
  iframeSrc="/examples/modal/placement"
  files={modalContent.placement}
/>

> **Note**: The `top-center` and `bottom-center` positions mean that the modal is positioned at the top / bottom of the screen
> on mobile and at the center of the screen on desktop.

### Overflow scroll

You can use the `scrollBehavior` prop to set the scroll behavior of the modal.

- **inside**: The modal content will be scrollable.
- **outside**: The modal content will be scrollable and the modal will be fixed.

<CodeDemo title="Overflow scroll" files={modalContent.overflow} />

### With Form

The `Modal` handles the focus within the modal content. It means that you can use the modal with
form elements without any problem. the focus returns to the trigger when the modal closes.

<CodeDemo title="With Form" files={modalContent.form} />

> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the modal opens.

### Backdrop

The `Modal` component has a `backdrop` prop to show a backdrop behind the modal. The backdrop can be
either `transparent`, `opaque` or `blur`. The default value is `opaque`.

<CodeDemo title="Backdrop" files={modalContent.backdrop} />

### Custom Backdrop

You can customize the backdrop by using the `backdrop` slot.

<CodeDemo title="Custom Backdrop" files={modalContent.customBackdrop} />

### Custom Motion

Modal offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" highlightedLines="14-31" files={modalContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

## Slots

- **wrapper**: The wrapper slot of the modal. It wraps the `base` and the `backdrop` slots.
- **base**: The main slot of the modal content.
- **backdrop**: The backdrop slot, it is displayed behind the modal.
- **header**: The header of the modal, it is displayed at the top of the modal.
- **body**: The body of the modal, it is displayed in the middle of the modal.
- **footer**: The footer of the modal, it is displayed at the bottom of the modal.
- **closeButton**: The close button of the modal.

### Custom Styles

You can customize the `Modal` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" highlightedLines="15-20" files={modalContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Modal` has the following attributes on the `base` element:

- **data-open**:
  When the modal is open. Based on modal state.
- **data-dismissable**:
  When the modal is dismissable. Based on `isDismissable` prop.

<Spacer y={4} />

## Accessibility

- Content outside the modal is hidden from assistive technologies while it is open.
- The modal optionally closes when interacting outside, or pressing the <Kbd>Esc</Kbd> key.
- Focus is moved into the modal on mount, and restored to the trigger element on unmount.
- While open, focus is contained within the modal, preventing the user from tabbing outside.
- Scrolling the page behind the modal is prevented while it is open, including in mobile browsers.

<Spacer y={4} />

## API

### Modal Props

| Attribute                 | Type                                                                                                | Description                                                                                           | Default         |
| ------------------------- | --------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | --------------- |
| children\*                | `ReactNode`                                                                                         | The content of the modal. It's usually the `ModalContent`.                                            | -               |
| size                      | `xs` \| `sm` \| `md` \| `lg` \| `xl` \| `2xl` \| `3xl` \| `4xl` \| `5xl` \| `full`                  | The modal size. This changes the modal `max-width` and `height` (full).                               | `md`            |
| radius                    | `none` \| `sm` \| `md` \| `lg`                                                                      | The modal border radius.                                                                              | `lg`            |
| shadow                    | `none` \| `sm` \| `md` \| `lg`                                                                      | The modal shadow.                                                                                     | `lg`            |
| backdrop                  | `transparent` \| `opaque` \| `blur`                                                                 | The modal backdrop type.                                                                              | `opaque`        |
| scrollBehavior            | `normal` \| `inside` \| `outside`                                                                   | The modal scroll behavior.                                                                            | `normal`        |
| placement                 | `auto` \| `top` \| `center` \| `bottom`                                                             | The modal position.                                                                                   | `auto`          |
| isOpen                    | `boolean`                                                                                           | Whether the modal is open by default (controlled).                                                    | -               |
| defaultOpen               | `boolean`                                                                                           | Whether the modal is open by default (uncontrolled).                                                  | -               |
| isDismissable             | `boolean`                                                                                           | Whether the modal can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key.        | `true`          |
| isKeyboardDismissDisabled | `boolean`                                                                                           | Whether pressing the <Kbd>Esc</Kbd> key to close the modal should be disabled.                        | `false`         |
| shouldBlockScroll         | `boolean`                                                                                           | Whether the modal should block the scroll of the page on open.                                        | `true`          |
| hideCloseButton           | `boolean`                                                                                           | Whether to hide the modal close button.                                                               | `false`         |
| closeButton               | `ReactNode`                                                                                         | Custom close button to display on top right corner.                                                   | -               |
| motionProps               | [MotionProps](#motion-props)                                                                        | The props to modify the framer motion animation. Use the `variants` API to create your own animation. |                 |
| portalContainer           | `HTMLElement`                                                                                       | The container element in which the overlay portal will be placed.                                     | `document.body` |
| disableAnimation          | `boolean`                                                                                           | Whether the modal should not have animations.                                                         | `false`         |
| classNames                | `Record<"wrapper"｜ "base"｜ "backdrop"｜ "header" ｜ "body" ｜ "footer" ｜ "closeButton", string>` | Allows to set custom class names for the modal slots.                                                 | -               |

### Modal Events

| Attribute    | Type                        | Description                                                 |
| ------------ | --------------------------- | ----------------------------------------------------------- |
| onOpenChange | `(isOpen: boolean) => void` | Handler that is called when the modal's open state changes. |
| onClose      | `() => void`                | Handler that is called when the modal is closed.            |

<Spacer y={4} />

### Modal types

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```

---
title: "Navbar"
description: "A responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse and more."
---

import {navbarContent} from "@/content/components/navbar";

# Navbar

A responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse menu and more.

<ComponentLinks component="navbar" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add navbar",
    npm: "npm install @nextui-org/navbar",
    yarn: "yarn add @nextui-org/navbar",
    pnpm: "pnpm add @nextui-org/navbar",
    bun: "bun add @nextui-org/navbar"
  }}
/>


## Import

NextUI exports 7 navbar-related components:

- **Navbar**: The main component of navbar.
- **NavbarBrand**: The component for branding.
- **NavbarContent**: The component for wrapping navbar items.
- **NavbarItem**: The component for navbar item.
- **NavbarMenuToggle**: The component for toggling navbar menu.
- **NavbarMenu**: The component for wrapping navbar menu items.
- **NavbarMenuItem**: The component for navbar menu item.

<ImportTabs
  commands={{
    main: `import {
  Navbar, 
  NavbarBrand, 
  NavbarContent, 
  NavbarItem, 
  NavbarMenuToggle,
  NavbarMenu,
  NavbarMenuItem
} from "@nextui-org/react";`,
    individual: `import {
  Navbar, 
  NavbarBrand, 
  NavbarContent, 
  NavbarItem, 
  NavbarMenuToggle,
  NavbarMenu,
  NavbarMenuItem
} from "@nextui-org/navbar";`,
  }}
/>

## Usage

<CodeDemo
  asIframe
  title="Usage"
  previewHeight="500px"
  iframeSrc="/examples/navbar/usage"
  files={navbarContent.usage}
/>

### Static

You can use the `position` prop to make the navbar static positioned (the default behavior is `sticky`).

<CodeDemo
  asIframe
  title="Static"
  previewHeight="500px"
  iframeSrc="/examples/navbar/static"
  files={navbarContent.staticPosition}
/>

### Hide on scroll

It is possible to hide the navbar on scroll by using the `shouldHideOnScroll` prop.

<CodeDemo
  asIframe
  title="Hide on scroll"
  previewHeight="500px"
  iframeSrc="/examples/navbar/hide-on-scroll"
  files={navbarContent.hideOnScroll}
/>

### With Menu

You can use the `NavbarMenuToggle` and `NavbarMenu` components to display a togglable menu.

<CodeDemo
  asIframe
  title="With Menu"
  iframeInitialWidth={420}
  previewHeight="600px"
  iframeSrc="/examples/navbar/with-menu"
  files={navbarContent.withMenu}
/>

If you want to remove the `open` / `close` animation, you can pass the `disableAnimation={true}` prop to `Navbar` component.

<CodeDemo
  asIframe
  title="With Menu"
  iframeInitialWidth={420}
  highlightedLines="24"
  previewHeight="600px"
  iframeSrc="/examples/navbar/disable-menu-animation"
  files={navbarContent.disableMenuAnimation}
/>

### Controlled Menu

You can use the `isMenuOpen` and `onMenuOpenChange` props to control the navbar menu state.

<CodeDemo
  asIframe
  title="Controlled Menu"
  iframeInitialWidth={420}
  previewHeight="600px"
  highlightedLines="5,23-24"
  iframeSrc="/examples/navbar/controlled-menu"
  files={navbarContent.controlledMenu}
/>

### With Border

You can use the `isBordered` prop to add a bottom border to the navbar.

<CodeDemo
  asIframe
  title="Adding a bottom border"
  previewHeight="500px"
  iframeSrc="/examples/navbar/bordered"
  files={navbarContent.bordered}
/>

### Disabling Blur

Navbar has a blur effect by default. You can disable it by using the `isBlurred=false` prop.

<CodeDemo
  asIframe
  title="Disabling blur"
  previewHeight="500px"
  iframeSrc="/examples/navbar/disabled-blur"
  files={navbarContent.disabledBlur}
/>

### With Dropdown Menu

It is possible to use the [Dropdown](/docs/components/dropdown) component to display a dropdown menu as navbar item.

<CodeDemo
  asIframe
  title="With Dropdown Menu"
  previewHeight="600px"
  iframeSrc="/examples/navbar/with-dropdown-menu"
  files={navbarContent.withDropdownMenu}
/>

### With Avatar

Example of a navbar with avatar and dropdown menu.

<CodeDemo
  asIframe
  title="With Avatar"
  previewHeight="420px"
  iframeSrc="/examples/navbar/with-avatar"
  files={navbarContent.withAvatar}
/>

### With Search Input

Example of a navbar with search input.

<CodeDemo
  asIframe
  title="With Search Input"
  previewHeight="420px"
  iframeSrc="/examples/navbar/with-search-input"
  files={navbarContent.withSearchInput}
/>

### Customizing the active item

When the `NavbarItem` is active, it will have a `data-active` attribute. You can use this attribute to customize it.

<CodeDemo
  asIframe
  title="Customizing the active item"
  previewHeight="420px"
  iframeSrc="/examples/navbar/custom-active-item"
  highlightedLines="9-20"
  files={navbarContent.customActiveItem}
/>

## Slots

- **base**: The main slot for the navbar. It takes the full width of the parent and wraps the navbar elements including the menu.
- **wrapper**: The slot that contains the navbar elements such as `brand`, `content` and `toggle`.
- **brand**: The slot for the `NavbarBrand` component.
- **content**: The slot for the `NavbarContent` component.
- **item**: The slot for the `NavbarItem` component.
- **toggle**: The slot for the `NavbarMenuToggle` component.
- **toggleIcon**: The slot for the `NavbarMenuToggle` icon.
- **menu**: The slot for the `NavbarMenu` component.
- **menuItem**: The slot for the `NavbarMenuItem` component.

## Data Attributes

`Navbar` has the following attributes on the `base` element:

- **data-menu-open**:
  Indicates if the navbar menu is open.
- **data-hidden**:
  Indicates if the navbar is hidden. It is used when the `shouldHideOnScroll` prop is `true`.

`NavbarContent`

- **data-justify**:
  The justify content of the navbar content. It takes into account the correct space distribution.

`NavbarItem` has the following attributes on the `base` element:

- **data-active**:
  Indicates if the navbar item is active. It is used when the `isActive` prop is `true`.

`NavbarMenuToggle` has the following attributes on the `base` element:

- **data-open**:
  Indicates if the navbar menu is open. It is used when the `isMenuOpen` prop is `true`.
- **data-pressed**:
  When the navbar menu toggle is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-hover**:
  When the navbar menu toggle is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus-visible**:
  When the navbar menu toggle is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

`NavbarMenuItem` has the following attributes on the `base` element:

- **data-active**:
  Indicates if the menu item is active. It is used when the `isActive` prop is `true`.

<Spacer y={4} />

## API

### Navbar Props

| Attribute            | Type                                                                                                                | Description                                                                                                                                         | Default       |
| -------------------- | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- |
| children\*           | `ReactNode[]`                                                                                                       | The children to render. Usually navbar elements such as `NavbarBrand`, `NavbarContent` and `NavbarItem`                                             | -             |
| height               | `string` \| `number`                                                                                                | The height of the navbar.                                                                                                                           | `4rem` (64px) |
| position             | `static` \| `sticky`                                                                                                | The position of the navbar.                                                                                                                         | `sticky`      |
| maxWidth             | `sm` \| `md` \| `lg` \| `xl` \| `2xl` \| `full`                                                                     | The max width of the navbar wrapper.                                                                                                                | `lg`          |
| parentRef            | `React.RefObject<HTMLElement>`                                                                                      | The parent element where the navbar is placed within. This is used to determine the scroll position and whether the navbar should be hidden or not. | `window`      |
| isBordered           | `boolean`                                                                                                           | Whether the navbar should have a bottom border or not.                                                                                              | `false`       |
| isBlurred            | `boolean`                                                                                                           | Whether the navbar should have a blur effect or not.                                                                                                | `true`        |
| isMenuOpen           | `boolean`                                                                                                           | Indicates if the navbar menu is open. (controlled)                                                                                                  | `false`       |
| isMenuDefaultOpen    | `boolean`                                                                                                           | Indicates if the navbar menu is open by default. (uncontrolled)                                                                                     | `false`       |
| shouldHideOnScroll   | `boolean`                                                                                                           | Indicates if the navbar should hide on scroll.                                                                                                      | `false`       |
| motionProps          | [MotionProps](#motion-props)                                                                                        | The motion props to control the `visible` / `hidden` animation. This motion is only available if the `shouldHideOnScroll` prop is set to `true`.   | -             |
| disableScrollHandler | `boolean`                                                                                                           | Whether the navbar parent scroll event should be listened to or not.                                                                                | `false`       |
| disableAnimation     | `boolean`                                                                                                           | Whether the navbar menu animation should be disabled or not.                                                                                        | `false`       |
| classNames           | `Record<"base"｜ "wrapper"｜ "brand"｜ "content"｜ "item"｜ "toggle"｜ "toggleIcon"｜ "menu"｜ "menuItem", string>` | Allows to set custom class names for the navbar slots.                                                                                              | -             |

### Navbar Events

| Attribute              | Type                         | Description                                                                                                                                                                            |
| ---------------------- | ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| onMenuOpenChange       | `(isOpen: boolean) => void`  | Handler that is called when the navbar menu open state changes.                                                                                                                        |
| onScrollPositionChange | `(position: number) => void` | Handler that is called when the navbar parent element is scrolled. This event is only dispatched if `disableScrollHandler` is set to `false` or `shouldHideOnScroll` is set to `true`. |

### NavbarContent Props

| Attribute  | Type                         | Description                                                                                             | Default |
| ---------- | ---------------------------- | ------------------------------------------------------------------------------------------------------- | ------- |
| children\* | `ReactNode[]`                | The children to render. Usually navbar elements such as `NavbarBrand`, `NavbarContent` and `NavbarItem` | -       |
| justify    | `start` \| `center` \| `end` | The justify content of the navbar content. It takes into account the correct space distribution.        | `start` |

### NavbarItem Props

| Attribute | Type        | Description                                | Default |
| --------- | ----------- | ------------------------------------------ | ------- |
| children  | `ReactNode` | The children to render as the navbar item. | -       |
| isActive  | `boolean`   | Whether the navbar item is active or not.  | `false` |

### NavbarMenuToggle Props

| Attribute       | Type                                                                  | Description                                                           | Default                        |
| --------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------- | ------------------------------ |
| icon            | `ReactNode` \| `(isOpen: boolean \| undefined) => ReactNode \| null;` | The icon to render as the navbar menu toggle.                         | -                              |
| isSelected      | `boolean`                                                             | Whether the navbar menu toggle is selected. (controlled)              | `false`                        |
| defaultSelected | `boolean`                                                             | Whether the navbar menu toggle is selected by default. (uncontrolled) | `false`                        |
| srOnlyText      | `string`                                                              | The text to be used by screen readers.                                | `open`/`close` navigation menu |

### NavbarMenuToggle Events

| Attribute | Type                        | Description                                                    |
| --------- | --------------------------- | -------------------------------------------------------------- |
| onChange  | `(isOpen: boolean) => void` | Handler that is called when the navbar menu toggle is pressed. |

### NavbarMenu Props

| Attribute       | Type                         | Description                                                                                                                                  | Default         |
| --------------- | ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | --------------- |
| children\*      | `ReactNode[]`                | The children to render as the navbar menu. Usually a list of `NavbarMenuItem` components.                                                    | -               |
| portalContainer | `HTMLElement`                | The container element in which the navbar menu overlay portal will be placed.                                                                | `document.body` |
| motionProps     | [MotionProps](#motion-props) | The motion props to control the `open` / `close` animation. This motion is only available if the `disableAnimation` prop is set to `false`. | -               |

### NavbarMenuItem Props

| Attribute | Type        | Description                              | Default |
| --------- | ----------- | ---------------------------------------- | ------- |
| children  | `ReactNode` | The children to render as the menu item. | -       |
| isActive  | `boolean`   | Whether the menu item is active or not.  | `false` |

> **Note**: The rest of the navbar components such as `NavbarMenuItem` and `NavbarBrand` have the same props as the `li` element.

### Navbar types

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```

---
title: "Pagination"
description: "The Pagination component allows you to display active page and navigate between multiple pages."
---

import {paginationContent} from "@/content/components/pagination";

# Pagination

The Pagination component allows you to display active page and navigate between multiple pages.

<ComponentLinks component="pagination" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add pagination",
    npm: "npm install @nextui-org/pagination",
    yarn: "yarn add @nextui-org/pagination",
    pnpm: "pnpm add @nextui-org/pagination",
    bun: "bun add @nextui-org/pagination"
  }}
/>

## Import

NextUI exports 3 pagination-related components:

- **Pagination**: The main component to display a pagination.
- **PaginationItem**: The internal component to display a pagination item.
- **PaginationCursor**: The internal item component to display the current page.

<ImportTabs
  commands={{
    main: 'import {Pagination, PaginationItem, PaginationCursor} from "@nextui-org/react";',
    individual:
      'import {Pagination, PaginationItem, PaginationCursor} from "@nextui-org/pagination";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={paginationContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={paginationContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={paginationContent.sizes} />

### Colors

<CodeDemo title="Radius" files={paginationContent.colors} />

### Variants

You can use the `variant` property to change the pagination items style.

<CodeDemo title="Variants" files={paginationContent.variants} />

### With Controls

You can set the `showControls` to `true` to display the `next` and `previous` buttons.

<CodeDemo title="With Controls" files={paginationContent.controls} />

### Pagination Loop

In case you want to loop the pagination, you can set the `loop` property to `true`.
The cursor will go back to the first page when it reaches the last page and vice versa.

<CodeDemo title="Pagination Loop" files={paginationContent.loop} />

### Changing the initial page

You can change the initial page by setting the `initialPage` property.

<CodeDemo title="Changing the initial page" files={paginationContent.initialPage} />

### Compact Pagination

You can set the `isCompact` property to `true` to display reduced version of the pagination.

<CodeDemo title="Compact Pagination" files={paginationContent.compact} />

### With Shadow

You can use the `showShadow` property to display a shadow below the active page item.

<CodeDemo title="With Shadow" files={paginationContent.shadow} />

### Controlled

<CodeDemo title="Controlled" files={paginationContent.controlled} />

### Siblings

You can control the number of pages to show before and after the current page by setting the `siblings` property.

<CodeDemo title="Siblings" files={paginationContent.siblings} />

### Boundaries

You can control the number of pages to show at the beginning and end of the pagination by setting the `boundaries` property.

<CodeDemo title="Boundaries" files={paginationContent.boundaries} />

### Custom items

You can use the `renderItem` property to customize the pagination items.

<CodeDemo title="Custom items" files={paginationContent.customItems} />

## Slots

- **base**: The main pagination slot.
- **wrapper**: The pagination wrapper slot. This wraps the pagination items.
- **prev**: The previous button slot.
- **next**: The next button slot.
- **item**: The pagination item slot, applied to the middle items.
- **cursor**: The current page slot. Available only when `disableCursorAnimation` is `false` and `disableAnimation` is `false`.
- **forwardIcon**: The forward icon slot. The one that appears when hovering the ellipsis button.
- **ellipsis**: The ellipsis slot.
- **chevronNext**: The chevron next icon slot.

### Custom Styles

You can customize the `Pagination` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={paginationContent.customStyles} />

### Custom Implementation

In case you need to customize the pagination even further, you can use the `usePagination` hook to create
your own implementation.

<CodeDemo title="Custom Implementation" files={paginationContent.customImpl} /> 

<Spacer y={4} />

## Data Attributes

`Pagination` has the following attributes on the `base` element:

- **data-controls**:
  Indicates whether the pagination has controls. Based on `showControls` prop.
- **data-loop**:
  When the pagination is looped. Based on `loop` prop.
- **data-dots-jump**:
  Indicates whether the pagination has dots jump. Based on `dotsJump` prop.
- **data-total**:
  The total number of pages. Based on `total` prop.
- **data-active-page**:
  The active page. Based on `activePage` prop.

<Spacer y={4} />

## Accessibility

- The root node has a role of `navigation` by default.
- The pagination items have an aria-label that identifies the item purpose ("next page button", "previous page button", etc.), you
  can override this label by using the `getItemAriaLabel` function.
- The pagination items are in tab order, with a tabindex of "0".

<Spacer y={4} />

## API

### Pagination Props

| Attribute              | Type                                                                                                                          | Description                                                              | Default   |
| ---------------------- | ----------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | --------- |
| variant                | `flat` \| `bordered` \| `light` \| `faded`                                                                                    | The pagination variant.                                                  | `flat`    |
| color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                   | The pagination color theme.                                              | `default` |
| size                   | `sm` \| `md` \| `lg`                                                                                                          | The pagination size.                                                     | `md`      |
| radius                 | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                      | The pagination border radius.                                            | `xl`      |
| total                  | `number`                                                                                                                      | The total number of pages.                                               | `1`       |
| dotsJump               | `number`                                                                                                                     | The number of pages that are added or subtracted on the '...' button.    | `5`       |
| initialPage            | `number`                                                                                                                      | The initial page. (uncontrolled)                                         | `1`       |
| page                   | `number`                                                                                                                      | The current page. (controlled)                                           | -         |
| siblings               | `number`                                                                                                                      | The number of pages to show before and after the current page.           | `1`       |
| boundaries             | `number`                                                                                                                      | The number of pages to show at the beginning and end of the pagination.  | `1`       |
| loop                   | `boolean`                                                                                                                     | Whether the pagination should be looped.                                 | `false`   |
| isCompact              | `boolean`                                                                                                                     | Whether the pagination should have a compact style.                      | `false`   |
| isDisabled             | `boolean`                                                                                                                     | Whether the pagination is disabled.                                      | `false`   |
| showShadow             | `boolean`                                                                                                                     | Whether the pagination cursor should have a shadow.                      | `false`   |
| showControls           | `boolean`                                                                                                                     | Whether the pagination should have controls.                             | `false`   |
| disableCursorAnimation | `boolean`                                                                                                                     | Whether the pagination cursor should be hidden.                          | `false`   |
| renderItem             | [PaginationItemProps](#pagination-item-props)                                                                                 | The pagination item render function.                                     | -         |
| getItemAriaLabel       | `(page: string) => string`                                                                                                    | A function that allows you to customize the pagination items aria-label. | -         |
| disableAnimation       | `boolean`                                                                                                                     | Whether the pagination cursor should be animated.                        | `false`   |
| classNames             | `Record<"base"｜ "wrapper" ｜ "prev"｜ "next" ｜ "item" ｜ "cursor" ｜ "forwardIcon" ｜ "ellipsis" ｜ "chevronNext", string>` | Allows to set custom class names for the pagination slots.               | -         |

### Pagination Events

| Attribute | Type                     | Description                                                     |
| --------- | ------------------------ | --------------------------------------------------------------- |
| onChange  | `(page: number) => void` | Handler that is called when the pagination active page changes. |

---

### Types

#### Pagination Item Props

```ts
export type PaginationItemRenderProps = {
  // The pagination item ref.
  ref?: Ref<T>;
  // The pagination item value.
  value: PaginationItemValue;
  // The pagination item index.
  index: number;
  // The active page number.
  activePage: number;
  // Whether the pagination item is active.
  isActive: boolean;
  // Whether the pagination item is the first item in the pagination.
  isFirst: boolean;
  // Whether the pagination item is the last item in the pagination.
  isLast: boolean;
  // Whether the pagination item is the next item in the pagination.
  isNext: boolean;
  // Whether the pagination item is the previous item in the pagination.
  isPrevious: boolean;
  // The pagination item className.
  className: string;
  // Callback to go to the next page.
  onNext: () => void;
  // Callback to go to the previous page.
  onPrevious: () => void;
  // Callback to go to the page.
  setPage: (page: number) => void;
};

type renderItem?: (props: PaginationItemRenderProps) => ReactNode;
```

---
title: "Popover"
description: "Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something."
---

import {popoverContent} from "@/content/components/popover";

# Popover

Popover is a **non-modal** dialog that floats around its disclosure. It's commonly used for displaying
additional rich content on top of something.

<ComponentLinks component="popover" reactAriaHook="usePopover" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add popover",
    npm: "npm install @nextui-org/popover",
    yarn: "yarn add @nextui-org/popover",
    pnpm: "pnpm add @nextui-org/popover",
    bun: "bun add @nextui-org/popover"
  }}
/>

## Import

NextUI exports 3 popover-related components:

- **Popover**: The main component to display a popover.
- **PopoverTrigger**: The component that triggers the popover.
- **PopoverContent**: The component that contains the popover content.

<ImportTabs
  commands={{
    main: 'import {Popover, PopoverTrigger, PopoverContent} from "@nextui-org/react";',
    individual: 'import {Popover, PopoverTrigger, PopoverContent} from "@nextui-org/popover";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={popoverContent.usage} />

### With Arrow

<CodeDemo title="With Arrow" files={popoverContent.arrow} />

### Colors

<CodeDemo title="Colors" files={popoverContent.colors} />

### Placements

<CodeDemo title="Placements" files={popoverContent.placements} />

### Offset

<CodeDemo title="Offset" files={popoverContent.offset} />

### Controlled

<CodeDemo title="Controlled" files={popoverContent.controlled} />

### Title Props

To be sure that the popover exposes the correct title to assistive technologies, you should use the
`titleProps` prop on the `PopoverContent` component. To use this prop, you must pass a function as a child.

<CodeDemo title="Title Props" files={popoverContent.titleProps} />

### With Form

The `Popover` handles the focus within the popover content. It means that you can use the popover with
form elements without any problem. the focus returns to the trigger when the popover closes.

<CodeDemo title="With Form" files={popoverContent.withForm} />

> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the popover opens.

### Backdrop

The `Popover` component has a `backdrop` prop to show a backdrop behind the popover. The backdrop can be
either `transparent`, `opaque` or `blur`. The default value is `transparent`.

<CodeDemo title="Backdrop" files={popoverContent.backdrop} />

### Custom Motion

Popover offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={popoverContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

### Custom Trigger

<CodeDemo title="Custom Trigger" files={popoverContent.customTrigger} />

## Slots

- **base**: The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).
- **trigger**: The popover trigger slot, it has small styles to ensure the trigger works correctly.
- **backdrop**: The backdrop slot, it contains the backdrop styles.
- **content**: The content slot, it contains the popover content.

### Custom Styles

You can customize the `Popover` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={popoverContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Popover` has the following attributes on the `PopoverContent` element:

- **data-open**:
  When the popover is open. Based on popover state.
- **data-placement**:
  The placement of the popover. Based on `placement` prop. The arrow element is positioned based on this attribute.
- **data-focus**:
  When the popover is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the popover is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- The trigger and popover are automatically associated semantically via ARIA.
- Content outside the popover is hidden from assistive technologies while it is open.
- The popover closes when interacting outside, or pressing the <Kbd>Escape</Kbd> key.
- Focus is moved into the popover on mount, and restored to the trigger element on unmount.
- The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.
- Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.

<Spacer y={4} />

## API

### Popover Props

| Attribute                 | Type                                                                        | Description                                                                                                                                                  | Default         |
| ------------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------- |
| children\*                | `ReactNode[]`                                                               | The content of the popover. It's usually the `PopoverTrigger` and `PopoverContent`.                                                                          | -               |
| size                      | `sm` \| `md` \| `lg`                                                        | The popover content font size.                                                                                                                               | `md`            |
| color                     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The popover color theme.                                                                                                                                     | `default`       |
| radius                    | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The popover border radius.                                                                                                                                   | `lg`            |
| shadow                    | `none` \| `sm` \| `md` \| `lg`                                              | The popover shadow.                                                                                                                                          | `lg`            |
| backdrop                  | `transparent` \| `opaque` \| `blur`                                         | The popover backdrop type.                                                                                                                                   | `transparent`   |
| placement                 | [PopoverPlacement](#popover-placement)                                      | The placement of the popover relative to its trigger reference.                                                                                              | `bottom`        |
| state                     | `OverlayTriggerState`                                                       | The controlled state of the popover. See [Overlay States](https://react-spectrum.adobe.com/react-stately/useOverlayTriggerState.html#useoverlaytriggerstate) | -               |
| isOpen                    | `boolean`                                                                   | Whether the popover is open by default (controlled).                                                                                                         | -               |
| defaultOpen               | `boolean`                                                                   | Whether the popover is open by default (uncontrolled).                                                                                                       | -               |
| offset(px)                | `number`                                                                    | The distance or margin between the reference and popper. It is used internally to create an offset modifier.                                                 | `7`             |
| containerPadding(px)      | `number`                                                                    | The placement padding that should be applied between the element and its surrounding container.                                                              | `12`            |
| crossOffset(px)           | `number`                                                                    | The additional offset applied along the cross axis between the element and its anchor element.                                                               | `0`             |
| triggerType               | `dialog` \| `menu` \| `listbox` \| `tree` \| `grid`;                        | Type of popover that is opened by the trigger.                                                                                                               | `dialog`        |
| showArrow                 | `boolean`                                                                   | Whether the popover should have an arrow.                                                                                                                    | `false`         |
| shouldFlip                | `boolean`                                                                   | Whether the popover should change its placement and flip when it's about to overflow its boundary area.                                                      | `true`          |
| triggerScaleOnOpen        | `boolean`                                                                   | Whether the trigger should scale down when the popover is open.                                                                                              | `true`          |
| shouldBlockScroll         | `boolean`                                                                   | Whether to block scrolling outside the popover.                                                                                                              | `false`         |
| isKeyboardDismissDisabled | `boolean`                                                                   | Whether pressing the escape key to close the popover should be disabled.                                                                                     | `false`         |
| shouldCloseOnBlur         | `boolean`                                                                   | Whether the popover should close when focus is lost or moves outside it.                                                                                     | `false`         |
| motionProps               | [MotionProps](#motion-props)                                                | The props to modify the framer motion animation. Use the `variants` API to create your own animation.                                                        |                 |
| portalContainer           | `HTMLElement`                                                               | The container element in which the overlay portal will be placed.                                                                                            | `document.body` |
| updatePositionDeps        | `any[]`                                                                     | The dependencies to force the popover position update.                                                                                                       | `[]`            |
| triggerRef                | `RefObject<HTMLElement>`                                                    | The ref for the element which the popover positions itself with respect to.                                                                                  | -               |
| scrollRef                 | `RefObject<HTMLElement>`                                                    | A ref for the scrollable region within the popover.                                                                                                          | `overlayRef`    |
| disableAnimation          | `boolean`                                                                   | Whether the popover is animated.                                                                                                                             | `false`         |
| classNames                | `Record<"base"｜ "trigger"｜ "backdrop"｜ "content", string>`               | Allows to set custom class names for the popover slots.                                                                                                      | -               |

<Spacer y={1} />

### Popover Events

| Attribute                    | Type                        | Description                                                                                                                                                                                                                                                                                               |
| ---------------------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| onOpenChange                 | `(isOpen: boolean) => void` | Handler that is called when the popover's open state changes.                                                                                                                                                                                                                                             |
| shouldCloseOnInteractOutside | `(e: HTMLElement) => void`  | When user interacts with the argument element outside of the popover ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the popover. By default, onClose will always be called on interaction outside the overlay ref. |
| onClose                      | `() => void`                | Handler that is called when the popover should close.                                                                                                                                                                                                                                                     |

<Spacer y={2} />

### PopoverTrigger Props

| Attribute  | Type        | Description                                                                                                                                                                | Default |
| ---------- | ----------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| children\* | `ReactNode` | The popover trigger component, ensure the children passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility. | -       |

<Spacer y={2} />

### PopoverContent Props

| Attribute | Type        | Description                                                | Default |
| --------- | ----------- | ---------------------------------------------------------- | ------- |
| children  | `ReactNode` | The content that is displayed when the trigger is pressed. | -       |

<Spacer y={2} />

### Popover types

<Spacer y={1} />

#### Popover Placement

```ts
type PopoverPlacement =
  | "top"
  | "bottom"
  | "right"
  | "left"
  | "top-start"
  | "top-end"
  | "bottom-start"
  | "bottom-end"
  | "left-start"
  | "left-end"
  | "right-start"
  | "right-end";
```

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```

---
title: "Progress"
description: "The Progress component allows you to view the progress of any activity."
---

import {progressContent} from "@/content/components/progress";

# Progress

The Progress component allows you to view the progress of any activity.

<ComponentLinks component="progress" reactAriaHook="useProgressBar" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add progress",
    npm: "npm install @nextui-org/progress",
    yarn: "yarn add @nextui-org/progress",
    pnpm: "pnpm add @nextui-org/progress",
    bun: "bun add @nextui-org/progress"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Progress} from "@nextui-org/react";',
    individual: 'import {Progress} from "@nextui-org/progress";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={progressContent.usage} />

> **Note**: Make sure to pass the `aria-label` prop when the `label` prop is not provided. This is required for accessibility.

### Sizes

<CodeDemo title="Sizes" files={progressContent.sizes} />

### Colors

<CodeDemo title="Colors" files={progressContent.colors} />

### Indeterminate

You can use the `isIndeterminate` prop to display an indeterminate progress bar.
This is useful when you don't know how long an operation will take.

<CodeDemo title="Indeterminate" highlightedLines={7} files={progressContent.indeterminate} />

### Striped

<CodeDemo title="Striped" highlightedLines={6} files={progressContent.striped} />

### With Label

<CodeDemo title="With Label" files={progressContent.label} />

> **Note**: If you pass the `label` prop you don't need to pass `aria-label` prop anymore.

### With Value

<CodeDemo title="With Value" files={progressContent.value} />

### Value Formatting

Values are formatted as a percentage by default, but this can be modified by using the
`formatOptions` prop to specify a different format. `formatOptions` is compatible with the
option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.

<CodeDemo title="Value Formatting" files={progressContent.valueFormatting} highlightedLines="10" />

## Slots

- **base**: The base slot of the progress, it is the main container.
- **labelWrapper**: The label and value label wrapper.
- **label**: The label of the progress.
- **value**: The value label of the progress.
- **track**: The track is the background bar of the progress.
- **indicator**: The indicator is the bar that is filled according to the `value`.

### Custom Styles

You can customize the `Progress` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={progressContent.customStyles} highlightedLines="9-13" />

<Spacer y={4} />

## Data Attributes

`CircularProgress` has the following attributes on the `base` element:

- **data-indeterminate**:
  Indicates whether the progress is indeterminate.
- **data-disabled**:
  Indicates whether the progress is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a progress bar via ARIA.
- Labeling support for accessibility.
- Internationalized number formatting as a percentage or value.
- Determinate and indeterminate progress support.
- Exposes the `aria-valuenow`, `aria-valuemin`, `aria-valuemax` and `aria-valuetext` attributes.

<Spacer y={4} />

## API

### Progress Props

| Attribute        | Type                                                                                                                    | Description                                                | Default              |
| ---------------- | ----------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------- | -------------------- |
| label            | `ReactNode`                                                                                                             | The content to display as the label.                       | -                    |
| size             | `sm` \| `md` \| `lg`                                                                                                    | The size of the indicator.                                 | `md`                 |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                             | The color of the indicator.                                | `primary`            |
| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                | The progress border radius.                                | `full`               |
| value            | `number`                                                                                                                | The current value (controlled).                            | -                    |
| valueLabel       | `ReactNode`                                                                                                             | The content to display as the value's label (e.g. 1 of 4). | -                    |
| minValue         | `number`                                                                                                                | The smallest value allowed for the input.                  | `0`                  |
| maxValue         | `number`                                                                                                                | The largest value allowed for the input.                   | `100`                |
| formatOptions    | [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) | The options to format the value.                           | `{style: 'percent'}` |
| isIndeterminate  | `boolean`                                                                                                               | Whether the progress is indeterminate.                     | `false`              |
| isStriped        | `boolean`                                                                                                               | Whether the progress is striped.                           | `false`              |
| showValueLabel   | `boolean`                                                                                                               | Whether to show the value label.                           | `true`               |
| isDisabled       | `boolean`                                                                                                               | Whether the progress is disabled.                          | `false`              |
| disableAnimation | `boolean`                                                                                                               | Whether to disable the animation.                          | `false`              |
| classNames       | `Record<"base"｜"labelWrapper"｜"label"｜"track"｜"value"｜"track"｜"indicator", string>`                               | Allows to set custom class names for the progress slots.   | -                    |

---
title: "Radio"
description: "Radio Group allow users to select a single option from a list of mutually exclusive options"
---

import {radioGroupContent} from "@/content/components/radio-group";

# Radio group

Radio Group allow users to select a single option from a list of mutually exclusive options.

<ComponentLinks component="radiogroup" reactAriaHook="useRadioGroup" npm="radio" styles="radio" source="radio" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add radio",
    npm: "npm install @nextui-org/radio",
    yarn: "yarn add @nextui-org/radio",
    pnpm: "pnpm add @nextui-org/radio",
    bun: "bun add @nextui-org/radio"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {RadioGroup, Radio} from "@nextui-org/react";',
    individual: 'import {RadioGroup, Radio} from "@nextui-org/radio";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={radioGroupContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={radioGroupContent.disabled} />

### Default Value

<CodeDemo title="Default Value" files={radioGroupContent.defaultValue} />

### With Description

<CodeDemo title="With Description" files={radioGroupContent.withDescription} />

### Horizontal

<CodeDemo title="Horizontal" files={radioGroupContent.horizontal} />

### Controlled

You can use the `value` and `onValueChange` properties to control the radio input value.

<CodeDemo title="Controlled" files={radioGroupContent.controlled} />

> **Note**: NextUI `Radio` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

### Invalid

<CodeDemo title="Invalid" files={radioGroupContent.invalid} />

## Slots

- RadioGroup Slots

  - **base**: Radio group root wrapper, it wraps the label and the wrapper.
  - **wrapper**: Radio group wrapper, it wraps all Radios.
  - **label**: Radio group label, it is placed before the wrapper.
  - **description**: Description slot for the radio group.
  - **errorMessage**: Error message slot for the radio group.

- Radio Slots
  - **base**: Radio root wrapper, it wraps all elements.
  - **wrapper**: Radio wrapper, it wraps the control element.
  - **labelWrapper**: Label and description wrapper.
  - **label**: Label slot for the radio.
  - **control**: Control element, it is the circle element.
  - **description**: Description slot for the radio.

### Custom Styles

You can customize the `RadioGroup` and `Radio` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={radioGroupContent.customStyles} />

### Custom Implementation

In case you need to customize the radio group even further, you can use the `useRadio` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={radioGroupContent.customImpl} />

<Spacer y={4} />

## Data Attributes

- RadioGroup has the following attributes on the `base` element:

  - **data-orientation**:
    The orientation of the radio group. Based on `orientation` prop.

- Radio has the following attributes on the `base` element:

  - **data-selected**:
    When the radio is checked. Based on `isSelected` prop.
  - **data-pressed**:
    When the radio is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).
  - **data-invalid**:
    When the radio is invalid. Based on `validationState` prop.
  - **data-readonly**:
    When the radio is readonly. Based on `isReadOnly` prop.
  - **data-hover-unselected**:
    When the radio is being hovered and unchecked. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
  - **data-hover**:
    When the radio is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
  - **data-focus**:
    When the radio is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
  - **data-focus-visible**:
    When the radio is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
  - **data-disabled**:
    When the radio is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Radio groups are exposed to assistive technology via ARIA.
- Each radio is built with a native HTML `<input>` element, which can be optionally visually hidden to allow custom styling.
- Full support for browser features like form autofill.
- Keyboard event support for arrows keys.
- Keyboard focus management and cross browser normalization.
- Group and radio labeling support for assistive technology.

<Spacer y={4} />

## API

### RadioGroup Props

| Attribute          | Type                                                                        | Description                                                                                                                                                                                                             | Default    |
| ------------------ | --------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
| children           | `ReactNode` \| `ReactNode[]`                                                | The list of radio elements.                                                                                                                                                                                             | -          |
| label              | `ReactNode`                                                                 | The label of the radio group.                                                                                                                                                                                           | -          |
| size               | `sm` \| `md` \| `lg`                                                        | The size of the radios.                                                                                                                                                                                                 | `md`       |
| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the radios.                                                                                                                                                                                                | `primary`  |
| orientation        | `horizontal` \| `vertical`                                                  | The orientation of the radio group.                                                                                                                                                                                     | `vertical` |
| name               | `string`                                                                    | The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).                                                       | -          |
| value              | `string[]`                                                                  | The current selected value. (controlled).                                                                                                                                                                               | -          |
| defaultValue       | `string[]`                                                                  | The default selected value. (uncontrolled).                                                                                                                                                                             | -          |
| description        | `ReactNode`                                                                 | Radio group description .                                                                                                                                                                                               | -          |
| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | Radio group error message.                                                                                                                                                                                              | -          |
| validate           | `(value: string) => ValidationError ｜ true ｜ null ｜ undefined`            | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -          |
| validationBehavior | `native` \| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |
| isDisabled         | `boolean`                                                                   | Whether the radio group is disabled.                                                                                                                                                                                    | `false`    |
| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                                                                               | `false`    |
| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                                                                                     | -          |
| isInvalid          | `boolean`                                                                   | Whether the radio group is invalid.                                                                                                                                                                                     | `false`    |
| validationState    | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                                                                                  | `false`    |
| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                                                                               | `false`    |
| classNames         | `Record<"base"｜ "wrapper"｜ "label", string>`                              | Allows to set custom class names for the radio group slots.                                                                                                                                                             | -          |

### RadioGroup Events

| Attribute     | Type                                  | Description                                                                                                                         |
| ------------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |
| onValueChange | `((value: string) => void)`           | Handler that is called when the value changes.                                                                                      |

### Radio Props

| Attribute        | Type                                                                                           | Description                                                                                    | Default   |
| ---------------- | ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | --------- |
| children         | `ReactNode`                                                                                    | The label of the radio.                                                                        | -         |
| label            | `ReactNode`                                                                                    | The label of the radio.                                                                        | -         |
| size             | `sm` \| `md` \| `lg`                                                                           | The size of the radio.                                                                         | `md`      |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                    | The color of the radio.                                                                        | `primary` |
| description      | `ReactNode`                                                                                    | A description for the field. Provides a hint such as specific requirements for what to choose. | -         |
| isDisabled       | `boolean`                                                                                      | Whether the radio is disabled.                                                                 | `false`   |
| isRequired       | `boolean`                                                                                      | Whether user checkboxes are required on the input before form submission.                      | `false`   |
| isReadOnly       | `boolean`                                                                                      | Whether the checkboxes can be selected but not changed by the user.                            | -         |
| isInvalid        | `boolean`                                                                                      | Whether the radio is invalid. This is based on the radio group `validationState` prop.        | `false`   |
| disableAnimation | `boolean`                                                                                      | Whether the animation should be disabled.                                                      | `false`   |
| classNames       | `Record<"base"｜ "wrapper"｜ "labelWrapper" ｜ "label" ｜ "control" ｜ "description", string>` | Allows to set custom class names for the radio slots.                                          | -         |

---
title: "Range Calendar"
description: "The Range Calendar component is used to display one or more date grids and allows users to select a contiguous range of dates."
---

import {rangeCalendarContent} from "@/content/components/range-calendar";

# Range Calendar

A range calendar consists of a grouping element containing one or more date grids (e.g. months), and a previous and next button for navigating through time. Each calendar grid consists of cells containing button elements that can be pressed and navigated to using the arrow keys to select a date range. Once a start date is selected, the user can navigate to another date using the keyboard or by hovering over it, and clicking it or pressing the Enter key commits the selected date range.

<ComponentLinks component="calendar" storybook="rangecalendar" reactAriaHook="useCalendar" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add calendar",
    npm: "npm install @nextui-org/calendar",
    yarn: "yarn add @nextui-org/calendar",
    pnpm: "pnpm add @nextui-org/calendar",
    bun: "bun add @nextui-org/calendar",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {RangeCalendar} from "@nextui-org/react";',
    individual: 'import {RangeCalendar} from "@nextui-org/calendar";',
  }}
/>

## Usage

A RangeCalendar has no selection by default. An initial, uncontrolled value can be provided to the RangeCalendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the `value` prop.

Date values are provided using objects in the [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) package. This library handles correct international date manipulation across calendars, time zones, and other localization concerns.

<CodeDemo title="Usage" files={rangeCalendarContent.usage} />

### Disabled

The `isDisabled` boolean prop makes the Calendar disabled. Cells cannot be focused or selected.

<CodeDemo title="Disabled" files={rangeCalendarContent.disabled} />

### Read Only

The `isReadOnly` boolean prop makes the Calendar's value immutable. Unlike `isDisabled`, the Calendar remains focusable.

<CodeDemo title="Read Only" files={rangeCalendarContent.readonly} />

### Controlled

A Calendar has no selection by default. An initial, uncontrolled value can be provided to the Calendar using the `defaultValue` prop. Alternatively, a controlled value can be provided using the value prop.

<CodeDemo title="Controlled" files={rangeCalendarContent.controlled} />

### Min Date Value

By default, Calendar allows selecting any date. The `minValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates after today.

<CodeDemo title="Min Date Value" files={rangeCalendarContent.minDateValue} />

### Max Date Value

By default, Calendar allows selecting any date. The `maxValue` can also be used to prevent the user from selecting dates outside a certain range.

This example only accepts dates before today.

<CodeDemo title="Max Date Value" files={rangeCalendarContent.maxDateValue} />

### Unavailable Dates

Calendar supports marking certain dates as unavailable. These dates remain focusable with the keyboard so that navigation is consistent, but cannot be selected by the user. In this example, they are displayed in red. The `isDateUnavailable` prop accepts a callback that is called to evaluate whether each visible date is unavailable.

<CodeDemo title="Unavailable Dates" files={rangeCalendarContent.unavailableDates} />

### Non-Contiguous Ranges

The `allowsNonContiguousRanges` prop enables a range to be selected even if there are unavailable dates in the middle. The value emitted in the onChange event will still be a single range with a start and end property, but unavailable dates will not be displayed as selected. It is up to applications to split the full selected range into multiple as needed for business logic.

This example prevents selecting weekends, but allows selecting ranges that span multiple weeks.

<CodeDemo title="Unavailable Dates" files={rangeCalendarContent.nonContiguousRanges} />

### Controlled Focused Value

Calendar tries to avoid allowing the user to select invalid dates in the first place. However, if according to application logic a selected date is invalid, the isInvalid prop can be set. This alerts assistive technology users that the selection is invalid, and can be used for styling purposes as well. In addition, the errorMessage slot may be used to help the user fix the issue.

By default, the selected date is focused when a Calendar first mounts. If no `value` or `defaultValue` prop is provided, then the current date is focused. However, Calendar supports controlling which date is focused using the `focusedValue` and `onFocusChange` props. This also determines which month is visible. The `defaultFocusedValue` prop allows setting the initial focused date when the Calendar first mounts, without controlling it.

<CodeDemo title="Controlled Focused Value" files={rangeCalendarContent.controlledFocusedValue} />

### Invalid Date

This example validates that the selected date is a weekday and not a weekend according to the current locale.

<CodeDemo title="Invalid Date" files={rangeCalendarContent.invalidDate} />

### International Calendars

Calendar supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. Dates are automatically displayed in the appropriate calendar system for the user's locale. The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), passed to the `Provider` component.

<CodeDemo title="International Calendars" files={rangeCalendarContent.internationalCalendars} />

### Visible Months

By default, the Calendar displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time.

<CodeDemo title="Visible Months" files={rangeCalendarContent.visibleMonths} />

### Page Behaviour

By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.

<CodeDemo title="Page Behaviour" files={rangeCalendarContent.pageBehaviour} />

### Presets

Here's the example to customize `topContent` and `bottomContent` to have some preset values.

<CodeDemo title="Presets" files={rangeCalendarContent.presets} />

## Slots

- **base**: Calendar wrapper, it handles alignment, placement, and general appearance.
- **prevButton**: The previous button of the calendar.
- **nextButton**: The next button of the calendar.
- **headerWrapper**: Wraps the picker (month / year).
- **header**: The header element.
- **title**: A description of the visible date range, for use in the calendar title.
- **gridWrapper**: The wrapper for the calendar grid.
- **grid**: The date grid element (e.g. `<table>`).
- **gridHeader**: The date grid header element (e.g. `<th>`).
- **gridHeaderRow**: The date grid header row element (e.g. `<tr>`).
- **gridHeaderCell**: The date grid header cell element (e.g. `<td>`).
- **gridBody**: The date grid body element (e.g. `<tbody>`).
- **gridBodyRow**: The date grid body row element (e.g. `<tr>`).
- **cell**: The date grid cell element (e.g. `<td>`).
- **cellButton**: The button element within the cell.
- **pickerWrapper**: The wrapper for the picker
- **pickerMonthList**: The month list picker.
- **pickerYearList**: The year list picker.
- **pickerHighlight**: The highlighted item of the picker.
- **pickerItem**: The item of the picker.
- **helperWrapper**: The helper message of the calendar.
- **errorMessage**: The error message of the calendar.

<Spacer y={4} />

## Data Attributes

`Calendar` has the following attributes on the `CalendarCell` element:

- **data-focused**:
  Whether the cell is focused.
- **data-hovered**:
  Whether the cell is currently hovered with a mouse.
- **data-pressed**:
  Whether the cell is currently being pressed.
- **data-unavailable**:
  Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they are unavailable, such as a different color or a strikethrough.
- **data-disabled**:
  Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.
- **data-focus-visible**:
  Whether the cell is keyboard focused.
- **data-outside-visible-range**:
  Whether the cell is outside the visible range of the calendar.
- **data-outside-month**:
  Whether the cell is outside the current month.
- **data-selected**:
  Whether the cell is selected.
- **data-selected-start**:
  Whether the cell is the first date in a range selection.
- **data-selected-end**:
  Whether the cell is the last date in a range selection.
- **data-invalid**:
  Whether the cell is part of an invalid selection.

<Spacer y={4} />

## Accessibility

- Display one or more months at once, or a custom time range for use cases like a week view. Minimum and maximum values, unavailable dates, and non-contiguous selections are supported as well.
- Support for 13 calendar systems used around the world, including Gregorian, Buddhist, Islamic, Persian, and more. Locale-specific formatting, number systems, and right-to-left support are available as well.
- Calendar cells can be navigated and selected using the keyboard, and localized screen reader messages are included to announce when the selection and visible date range change.

<Spacer y={4} />

## API

### RangeCalendar Props

| Attribute                 | Type                                                                                                                                                                                                                                                                                                                                                                                          | Description                                                                                                                                                                               | Default                           |   |
|---------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------|---|
| value                     | `RangeValue                                                                                                                                                                                                                                                                                                                                                                                   | null`                                                                                                                                                                                     | The current value (controlled).   | - |
| defaultValue              | `RangeValue                                                                                                                                                                                                                                                                                                                                                                                   | null`                                                                                                                                                                                     | The default value (uncontrolled). | - |
| minValue                  | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The minimum allowed date that a user may select.                                                                                                                                          | -                                 |   |
| maxValue                  | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The maximum allowed date that a user may select.                                                                                                                                          | -                                 |   |
| color                     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                                                                                                                                                                                                                                   | The color of the time input.                                                                                                                                                              | `default`                         |   |
| visibleMonths             | `number`                                                                                                                                                                                                                                                                                                                                                                                      | The number of months to display at once. Up to 3 months are supported.                                                                                                                    | `1`                               |   |
| focusedValue              | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | Controls the currently focused date within the calendar.                                                                                                                                  | -                                 |   |
| defaultFocusedValue       | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The date that is focused when the calendar first mounts (uncountrolled).                                                                                                                  | -                                 |   |
| calendarWidth             | `number` \| `string`                                                                                                                                                                                                                                                                                                                                                                          | The width to be applied to the calendar component. This value is multiplied by the `visibleMonths` number to determine the total width of the calendar.                                   | `256`                             |   |
| pageBehavior              | `PageBehavior`                                                                                                                                                                                                                                                                                                                                                                                | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                                       | `visible`                         |   |
| weekdayStyle              | `"narrow" \|"short" \| "long" \| undefined`                                                                                                                                                                                                                                                                                                                                                   | The style of weekday names to display in the calendar grid header, e.g. single letter, abbreviation, or full day name.                                                                    | `narrow`                          |   |
| allowsNonContiguousRanges | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | When combined with `isDateUnavailable`, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.                                              | `false`                           |   |
| isDisabled                | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar is disabled.                                                                                                                                                         | `false`                           |   |
| isReadOnly                | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar value is immutable.                                                                                                                                                  | `false`                           |   |
| isInvalid                 | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the current selection is invalid according to application logic.                                                                                                                  | -                                 |   |
| autoFocus                 | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to automatically focus the calendar when it mounts.                                                                                                                               | `false`                           |   |
| showHelper                | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to show the description or error message.                                                                                                                                         | `false`                           |   |
| showShadow                | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to show the shadow in the selected dates.                                                                                                                                         | `false`                           |   |
| topContent                | `ReactNode`                                                                                                                                                                                                                                                                                                                                                                                   | Custom content to be included in the top of the calendar.                                                                                                                                 | -                                 |   |
| bottomContent             | `ReactNode`                                                                                                                                                                                                                                                                                                                                                                                   | Custom content to be included in the bottom of the calendar.                                                                                                                              | -                                 |   |
| isDateUnavailable         | `(date: DateValue) => boolean`                                                                                                                                                                                                                                                                                                                                                                | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                                                  | -                                 |   |
| createCalendar            | `(calendar: SupportedCalendars) => Calendar \| null`                                                                                                                                                                                                                                                                                                                                          | This function helps to reduce the bundle size by providing a custom calendar system. You can also use the NextUIProvider to provide the createCalendar function to all nested components. | `all<br> calendars`               |   |
| errorMessage              | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                                                                                                                                                                                                                                                             | An error message for the field.                                                                                                                                                           | -                                 |   |
| validate                  | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ｜ true ｜ null ｜ undefined`                                                                                                                                                                                                                                                                                     | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -                                 |   |
| hideDisabledDates         | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to hide the disabled or invalid dates.                                                                                                                                            | `false`                           |   |
| disableAnimation          | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to disable the animation of the calendar.                                                                                                                                         | `false`                           |   |
| classNames                | `Record<"base"｜ "prevButton"｜ "nextButton"｜ "headerWrapper" \| "header" \| "title" \| "content" \| "gridWrapper" \| "grid" \| "gridHeader" \| "gridHeaderRow" \| "gridHeaderCell" \| "gridBody" \| "gridBodyRow" \| "cell" \| "cellButton" \| "pickerWrapper" \| "pickerMonthList" \| "pickerYearList" \| "pickerHighlight" \| "pickerItem" \| "helperWrapper" \| "errorMessage", string>` | Allows to set custom class names for the calendar slots.                                                                                                                                  | -                                 |   |

### RangeCalendar Events

| Attribute              | Type                            | Description                                                                                                                              |
| ---------------------- | ------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| onFocusChange          | `(date: CalendarDate) => void`  | Handler that is called when the focused date changes.                                                                                    |
| onChange               | `(value: RangeValue>) => void`  | Handler that is called when the value changes.                                                                                           |

#### Supported Calendars

```ts
/**
 * Supported react-aria i18n calendars.
 */
export type SupportedCalendars =
  | "buddhist"
  | "ethiopic"
  | "ethioaa"
  | "coptic"
  | "hebrew"
  | "indian"
  | "islamic-civil"
  | "islamic-tbla"
  | "islamic-umalqura"
  | "japanese"
  | "persian"
  | "roc"
  | "gregory";
```

---
title: "Scroll Shadow"
description: "Applies top and bottom shadows when content overflows on scroll."
---

import {scrollShadowContent} from "@/content/components/scroll-shadow";

# Scroll Shadow

Applies top and bottom shadows when content overflows on scroll.

<ComponentLinks component="scroll-shadow" storybook="scrollshadow" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add scroll-shadow",
    npm: "npm install @nextui-org/scroll-shadow",
    yarn: "yarn add @nextui-org/scroll-shadow",
    pnpm: "pnpm add @nextui-org/scroll-shadow",
    bun: "bun add @nextui-org/scroll-shadow"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {ScrollShadow} from "@nextui-org/react";',
    individual: 'import {ScrollShadow} from "@nextui-org/scroll-shadow";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={scrollShadowContent.usage} />

### Hide Scrollbar

You can use the `hideScrollBar` property to hide vertical and horizontal scrollbars.

<CodeDemo title="Hide Scrollbar" files={scrollShadowContent.hideScrollbar} />

### Custom Shadow Size

By default, the shadow size is `40` in pixels, but you can change it using the `size` property.

<CodeDemo title="Custom Shadow Size" files={scrollShadowContent.customSize} />

### Horizontal Orientation

In case you need to apply the shadow on the horizontal scroll, you can set the `orientation` property to `horizontal`.

<CodeDemo title="Horizontal Orientation" files={scrollShadowContent.horizontal} />

### Shadow Offset

By default the shadow offset is `0` in pixels, but you can change it using the `offset` property. This allows you to apply the shadow on
a specific position.

<CodeDemo title="Shadow Offset" files={scrollShadowContent.offset} />

<Spacer y={4} />

## API

### ShadowScroll Props

| Attribute     | Type                                                | Description                                     | Default    |
| ------------- | --------------------------------------------------- | ----------------------------------------------- | ---------- |
| size          | `number`                                            | The shadow size in pixels.                      | `40`       |
| offset        | `number`                                            | The scroll offset to show the shadow in pixels. | `0`        |
| hideScrollBar | `boolean`                                           | Whether to hide the scrollbar or not.           | `false`    |
| orientation   | `horizontal` \| `vertical`                          | The scroll orientation.                         | `vertical` |
| isEnabled     | `boolean`                                           | Whether the shadow is enabled or not.           | `true`     |
| visibility    | [ScrollShadowVisibility](#scroll-shadow-visibility) | The shadow visibility. (controlled)             | `auto`     |

### ShadowScroll Events

| Attribute          | Type                                           | Description                                          |
| ------------------ | ---------------------------------------------- | ---------------------------------------------------- |
| onVisibilityChange | `(visibility: ScrollShadowVisibility) => void` | Callback invoked when the shadow visibility changes. |

<Spacer y={2} />

### Types

#### Scroll Shadow Visibility

```ts
type ScrollShadowVisibility = "auto" | "top" | "bottom" | "left" | "right" | "both" | "none";
```

---
title: "Select"
description: "A select displays a collapsible list of options and allows a user to select one or more of them."
---

import {selectContent} from "@/content/components/select";

# Select

A select displays a collapsible list of options and allows a user to select one or more of them.

<ComponentLinks component="select" reactAriaHook="useSelect" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add select",
    npm: "npm install @nextui-org/select",
    yarn: "yarn add @nextui-org/select",
    pnpm: "pnpm add @nextui-org/select",
    bun: "bun add @nextui-org/select"
  }}
/>

## Import

NextUI exports 3 select-related components:

- **Select**: The main component, which is a wrapper for the other components.
- **SelectSection**: The component that contains a group of select items.
- **SelectItem**: The component that represents a select item.

<ImportTabs
  commands={{
    main: 'import {Select, SelectSection, SelectItem} from "@nextui-org/react";',
    individual: 'import {Select, SelectSection, SelectItem} from "@nextui-org/select";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={selectContent.usage} />

### Dynamic items

Select follows the [Collection Components API](https://react-spectrum.adobe.com/react-stately/collections.html), accepting both static and dynamic collections.

- **Static**: The usage example above shows the static implementation, which can be used when the full list of options is known ahead of time.
- **Dynamic**: The example below can be used when the options come from an external data source such as an API call, or update over time.

<CodeDemo title="Dynamic items" highlightedLines="8" files={selectContent.dynamic} />

### Multiple Selection

You can use the `selectionMode="multiple"` property to allow multiple selection.

<CodeDemo title="Multiple Selection" files={selectContent.multiple} />

### Disabled

<CodeDemo title="Disabled" highlightedLines="8" files={selectContent.disabled} />

### Disabled Items

You can disable specific items by using the `disabledKeys` property.

<CodeDemo title="Disabled Items" highlightedLines="10" files={selectContent.disabledItems} />

### Required

If you pass the `isRequired` property to the select, it will have a `danger` asterisk at
the end of the label and the select will be required.

<CodeDemo title="Required" highlightedLines="8" files={selectContent.required} />

### Sizes

<CodeDemo title="Sizes" highlightedLines="13,24" files={selectContent.sizes} />

### Colors

<CodeDemo title="Colors" files={selectContent.colors} />

### Variants

<CodeDemo title="Variants" files={selectContent.variants} />

### Radius

<CodeDemo title="Radius" files={selectContent.radius} />

### Label Placements

You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.

<CodeDemo title="Label Placements" highlightedLines="19,37" files={selectContent.labelPlacements} />

> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.

### Start Content

You can use the `startContent` and `endContent` properties to add content to the start and end of
the select.

<CodeDemo title="Start Content" highlightedLines="13" files={selectContent.startContent} />

### Item Start & End Content

Since the `Select` component uses the [Listbox](/docs/components/listbox) component under the hood, you can
use the `startContent` and `endContent` properties of the `SelectItem` component to add content to the start
and end of the select item.

<CodeDemo title="Item Start Content" files={selectContent.itemStartContent} />

### Custom Selector Icon

By default the select uses a `chevron-down` icon as the selector icon which rotates when the select is open. You can
customize this icon by passing a custom one to the `selectorIcon` property.

<CodeDemo title="Custom Selector Icon" files={selectContent.customSelectorIcon} />

> **Note**: Use the `disableSelectorIconRotation` property to disable the rotation of the icon.

### Without Scroll Shadow

Select component uses the [ScrollShadow](/docs/components/scroll-shadow) under the hood to show a shadow when the select content is scrollable.
You can disable this shadow by passing using the `scrollShadowProps` property.

<CodeDemo title="Without Scroll Shadow" files={selectContent.withoutScrollShadow} />

> **Note**: You can also use the `showScrollIndicators` property to disable the scroll indicators.

### With Description

You can add a description to the select by passing the `description` property.

<CodeDemo title="With Description" files={selectContent.description} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid select.

<CodeDemo title="With Error Message" files={selectContent.errorMessage} />

### Controlled

You can use the `selectedKeys` and `onSelectionChange` / `onChange` properties to control the select value.

Using `onSelectionChange`:

<CodeDemo title="Controlled with onSelectionChange" files={selectContent.singleControlled} />

Using `onChange`:

<CodeDemo title="Controlled with onChange" files={selectContent.singleControlledOnChange} />

### Controlling the open state

You can control the open state of the select by using the `isOpen` and `onOpenChange` / `onClose` properties.

<CodeDemo title="Controlling the open state" files={selectContent.openState} />

### Custom Items

You can customize the select items by modifying the `SelectItem` children.

<CodeDemo title="Custom Items" files={selectContent.customItems} />

### Custom Render Value

By default the select will render the selected item's text value, but you can customize this by passing a `renderValue` function.

<CodeDemo title="Custom Render Value" files={selectContent.customRenderValue} />

The `renderValue` function receives the selected items as a parameter and must return a
`ReactNode`. Check the [Render Value Function](#render-value-function) section for more details.

### Asynchronous Loading

Select supports asynchronous loading, in the example below we are using a custom hook to fetch the [Pokemon API](https://pokeapi.co/api/v2/pokemon) data in combination with the `useInfiniteScroll` hook to load more data when the user reaches the end of the list.

The `isLoading` prop is used to show a loading indicator instead of the selector icon when the data is being fetched.

<PackageManagers
  commands={{
    npm: "npm install @nextui-org/use-infinite-scroll",
    yarn: "yarn add @nextui-org/use-infinite-scroll",
    pnpm: "pnpm add @nextui-org/use-infinite-scroll",
  }}
/>

```jsx
import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
```

<Spacer y={2} />

<CodeDemo
  asIframe
  typescriptStrict={true}
  title="Asynchronous Loading"
  hideWindowActions={true}
  resizeEnabled={false}
  displayMode="always"
  files={selectContent.asyncLoadingItems}
  previewHeight="400px"
  iframeSrc="/examples/select/async-items-loading"
/>

### With Sections

You can use the `SelectSection` component to group select items.

<CodeDemo title="With Sections" files={selectContent.sections} />

### Custom Sections Style

You can customize the sections style by using the `classNames` property of the `SelectSection` component.

<CodeDemo title="Custom Sections Style" files={selectContent.customSectionsStyle} />

### Multiple Select Controlled

You can use the same properties as the single select to control the multiple select, `selectedKeys` and `onSelectionChange` / `onChange`.

Using `onSelectionChange`:

<CodeDemo
  title="Multiple Selection Controlled with onSelectionChange"
  files={selectContent.multipleControlled}
/>

Using `onChange`:

<CodeDemo
  title="Multiple Selection Controlled with onChange"
  files={selectContent.multipleControlledOnChange}
/>

### Multiple With Chips

You can render any component as the select value by using the `renderValue` property. In this example we are
using the [Chip](/docs/components/chip) component to render the selected items.

<CodeDemo title="Multiple Selection with Chips" files={selectContent.multipleWithChips} />

> **Note**: Make sure to pass the `isMultiline` property to the `Select` component to allow the chips to wrap.

The `renderValue` function receives the selected items as a parameter and must return a
`ReactNode`. Check the [Render Value Function](#render-value-function) section for more details.

### Customizing the select

You can customize any slot of the select by using the `classNames` property. Select
component also provides the [popoverProps](/docs/components/popover#api) and [listboxProps](/docs/components/listbox#api) properties to customize
the popover and listbox components.

<CodeDemo title="Custom Styles" files={selectContent.customStyles} />

## Slots

- **base**: The main wrapper of the select. This wraps the rest of the slots.
- **label**: The label of the select.
- **mainWrapper**: Wraps the `helperWrapper` and the `trigger` slots.
- **trigger**: The trigger of the select. This wraps the label the inner wrapper and the selector icon.
- **innerWrapper**: The wrapper of the select content. This wraps the start/end content and the select value.
- **selectorIcon**: The selector icon of the select. This is the icon that rotates when the select is open (`data-open`).
- **value**: The select value. This is also the slot that wraps the `renderValue` function result.
- **listboxWrapper**: The wrapper of the listbox. This wraps the listbox component, this slot is used on top of the scroll shadow component.
- **listbox**: The listbox component. This is the component that wraps the select items.
- **popoverContent**: The popover content slot. Use this to modify the popover content styles.
- **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.
- **description**: The description of the select.
- **errorMessage**: The error message of the select.

## Data Attributes

`Select` has the following attributes on the `base` element:

- **data-filled**:
  Indicates if the select has a value, is focused, has start/end content or is open.
- **data-has-value**:
  Indicates if the select has selected item(s).
- **data-has-label**:
  Indicates if the select has a label. Based on `label` prop.
- **data-has-helper**:
  Indicates if the select has helper text. Based on `errorMessage` or `description` prop.
- **data-invalid**:
  Indicates if the select is invalid. Based on `isInvalid` prop.

`Select` has the following attributes on the `trigger` element:

- **data-open**:
  Indicates if the select is open.
- **data-disabled**:
  When the select trigger is disabled. Based on select `isDisabled` prop.
- **data-focus**:
  When the select trigger is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the select trigger is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-pressed**:
  When the select trigger is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-hover**:
  When the select trigger is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)

`Select` has the following attributes on the `selectorIcon` element:

- **data-open**:
  Indicates if the select is open.

`SelectItem` has the following attributes on the `base` element:

- **data-disabled**:
  When the select item is disabled. Based on select `disabledKeys` prop.
- **data-selected**:
  When the select item is selected. Based on select `selectedKeys` prop.
- **data-hover**:
  When the select item is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the select item is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-focus**:
  When the select item is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the select item is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a button with a listbox popup using ARIA (combined with [Listbox](/docs/components/listbox)).
- Support for selecting a single option.
- Support for selecting multiple options.
- Support for disabled options.
- Support for sections.
- Labeling support for accessibility.
- Support for description and error message help text linked to the input via ARIA.
- Support for mouse, touch, and keyboard interactions.
- Tab stop focus management.
- Keyboard support for opening the listbox using the arrow keys, including automatically focusing the first or last item accordingly.
- Typeahead to allow selecting options by typing text, even without opening the listbox.
- Browser autofill integration via a hidden native `<select>` element.
- Support for mobile form navigation via software keyboard.
- Mobile screen reader listbox dismissal support.

<Spacer y={4} />

## API

### Select Props

| Attribute                   | Type                                                                                                                                                                                                                   | Description                                                                                                            | Default            |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------------------ |
| children\*                  | `ReactNode[]`                                                                                                                                                                                                          | The children to render. Usually a list of `SelectItem` and `SelectSection` elements.                                   | -                  |
| items                       | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                                                                                                 | Item objects in the select. (dynamic)                                                                                  | -                  |
| selectionMode               | `single` \| `multiple`                                                                                                                                                                                                 | The type of selection that is allowed in the collection.                                                               | -                  |
| selectedKeys                | `all` \| `Iterable<React.Key>`                                                                                                                                                                                                | The currently selected keys in the collection (controlled).                                                            | -                  |
| disabledKeys                | `Iterable<React.Key>`                                                                                                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                | -                  |
| defaultSelectedKeys         | `all` \| `Iterable<React.Key>`                                                                                                                                                                                                 | The initial selected keys in the collection (uncontrolled).                                                            | -                  |
| variant                     | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                                                                        | The variant of the select.                                                                                             | `flat`             |
| color                       | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                                                            | The color of the select.                                                                                               | `default`          |
| size                        | `sm` \| `md` \| `lg`                                                                                                                                                                                                   | The size of the select.                                                                                                | `md`               |
| radius                      | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                                                                               | The radius of the select.                                                                                              | -                  |
| placeholder                 | `string`                                                                                                                                                                                                               | The placeholder of the select.                                                                                         | `Select an option` |
| labelPlacement              | `inside` \| `outside` \| `outside-left`                                                                                                                                                                                | The position of the label.                                                                                             | `inside`           |
| label                       | `ReactNode`                                                                                                                                                                                                            | The content to display as the label.                                                                                   | -                  |
| description                 | `ReactNode`                                                                                                                                                                                                            | A description for the select. Provides a hint such as specific requirements for what to choose.                        | -                  |
| errorMessage                | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                                                                                                  | An error message for the select.                                                                                       | -                  |
| startContent                | `ReactNode`                                                                                                                                                                                                            | Element to be rendered in the left side of the select.                                                                 | -                  |
| endContent                  | `ReactNode`                                                                                                                                                                                                            | Element to be rendered in the right side of the select.                                                                | -                  |
| selectorIcon                | `ReactNode`                                                                                                                                                                                                            | Element to be rendered as the selector icon.                                                                           | -                  |
| scrollRef                   | `React.RefObject<HTMLElement>`                                                                                                                                                                                         | A ref to the scrollable element.                                                                                       | -                  |
| spinnerRef                  | `React.RefObject<HTMLElement>`                                                                                                                                                                                         | A ref to the spinner element.                                                                                          | -                  |
| fullWidth                   | `boolean`                                                                                                                                                                                                              | Whether the select should take up the width of its parent.                                                             | `true`             |
| isOpen                      | `boolean`                                                                                                                                                                                                              | Whether the select is open by default (controlled).                                                                    | -                  |
| defaultOpen                 | `boolean`                                                                                                                                                                                                              | Whether the select is open by default (uncontrolled).                                                                  | -                  |
| isRequired                  | `boolean`                                                                                                                                                                                                              | Whether user select is required on the select before form submission.                                                  | `false`            |
| isDisabled                  | `boolean`                                                                                                                                                                                                              | Whether the select is disabled.                                                                                        | `false`            |
| isMultiline                 | `boolean`                                                                                                                                                                                                              | Whether the select should allow multiple lines of text.                                                                | `false`            |
| isInvalid                   | `boolean`                                                                                                                                                                                                              | Whether the select is invalid.                                                                                         | `false`            |
| validationState             | `valid` \| `invalid`                                                                                                                                                                                                   | Whether the select should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead. | -                  |
| showScrollIndicators        | `boolean`                                                                                                                                                                                                              | Whether the select should show scroll indicators when the listbox is scrollable.                                       | `true`             |
| autoFocus                   | `boolean`                                                                                                                                                                                                              | Whether the select should be focused on the first mount.                                                               | `false`            |
| disallowEmptySelection      | `boolean`                                                                                                                                                                                                              | Whether the collection allows empty selection.                                                                         | `false`            |
| disableAnimation            | `boolean`                                                                                                                                                                                                              | Whether the select should be animated.                                                                                 | `true`             |
| disableSelectorIconRotation | `boolean`                                                                                                                                                                                                              | Whether the select should disable the rotation of the selector icon.                                                   | `false`            |
| popoverProps                | [PopoverProps](/docs/components/popover#api)                                                                                                                                                                           | Props to be passed to the popover component.                                                                           | -                  |
| listboxProps                | [ListboxProps](/docs/components/listbox#api)                                                                                                                                                                           | Props to be passed to the listbox component.                                                                           | -                  |
| scrollShadowProps           | [ScrollShadowProps](/docs/components/scroll-shadow#api)                                                                                                                                                                | Props to be passed to the scroll shadow component.                                                                     | -                  |
| classNames                  | `Record<"base"｜ "label"｜ "trigger"｜ "mainWrapper" ｜ "innerWrapper"｜ "selectorIcon" ｜ "value" ｜ "listboxWrapper"｜ "listbox" ｜ "popoverContent" ｜ "helperWrapper" ｜ "description" ｜ "errorMessage", string>` | Allows to set custom class names for the Select slots.                                                                 | -                  |

### Select Events

| Attribute         | Type                                          | Description                                                                          |
| ----------------- | --------------------------------------------- | ------------------------------------------------------------------------------------ |
| onClose           | `() => void`                                  | Callback fired when the select popover is closed.                                    |
| onOpenChange      | `(isOpen: boolean) => void`                   | Callback fired when the select popover is opened or closed.                          |
| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void`                 | Callback fired when the selected keys change.                                        |
| onChange          | `React.ChangeEvent<HTMLSelectElement>`        | Native select change event, fired when the selected value changes.                   |
| renderValue       | [RenderValueFunction](#render-value-function) | Function to render the value of the select. It renders the selected item by default. |

---

### SelectItem Props

Check the [ListboxItem](/docs/components/listbox#listboxitem-props) props.

### SelectItem Events

Check the [ListboxItem](/docs/components/listbox#listboxitem-events) events.

### SelectSection Props

Check the [ListboxSection](/docs/components/listbox#listboxsection-props) props.

---

### Types

#### Render Value Function

The `T` type is the type of the data passed to the select `items`.

```tsx
export type SelectedItemProps<T> = {
  /** A unique key for the item. */
  key?: Key;
  /** The props passed to the item. */
  props?: Record<string, any>;
  /** The item data. */
  data?: T | null;
  /** An accessibility label for this item. */
  "aria-label"?: string;
  /** The rendered contents of this item (e.g. JSX). */
  rendered?: ReactNode;
  /** A string value for this item, used for features like typeahead. */
  textValue?: string;
  /** The type of item this item represents. */
  type?: string;
};

type SelectedItems<T> = Array<SelectedItemProps<T>>;

renderValue: (items: SelectedItems<T>) => ReactNode;
```

---
title: "Skeleton"
description: "Skeleton is a placeholder to show a loading state and the expected shape of a component."
---

import {skeletonContent} from "@/content/components/skeleton";

# Skeleton

Skeleton is a placeholder to show a loading state and the expected shape of a component.

<ComponentLinks component="skeleton" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add skeleton",
    npm: "npm install @nextui-org/skeleton",
    yarn: "yarn add @nextui-org/skeleton",
    pnpm: "pnpm add @nextui-org/skeleton",
    bun: "bun add @nextui-org/skeleton"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Skeleton} from "@nextui-org/react";',
    individual: 'import {Skeleton} from "@nextui-org/skeleton";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={skeletonContent.usage} />

### Standalone

Skeleton takes the shape of its `children` component by default, but you can also use
it as a standalone component.

<CodeDemo title="Standalone" files={skeletonContent.standalone} />

### Loaded State

You can use the `isLoaded` prop to stop the skeleton animation and show the children component.

<CodeDemo title="Loaded State" files={skeletonContent.loaded} />

## Slots

- **base**: The base slot of the skeleton, it contains the `before` and `after` pseudo elements to create the animation.
- **content**: The wrapped component to show the skeleton shape. It is visible only when the `isLoaded` prop is `true`.

<Spacer y={4}/>  

## Data Attributes

`Skeleton` has the following attributes on the `base` element:

- **data-loaded**:
  Indicates the loaded state of the skeleton. Based on the `isLoaded` prop.

<Spacer y={4}/>  

## API

### Skeleton Props

| Attribute        | Type                                | Description                                              | Default |
| ---------------- | ----------------------------------- | -------------------------------------------------------- | ------- |
| children         | `ReactNode`                         | The content of the skeleton.                             | -       |
| isLoaded         | `boolean`                           | Whether the skeleton is loaded.                          | `false` |
| disableAnimation | `boolean`                           | Whether to disable the animations.                       | `false` |
| classNames       | `Record<"base"｜"content", string>` | Allows to set custom class names for the skeleton slots. | -       |

---
title: "Slider"
description: "A slider allows a user to select one or more values within a range."
---

import {sliderContent} from "@/content/components/slider";

# Slider

A slider allows a user to select one or more values within a range.

<ComponentLinks component="slider" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add slider",
    npm: "npm install @nextui-org/slider",
    yarn: "yarn add @nextui-org/slider",
    pnpm: "pnpm add @nextui-org/slider",
    bun: "bun add @nextui-org/slider"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Slider} from "@nextui-org/react";',
    individual: 'import {Slider} from "@nextui-org/slider";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={sliderContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={sliderContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={sliderContent.sizes} />

### Radius

<CodeDemo title="Radius" files={sliderContent.radius} />

### Colors

<CodeDemo title="Sizes" files={sliderContent.colors} />

### Vertical Slider

It is possible to change the orientation of the slider by using the `orientation="vertical"` prop.

<CodeDemo title="With Steps Markers" files={sliderContent.vertical} />

### With Visible Steps

You can use the `showSteps` prop to display small dots on each step.

<CodeDemo title="With Visible Steps" files={sliderContent.visibleSteps} />

### With Marks

You can use the `marks` prop to display a label on each step.

<CodeDemo title="With Marks" files={sliderContent.marks} />

### Range Slider

If you pass an array of values to the `value` prop or to the `defaultValue` prop, the slider will become a range slider.

<CodeDemo title="Range Slider" files={sliderContent.range} />

### Fill Offset

The `fillOffset` prop allows you to set where the fill should start.

<CodeDemo title="Fill Offset" files={sliderContent.fillOffset} />

### With Tooltip

The `showTooltip` prop allows you to show a tooltip with the current thumb value when the user hovers or drags the thumb.

<CodeDemo title="With Tooltip" files={sliderContent.tooltip} />

> **Note:** You can change any of the tooltip props by passing the `tooltipProps` to the `Slider` component.

### With Outline

It is possible to add a small outline to the slider's thumbs by passing the `showOutline` prop.

<CodeDemo title="With Outline" files={sliderContent.outline} />

### Start & End Content

Slider component provides `startContent` and `endContent` props that allows you to add any `ReactNode` to the start and end of the slider.

<CodeDemo title="Start & End Content" files={sliderContent.startEndContent} />

### Value Formatting

Values are formatted as a percentage by default, but this can be modified by using the
`formatOptions` prop to specify a different format. `formatOptions` is compatible with
the option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)
and is applied based on the current locale.

<CodeDemo title="Value Formatting" files={sliderContent.valueFormatting} />

> **Note:** Use the `tooltipValueFormatOptions` prop to format the tooltip value.

It is also possible to format the value using the `getValue` prop.

<CodeDemo title="Value Formatting (Get value)" files={sliderContent.getValue} />

### Hiding the Value

The Slider value is shown by default, but can be hidden by passing the `hideValue` prop.

<CodeDemo title="Hiding the Value" files={sliderContent.hideValue} />

### Hiding the Thumbs

The Slider thumbs are shown by default, but can be hidden by passing the `hideThumb` prop.

<CodeDemo title="Hiding the Thumbs" files={sliderContent.hideThumb} />

### Controlled

You can control the slider by passing the `value` and `onChange` props.

<CodeDemo title="Controlled" files={sliderContent.controlled} />

If you want to capture the slider value only when the user stops dragging the thumb, you can use the `onChangeEnd` prop.

<CodeDemo title="Controlled Change End" files={sliderContent.controlledChangeEnd} />

### Controlled Range

You can also control the range slider by using an array of values in the `value` and `onChange` props.

<CodeDemo title="Controlled Range" files={sliderContent.controlledRange} />

### Custom Thumb

The Slider component provides a `renderThumb` prop that allows you to customize the thumb in any way you want.

<CodeDemo title="Custom Thumb" files={sliderContent.renderThumb} />

### Custom Range Thumbs

You can also use the `renderThumb` prop to customize the thumbs of a range slider. The `index` prop will tell you which thumb is being rendered.

<CodeDemo title="Custom Range Thumbs" files={sliderContent.renderRangeThumb} />

### Custom Label

The Slider component provides a `renderLabel` prop that allows you to customize the label in any way you want.

<CodeDemo title="Custom Label" files={sliderContent.renderLabel} />

### Custom Value

The Slider component provides a `renderValue` prop that allows you to customize the value label element.

<CodeDemo title="Custom Value" files={sliderContent.renderValue} />

### Disabling Thumb Scale

In case you want to disable the thumb scale animation, you can pass the `disableThumbScale` prop.

<CodeDemo title="Disabling Thumb Scale" files={sliderContent.disableThumbScale} />

## Slots

- **base**: The foundational slot, encompassing all other slots and elements. It serves as the primary container.
- **labelWrapper**: The container for the Slider's label and value. It aligns these elements and ensures a consistent layout.
- **label**: A dedicated slot to display the Slider's label.
- **value**: Displays the current value of the Slider. Located within the `labelWrapper`.
- **step**: Represents individual steps or intervals on the Slider.
- **mark**: Denotes specific values or intervals along the Slider.
- **trackWrapper**: A container for the slider's track, ensuring it is consistently aligned and positioned.
- **track**: The base bar of the Slider, along which the thumb moves.
- **filler**: A visual representation of the selected value, filling the track from the start point to the current thumb position.
- **thumb**: The interactive element that users drag along the track to select a value on the Slider.
- **startContent**: A slot for additional content or icons at the beginning of the Slider.
- **endContent**: A slot for additional content or icons at the end of the Slider.

### Custom Styles

You can customize the `Slider` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={sliderContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Slider` has the following attributes:

- **data-hover**:
  When the slider is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-orientation**:
  The orientation of the slider. Based on `orientation` prop.

`Thumbs` have the following attributes which are returned by the `renderThumb` prop:

- **data-dragging**:
  When the thumb is being dragged.
- **data-focus-visible**:
  When the thumb is focused. Based on [useFocusVisible](https://react-spectrum.adobe.com/react-aria/useFocusVisible.html)
- **data-hover**:
  When the thumb is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-pressed**:
  When the thumb is being pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)

<Spacer y={4} />

## Accessibility

- Support for one or multiple thumbs.
- Support for mouse, touch, and keyboard via the [useMove](https://react-spectrum.adobe.com/react-aria/useMove.html) hook.
- Multi-touch support for dragging multiple thumbs or multiple sliders at once.
- Pressing on the track moves the nearest thumb to that position.
- Supports using the arrow keys, as well as page up/down, home, and end keys.
- Support for both horizontal and vertical orientations.
- Support for custom min, max, and step values with handling for rounding errors.
- Support for disabling the whole slider or individual thumbs.
- Prevents text selection while dragging.
- Exposed to assistive technology as a group of slider elements via ARIA.
- Slider thumbs use hidden native input elements to support touch screen readers.
- Support for labeling both the slider as a whole and individual thumbs.
- Support for displaying the current thumb values using an `<output>` element.
- Internationalized number formatting as a percentage or value.
- Support for mirroring in RTL locales.

<Spacer y={4} />

## API

### Slider Props

| Attribute                 | Type                                                                                                                                                                             | Description                                                                                                                                                   | Default      |
| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ |
| label                     | `ReactNode`                                                                                                                                                                      | The content to display as the label.                                                                                                                          | -            |
| name                      | `string`                                                                                                                                                                         | The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname). | -            |
| size                      | `sm` \| `md` \| `lg`                                                                                                                                                             | The size of the Slider filler and thumb.                                                                                                                      | `md`         |
| color                     | `foreground` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                   | The color of the filler and thumb.                                                                                                                            | `primary`    |
| radius                    | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                                         | The Slider's thumbs border radius.                                                                                                                            | `full`       |
| step                      | `number`                                                                                                                                                                         | The Slider's step value.                                                                                                                                      | `1`          |
| value                     | `number`                                                                                                                                                                         | The current value (controlled).                                                                                                                               | -            |
| defaultValue              | `number`                                                                                                                                                                         | The default value (uncontrolled).                                                                                                                             | -            |
| minValue                  | `number`                                                                                                                                                                         | The slider's minimum value.                                                                                                                                   | `0`          |
| maxValue                  | `number`                                                                                                                                                                         | The slider's maximum value.                                                                                                                                   | `100`        |
| orientation               | `horizontal` \| `vertical`                                                                                                                                                       | The orientation of the Slider.                                                                                                                                | `horizontal` |
| fillOffset                | `number`                                                                                                                                                                         | The offset from which to start the fill.                                                                                                                      | -            |
| showSteps                 | `boolean`                                                                                                                                                                        | Whether to show the steps indicators.                                                                                                                         | `false`      |
| showTooltip               | `boolean`                                                                                                                                                                        | Whether to show a tooltip with the current thumb value when the user hovers or drags the thumb.                                                               | `false`      |
| marks                     | [SliderStepMarks](#slider-step-marks)                                                                                                                                            | The marks to display on the Slider's steps.                                                                                                                   | -            |
| startContent              | `ReactNode`                                                                                                                                                                      | The content to display at the beginning of the Slider.                                                                                                        | -            |
| endContent                | `ReactNode`                                                                                                                                                                      | The content to display at the end of the Slider.                                                                                                              | -            |
| formatOptions             | [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)                                                          | The options to format the value.                                                                                                                              | -            |
| tooltipValueFormatOptions | [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)                                                          | The options to format the tooltip value. By default, it uses the same options as `formatOptions`.                                                             | -            |
| tooltipProps              | [TooltipProps](/docs/components/tooltip)                                                                                                                                         | The props to pass to the thumbs's tooltip.                                                                                                                    | -            |
| showOutline               | `boolean`                                                                                                                                                                        | Whether to show a small outline around the thumbs.                                                                                                            | `false`      |
| hideValue                 | `boolean`                                                                                                                                                                        | Whether to hide the Slider value.                                                                                                                             | `false`      |
| hideThumb                 | `boolean`                                                                                                                                                                        | Whether to hide all the Slider thumbs.                                                                                                                        | `false`      |
| disableThumbScale         | `boolean`                                                                                                                                                                        | Whether to disable the thumb scale animation.                                                                                                                 | `false`      |
| isDisabled                | `boolean`                                                                                                                                                                        | Whether the whole Slider is disabled.                                                                                                                         | `false`      |
| disableAnimation          | `boolean`                                                                                                                                                                        | Whether to disable the Slider animations.                                                                                                                     | `false`      |
| classNames                | `Record<"base"｜"labelWrapper"｜"label"｜ "value" ｜ "step" ｜ "mark" ｜ "trackWrapper" ｜ "track"｜ "output" ｜ "filler" ｜ "thumb" ｜ "startContent" ｜ "endContent", string>` | Allows to set custom class names for the Slider slots.                                                                                                        | -            |

### Slider Functions

| Name        | Type                                                                     | Description                                                                                    |
| ----------- | ------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------- |
| getValue    | `(value: SliderValue) => string`                                         | A function to format the value. Overrides default formatted number.                            |
| renderLabel | `(props: DOMAttributes<HTMLLabelElement>) => ReactNode`                  | A function to render the label.                                                                |
| renderValue | `(props: DOMAttributes<HTMLOutputElement>) => ReactNode`                 | A function to render the value.                                                                |
| renderThumb | `(props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode` | A function to render the thumbs. The `index` prop will tell you which thumb is being rendered. |

### Slider Events

| Name        | Type                           | Description                                                                  |
| ----------- | ------------------------------ | ---------------------------------------------------------------------------- |
| onChange    | `(value: SliderValue) => void` | Callback fired when the value changes.                                       |
| onChangeEnd | `(value: SliderValue) => void` | Callback fired when the value changes and the user stops dragging the thumb. |

### Types

#### Slider Value

```ts
export type SliderValue = number | number[];
```

#### Slider Step Marks

```ts
export type SliderStepMarks = {
  value: number;
  label: string;
}[];
```

---
title: "Snippet"
description: "Snippet is a component that can be used to display inline or multiline code snippets."
---

import {snippetContent} from "@/content/components/snippet";

# Snippet

Snippet is a component that can be used to display inline or multiline code snippets.

<ComponentLinks component="snippet" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add snippet",
    npm: "npm install @nextui-org/snippet",
    yarn: "yarn add @nextui-org/snippet",
    pnpm: "pnpm add @nextui-org/snippet",
    bun: "bun add @nextui-org/snippet"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Snippet} from "@nextui-org/react";',
    individual: 'import {Snippet} from "@nextui-org/snippet";',
  }}
/>

## Usage

<CodeDemo title="Snippet" files={snippetContent.usage} />

### Sizes

<CodeDemo title="Sizes" files={snippetContent.sizes} />

### Colors

<CodeDemo title="Colors" files={snippetContent.colors} />

### Variants

<CodeDemo title="Variants" files={snippetContent.variants} />

### Custom Symbol

<CodeDemo title="Custom Symbol" files={snippetContent.symbol} />

### Without Copy

You can hide the copy button by setting the `hideCopyButton` property to `true`.

<CodeDemo title="Without Copy" files={snippetContent.withoutCopy} />

### Custom Tooltip

You can customize the tooltip by using the `tooltipProps` property.

<CodeDemo title="Custom Tooltip" highlightedLines="7-10" files={snippetContent.customTooltip} />

> **Note**: For more information about the `Tooltip` props, please visit the [Tooltip](/docs/components/tooltip) page.

### Multiline

<CodeDemo title="Multiline" files={snippetContent.multiline} />

### Custom Icons

You can customize the copy and copied icons by using the `copyIcon` and `checkIcon` properties.

<CodeDemo title="Custom Icons" highlightedLines="9-10" files={snippetContent.customIcons} />

## Slots

- **base**: The base slot of the snippet, it is the main container.
- **content**: This is the wrapper of the `<pre/>` slot.
- **pre**: The `<pre/>` slot of the snippet. It is used to wrap the code.
- **symbol**: The symbol wrapper slot.
- **copyButton**: The copy button slot.
- **copyIcon**: The copy icon slot.
- **checkIcon**: The check icon slot.

<Spacer y={4} />

## API

### Snippet Props

| Attribute        | Type                                                                            | Description                                                                                    | Default |
| ---------------- | ------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ------- |
| children         | `ReactNode` \| `ReactNode[]`                                                    | The content of the snippet.                                                                    | -       |
| size             | `sm` \| `md` \| `lg`                                                            | The size of the snippet.                                                                       | `md`    |
| radius           | `none` \| `sm` \| `md` \| `lg`                                                  | The radius of the snippet.                                                                     | `lg`    |
| symbol           | `string` \| `ReactNode`                                                         | The symbol to show before the snippet.                                                         | `$`     |
| timeout          | `number`                                                                        | he time in milliseconds to wait before resetting the clipboard.                                | `2000`  |
| codeString       | `string`                                                                        | The code string to copy. if `codeString` is passed, it will be copied instead of the children. | -       |
| tooltipProps     | [TooltipProps](/docs/components/tooltip#tooltip-props)                          | The props of the tooltip.                                                                      | -       |
| copyIcon         | `ReactNode`                                                                     | The copy icon.                                                                                 | -       |
| checkIcon        | `ReactNode`                                                                     | The check icon.                                                                                | -       |
| disableTooltip   | `boolean`                                                                       | Whether to disable the tooltip.                                                                | `false` |
| disableCopy      | `boolean`                                                                       | Whether to disable the copy button.                                                            | `false` |
| hideCopyButton   | `boolean`                                                                       | Whether to hide the copy button.                                                               | `false` |
| hideSymbol       | `boolean`                                                                       | Whether to hide the symbol.                                                                    | `false` |
| copyButtonProps  | [ButtonProps](/docs/components/button#button-props)                             | The props of the copy button.                                                                  | -       |
| disableAnimation | `boolean`                                                                       | Whether to disable the animations.                                                             | `false` |
| classNames       | `Record<"base"｜"content"｜"pre"｜"symbol"｜"copyButton"｜"checkIcon", string>` | Allows to set custom class names for the snippet slots.                                        | -       |

### Snippet Events

| Attribute | Type                                   | Description                                     |
| --------- | -------------------------------------- | ----------------------------------------------- |
| onCopy    | `(value: string ｜ string[]) => void;` | Handler that is called when the code is copied. |

---
title: "Spacer"
description: "Spacer is a component used to add space between components."
---

import {spacerContent} from "@/content/components/spacer";

# Spacer

Spacer is a component used to add space between components.

<ComponentLinks component="spacer" rscCompatible />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add spacer",
    npm: "npm install @nextui-org/spacer",
    yarn: "yarn add @nextui-org/spacer",
    pnpm: "pnpm add @nextui-org/spacer",
    bun: "bun add @nextui-org/spacer"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Spacer} from "@nextui-org/react";',
    individual: 'import {Spacer} from "@nextui-org/spacer";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={spacerContent.usage} />

> **Note**: The `x` and `y` values are based on [Tailwind Spacing Scale](https://tailwindcss.com/docs/space)

<Spacer y={4}/>  

## API

### Spacer Props

| Attribute | Type             | Description      | Default |
| --------- | ---------------- | ---------------- | ------- |
| x         | [Space](#spaces) | The x axis space | `1`     |
| y         | [Space](#spaces) | The y axis space | `1`     |

### Spaces

```ts
type Space = 0 | "px" | 0.5 | 1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 60 | 64 | 72 | 80 | 96;
```

---
title: "Spinner"
description: "Spinner express an unspecified wait time or display the length of a process."
---

import {spinnerContent} from "@/content/components/spinner";

# Spinner

Spinner express an unspecified wait time or display the length of a process.

<ComponentLinks component="spinner" rscCompatible />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add spinner",
    npm: "npm install @nextui-org/spinner",
    yarn: "yarn add @nextui-org/spinner",
    pnpm: "pnpm add @nextui-org/spinner",
    bun: "bun add @nextui-org/spinner"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Spinner} from "@nextui-org/react";',
    individual: 'import {Spinner} from "@nextui-org/spinner";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={spinnerContent.usage} />

> **Note**: Spinner adds `Loading` as `aria-label` by default. This is required for accessibility. You can change it by passing a `label` or `aria-label` prop.

### Sizes

<CodeDemo title="Sizes" files={spinnerContent.sizes} />

### Colors

<CodeDemo title="Colors" files={spinnerContent.colors} />

### With Label

<CodeDemo title="With Label" files={spinnerContent.label} />

### Label colors

<CodeDemo title="Label colors" files={spinnerContent.labelColors} />

## Slots

- **base**: The base slot of the spinner, it wraps the circles and the label.
- **wrapper**: The wrapper of the circles.
- **circle1**: The first circle of the spinner.
- **circle2**: The second circle of the spinner.
- **label**: The label content.

<Spacer y={4} />

## API

### Circular Progress Props

| Attribute  | Type                                                                        | Description                                             | Default   |
| ---------- | --------------------------------------------------------------------------- | ------------------------------------------------------- | --------- |
| label      | `string`                                                                    | The content to display as the label.                    | -         |
| size       | `sm` \| `md` \| `lg`                                                        | The size of the spinner circles.                        | `md`      |
| color      | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the spinner circles.                       | `primary` |
| labelColor | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the label.                                 | `default` |
| classNames | `Record<"base"｜"wrapper"｜"circle1"｜"circle2"｜"label", string>`          | Allows to set custom class names for the spinner slots. | -         |

---
title: "Switch"
description: "The Switch component is used as an alternative between checked and not checked states."
---

import {switchContent} from "@/content/components/switch";

# Switch

The Switch component is used as an alternative between checked and not checked states.

<ComponentLinks component="switch" styles="toggle" reactAriaHook="useSwitch" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add switch",
    npm: "npm install @nextui-org/switch",
    yarn: "yarn add @nextui-org/switch",
    pnpm: "pnpm add @nextui-org/switch",
    bun: "bun add @nextui-org/switch"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {Switch} from "@nextui-org/react";',
    individual: 'import {Switch} from "@nextui-org/switch";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={switchContent.usage} />

### With Label

<CodeDemo title="With Label" files={switchContent.label} />

### Disabled

<CodeDemo title="Disabled" files={switchContent.disabled} />

### Sizes

<CodeDemo title="Sizes" files={switchContent.sizes} />

### Colors

<CodeDemo title="Colors" files={switchContent.colors} />

### With Thumb Icon

<CodeDemo title="With Thumb Icon" files={switchContent.thumbIcon} />

### With Icons

You can also add icons to start and end of the switch by using `startContent` and `endContent` props.

<CodeDemo title="With Icons" files={switchContent.icons} highlightedLines="11-12" />

### Controlled

<CodeDemo title="Controlled" files={switchContent.controlled} />

> **Note**: NextUI `Switch` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

## Slots

- **base**: Base slot for the switch. It is the main wrapper.
- **wrapper**: The wrapper of the start icon, end icon and thumb.
- **thumb**: The thumb element of the switch. It is the circle element.
- **label**: The label slot of the switch.
- **startContent**: The icon slot at the start of the switch.
- **endContent**: The icon slot at the end of the switch.
- **thumbIcon**: The icon slot inside the thumb.

### Custom Styles

You can customize the `Switch` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={switchContent.customStyles} />

### Custom Implementation

In case you need to customize the switch even further, you can use the `useSwitch` hook to create your own implementation.

<CodeDemo title="Custom Implementation" files={switchContent.customImpl} />

<Spacer y={4} />

## Data Attributes

`Switch` has the following attributes on the `base` element:

- **data-selected**:
  When the switch is checked. Based on `isSelected` prop.
- **data-pressed**:
  When the switch is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)
- **data-readonly**:
  When the switch is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the switch is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the switch is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the switch is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the switch is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Built with a native HTML `<input>` element.
- Full support for browser features like form autofill.
- Keyboard focus management and cross browser normalization.
- Keyboard event support for <Kbd>Tab</Kbd> and <Kbd>Space</Kbd> keys.
- Labeling support for assistive technology.
- Exposed as a switch to assistive technology via ARIA

<Spacer y={4} />

## API

### Switch Props

| Attribute        | Type                                                                                                       | Description                                                         | Default   |
| ---------------- | ---------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- | --------- |
| children         | `ReactNode`                                                                                                | The label of the switch.                                            | -         |
| value            | `string`                                                                                                   | The value of the input element, used when submitting an HTML form.  | -         |
| name             | `string`                                                                                                   | The name of the input element, used when submitting an HTML form.   | -         |
| size             | `sm` \| `md` \| `lg`                                                                                       | The size of the switch.                                             | `md`      |
| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                | The color of the switch.                                            | `primary` |
| thumbIcon        | [ThumbIconProps](#switch-icon-props)                                                                       | The icon to be displayed when the switch is checked.                | -         |
| startContent     | `ReactNode`                                                                                                | The icon to be displayed at the start of the switch.                | -         |
| endContent       | `ReactNode`                                                                                                | The icon to be displayed at the end of the switch.                  | -         |
| isSelected       | `boolean`                                                                                                  | Whether the element should be selected (controlled).                | -         |
| defaultSelected  | `boolean`                                                                                                  | Whether the element should be selected (uncontrolled).              | -         |
| isRequired       | `boolean`                                                                                                  | Whether user input is required on the input before form submission. | `false`   |
| isReadOnly       | `boolean`                                                                                                  | Whether the input can be selected but not changed by the user.      | -         |
| isDisabled       | `boolean`                                                                                                  | Whether the switch is disabled.                                     | `false`   |
| disableAnimation | `boolean`                                                                                                  | Whether the animation should be disabled.                           | `false`   |
| classNames       | `Record<"base"｜ "wrapper"｜ "thumb"｜ "label" ｜ "startContent" ｜ "endContent" ｜ "thumbIcon" , string>` | Allows to set custom class names for the switch slots.              | -         |

### Switch Events

| Attribute     | Type                                  | Description                                                                                                                                              |
| ------------- | ------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing `event.target.checked` (boolean). |
| onValueChange | `(isSelected: boolean) => void`       | Handler that is called when the element's selection state changes.                                                                                       |

### Types

#### Switch Icon Props

```ts
type IconProps = {
  "data-checked": string;
  width: string;
  height: string;
  isSelected: boolean;
  className: string;
};

type CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);
```

---
title: "Table"
description: "Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data."
---

import {tableContent} from "@/content/components/table";

# Table

Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.

<ComponentLinks component="table" reactHook="useTable" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add table",
    npm: "npm install @nextui-org/table",
    yarn: "yarn add @nextui-org/table",
    pnpm: "pnpm add @nextui-org/table",
    bun: "bun add @nextui-org/table"
  }}
/>


## Import

NextUI exports 6 table-related components:

- **Table**: The main component to display a table.
- **TableHeader**: The header of the table.
- **TableBody**: The body of the table.
- **TableColumn**: The column of the table.
- **TableRow**: The row of the table.
- **TableCell**: The cell of the table.

<ImportTabs
  commands={{
    main: `import {
  Table,
  TableHeader,
  TableBody,
  TableColumn,
  TableRow,
  TableCell
} from "@nextui-org/react";`,
    individual: `import {
  Table,
  TableHeader,
  TableBody,
  TableColumn,
  TableRow,
  TableCell
} from "@nextui-org/table";`,
  }}
/>

## Usage

<CodeDemo title="Usage" files={tableContent.usage} />

### Dynamic

To render a table dynamically, you can use the `columns` prop to pass the columns and `items` prop to pass the data.

<CodeDemo title="Dynamic" files={tableContent.dynamic} />

#### Why not array map?

Using the `items` prop and providing a render function allows [react-aria](https://react-spectrum.adobe.com/react-aria/index.html)
to automatically cache the results of rendering each item and avoid re-rendering all items in the
collection when only one of them changes. This has big performance benefits for large
collections.

You could also use `Array.map` to render the items, but it will not be as performant as using the `items` and `columns` prop.

Example:

```jsx
import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@nextui-org/react";

const rows = [...];

const columns = [...];

export default function App() {
  return (
    <Table aria-label="Example table with dynamic content">
      <TableHeader>
        {columns.map((column) =>
          <TableColumn key={column.key}>{column.label}</TableColumn>
        )}
      </TableHeader>
      <TableBody>
        {rows.map((row) =>
          <TableRow key={row.key}>
            {(columnKey) => <TableCell>{getKeyValue(row, columnKey)}</TableCell>}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}
```

> **Note**: To learn more about React Aria collections and how to use them, please check [React Aria Collections](https://react-spectrum.adobe.com/react-stately/collections.html).

### Empty State

You can use the `emptyContent` prop to render a custom component when the table is empty.

<CodeDemo title="Empty State" highlightedLines="11" files={tableContent.empty} />

### Without Header

In case you don't want to render the header, you can use the `hideHeader` prop.

<CodeDemo title="Without Header" files={tableContent.withoutHeader} />

### Without Wrapper

By default the table is wrapped in a `div` element with a small shadow effect and a border radius.
You can use the `removeWrapper` prop to remove the wrapper and only render the table.

<CodeDemo title="Without Wrapper" files={tableContent.withoutWrapper} />

### Custom Cells

You can render any component inside the table cell. In the example below, we are rendering different components according to the `key` of the column.

<CodeDemo title="Custom Cells" files={tableContent.customCells} />

### Striped Rows

You can use the `isStriped` prop to render striped rows.

<CodeDemo title="Striped Rows" files={tableContent.striped} />

### Single Row Selection

It is possible to make the table rows selectable. To do so, you can use the `selectionMode` prop. Use `defaultSelectedKeys` to
provide a default set of selected rows.

<CodeDemo title="Single Row Selection" files={tableContent.singleSelection} />

> **Note**: The value of the selected keys must match the key prop of the row.

### Multiple Row Selection

You can also select multiple rows by using the `selectionMode="multiple"` prop. Use `defaultSelectedKeys` to
provide a default set of selected rows.

<CodeDemo title="Multiple Row Selection" files={tableContent.multipleSelection} />

> **Note**: When using multiple selection, selectable checkboxes will be rendered in the first column of the table.

### Disallow Empty Selection

Table also supports a `disallowEmptySelection` prop which forces the user to have at least one
row in the Table selected at all times. In this mode, if a single row is selected and the
user presses it, it will not be deselected.

<CodeDemo title="Disallow Empty Selection" files={tableContent.disallowEmptySelection} />

### Controlled Selection

To programmatically control row selection, use the `selectedKeys` prop paired with the `onSelectionChange` callback.
The key prop from the selected rows will be passed into the callback when the row is pressed, allowing you to update state accordingly.

<CodeDemo title="Controlled Selection" files={tableContent.controlledSelection} />

> **Note**: The `selectedKeys` property must be a `Set` object.

### Disabled Rows

You can disable rows by using the `disabledKeys` prop. This will prevent rows from being
selectable as shown in the example below.

<CodeDemo title="Disabled Rows" files={tableContent.disabledRows} />

### Selection Behavior

By default, Table uses the `toggle` selection behavior, which behaves like a checkbox group:
clicking, tapping, or pressing the <Kbd>Space</Kbd> or <Kbd>Enter</Kbd> keys toggles selection for the focused row.

When the `selectionBehavior` prop is set to `replace`, clicking a row with the mouse replaces
the selection with only that row. Using the arrow keys moves both focus and selection.
To select multiple rows, modifier keys such as <Kbd>Ctrl</Kbd>, <Kbd>Cmd</Kbd>, and <Kbd>Shift</Kbd> can be used.

<CodeDemo title="Selection Behavior" files={tableContent.selectionBehavior} />

### Rows Actions

Table supports rows via the `onRowAction` callback. In the default `toggle` selection
behavior, when nothing is selected, clicking or tapping the row triggers the row action.

This behavior is slightly different in the `replace` selection behavior, where single
clicking selects the row and actions are performed via double click.

<CodeDemo title="Rows Actions" files={tableContent.rowActions} />

### Sorting Rows

Table supports sorting its data when a column header is pressed. To designate that a `Column`
should support sorting, provide it with the `allowsSorting` prop.

Table accepts a `sortDescriptor` prop that defines the current column key to sort by
and the sort direction (ascending/descending). When the user presses a sortable column
header, the column's key and sort direction is passed into the `onSortChange` callback,
allowing you to update the `sortDescriptor` appropriately.

We recommend using the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) to manage the data sorting. So make
sure to install it before using the sorting feature.

<PackageManagers
  commands={{
    npm: "npm install @react-stately/data",
    yarn: "yarn add @react-stately/data",
    pnpm: "pnpm add @react-stately/data",
  }}
/>

```jsx
import {useAsyncList} from "@react-stately/data";
```

<Spacer y={2} />

<CodeDemo
  asIframe
  title="Sorting Rows"
  resizeEnabled={false}
  displayMode="visible"
  files={tableContent.sorting}
  previewHeight="520px"
  iframeSrc="/examples/table/sorting"
/>

> Note that we passed the `isLoading` and `loadingContent` props to `TableBody` to
> render a loading state while the data is being fetched.

### Loading more data

Table allows you to add a custom component at the end of the table, on the example below we are
using a button to load more data.

<CodeDemo
  asIframe
  title="Loading more data"
  resizeEnabled={false}
  displayMode="visible"
  files={tableContent.loadMore}
  highlightedLines="36-45"
  previewHeight="620px"
  iframeSrc="/examples/table/load-more"
/>

> **Note**: We passed the `isHeaderSticky` to the `Table` component to make the header sticky.

### Paginated Table

You can use the [Pagination](/components/pagination) component to paginate the table.

<CodeDemo title="Paginated Table" files={tableContent.paginated} />

### Async Pagination

It is also possible to use the [Pagination](/components/pagination) component to paginate the table asynchronously. To fetch the data, we are using the `useSWR` hook from [SWR](https://swr.vercel.app/docs/pagination).

<CodeDemo
  asIframe
  title="Async Paginated Table"
  resizeEnabled={false}
  files={tableContent.asyncPagination}
  previewHeight="600px"
  displayMode="visible"
  iframeSrc="/examples/table/async-pagination"
/>

### Infinite Pagination

Table also supports infinite pagination. To do so, you can use the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) and
[@nextui-org/use-infinite-scroll](https://www.npmjs.com/package/@nextui-org/use-infinite-scroll) hook.

<CodeDemo
  asIframe
  title="Infinite Paginated Table"
  resizeEnabled={false}
  files={tableContent.infinitePagination}
  previewHeight="620px"
  displayMode="visible"
  iframeSrc="/examples/table/infinite-pagination"
/>

### Use Case Example

When creating a table, you usually need core functionalities like sorting, pagination, and filtering. In the
example below, we combined all these functionalities to create a complete table.

<CodeDemo
  asIframe
  typescriptStrict={true}
  title="Table use Case Example"
  resizeEnabled={false}
  files={tableContent.useCase}
  previewHeight="630px"
  displayMode="visible"
  iframeSrc="/examples/table/use-case"
/>

## Slots

- **base**: Defines a flexible column layout and relative positioning for the table component.
- **wrapper**: Applies to the outermost wrapper, providing padding, flexible layout, relative positioning, visual styles, and scrollable overflow handling.
- **table**: Sets the table to have a full minimum width and auto-adjusting height.
- **thead**: Specifies rounded corners for the first child row in the table header.
- **tbody**: No specific styles are applied to the body of the table.
- **tr**: Styles for table rows including group focus, outline properties, and a set of undefined focus-visible classes.
- **th**: Styles for table headers, including padding, text alignment, font properties, and special styles for sortable columns.
- **td**: Applies to table cells, with properties for padding, alignment, and relative positioning, plus special styles for first child elements, selection indication, and disabled cells.
- **tfoot**: No specific styles are applied to the footer of the table.
- **sortIcon**: Styles for sorting icons, with properties for margin, opacity, and transition effects based on sorting direction and hover state.
- **emptyWrapper**: Defines style for an empty table, with text alignment, color, and a specified height.
- **loadingWrapper**: Style applied when the table is loading, positioning it centrally in its container.

### Custom Styles

You can customize the `Table` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo
  asIframe
  title="Table custom styles example"
  resizeEnabled={false}
  files={tableContent.customStyles}
  previewHeight="540px"
  displayMode="visible"
  iframeSrc="/examples/table/custom-styles"
/>

<Spacer y={4} />

## Data Attributes

`TableBody` has the following attributes:

- **data-empty**:
  When the table is empty.
- **data-loading**:
  When the table data is loading. Based on `TableBody` `isLoading` and `loadingContent` props.

`TableRow` has the following attributes:

- **data-selected**:
  When the row is selected. Based on `Table` `selectedKeys` prop.
- **data-disabled**:
  When the row is disabled. Based on `Table` `disabledKeys` prop.
- **data-hover**:
  When the row is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus-visible**:
  When the row is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-first**:
  When the row is the first row.
- **data-middle**:
  When the row is in the middle.
- **data-odd**:
  When the row is odd.
- **data-last**:
  When the row is the last row.

`TableCell` has the following attributes:

- **data-selected**:
  When the cell row is selected. Based on `Table` `selectedKeys` prop.
- **data-focus-visible**:
  When the cell is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).

<Spacer y={4} />

## Accessibility

- Exposed to assistive technology as a grid using ARIA.
- Keyboard navigation between columns, rows, cells, and in-cell focusable elements via the arrow keys.
- Single, multiple, or no row selection via mouse, touch, or keyboard interactions.
- Support for disabled rows, which cannot be selected.
- Column sorting support.
- Async loading, infinite scrolling, filtering, and sorting support.
- Support for both toggle and replace selection behaviors.
- Labeling support for accessibility.
- Ensures that selections are announced using an ARIA live region.
- Support for marking columns as row headers, which will be read when navigating the rows with a screen reader.
- Optional support for checkboxes in each row for selection, as well as in the header to select all rows.
- Automatic scrolling support during keyboard navigation.
- Support for row actions via double click, Enter key, or tapping.
- Typeahead to allow focusing rows by typing text.
- Long press to enter selection mode on touch when there is both selection and row actions.

<Spacer y={4} />

## API

### Table Props

| Attribute                     | Type                                                                                                                                                          | Description                                                                                                  | Default     |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ | ----------- |
| children\*                    | `ReactNode[]`                                                                                                                                                 | The elements that make up the table. Includes the `TableHeader`, `TableBody`, `TableColumn`, and `TableRow`. | -           |
| color                         | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                   | Color of the selected rows, and checkboxes.                                                                  | `default`   |
| layout                        | `auto` \| `fixed`                                                                                                                                             | Defines the layout of the table.                                                                             | `auto`      |
| radius                        | `none` \| `sm` \| `md` \| `lg`                                                                                                                                | The border-radius of the table.                                                                              | `lg`        |
| shadow                        | `none` \| `sm` \| `md` \| `lg`                                                                                                                                | The shadow size of the table.                                                                                | `sm`        |
| hideHeader                    | `boolean`                                                                                                                                                     | Whether to hide the table header.                                                                            | `false`     |
| isStriped                     | `boolean`                                                                                                                                                     | Whether to apply striped rows in the table.                                                                  | `false`     |
| isCompact                     | `boolean`                                                                                                                                                     | Whether to apply compact style to the table.                                                                 | `false`     |
| isHeaderSticky                | `boolean`                                                                                                                                                     | Whether to make the table header sticky.                                                                     | `false`     |
| fullWidth                     | `boolean`                                                                                                                                                     | Whether to make the table full width.                                                                        | `true`      |
| removeWrapper                 | `boolean`                                                                                                                                                     | Whether the table base container should not be rendered.                                                     | `false`     |
| BaseComponent                 | `React.ComponentType<any>`                                                                                                                                    | A custom wrapper component for the table.                                                                    | `div`       |
| topContent                    | `ReactNode`                                                                                                                                                   | Provides content to include a component in the top of the table.                                             | -           |
| bottomContent                 | `ReactNode`                                                                                                                                                   | Provides content to include a component in the bottom of the table.                                          | -           |
| topContentPlacement           | `inside` \| `outside`                                                                                                                                         | Where to place the `topContent` component.                                                                   | `inside`    |
| bottomContentPlacement        | `inside` \| `outside`                                                                                                                                         | Where to place the `bottomContent` component.                                                                | `inside`    |
| showSelectionCheckboxes       | `boolean`                                                                                                                                                     | Whether the row selection checkboxes should be displayed.                                                    | -           |
| sortDescriptor                | [SortDescriptor](#sort-descriptor)                                                                                                                            | The current sorted column and direction.                                                                     | -           |
| selectedKeys                  | [Selection](#selection)                                                                                                                                       | The currently selected keys in the collection (controlled).                                                  | -           |
| defaultSelectedKeys           | [Selection](#selection)                                                                                                                                       | The initial selected keys in the collection (uncontrolled).                                                  | -           |
| disabledKeys                  | [Selection](#selection)                                                                                                                                       | A set of keys for rows that are disabled.                                                                    | -           |
| disallowEmptySelection        | `boolean`                                                                                                                                                     | Whether the collection allows empty selection.                                                               | -           |
| selectionMode                 | `single` \| `multiple` \| `none`                                                                                                                              | The type of selection that is allowed in the collection.                                                     | `none`      |
| selectionBehavior             | `toggle` \| `replace`                                                                                                                                         | How multiple selection should behave in the collection.                                                      | `toggle`    |
| disabledBehavior              | `selection` \| `all`                                                                                                                                          | Whether `disabledKeys` applies to all interactions, or only selection.                                       | `selection` |
| allowDuplicateSelectionEvents | `boolean`                                                                                                                                                     | Whether `onSelectionChange` should fire even if the new set of keys is the same as the last.                 | -           |
| disableAnimation              | `boolean`                                                                                                                                                     | Whether to disable the table and checkbox animations.                                                        | `false`     |
| checkboxesProps               | [CheckboxProps](/docs/components/checkbox/#checkbox-props)                                                                                                    | Props to be passed to the checkboxes.                                                                        | -           |
| classNames                    | `Record<"base" ｜ "table" ｜ "thead" ｜ "tbody" ｜ "tfoot" ｜ "emptyWrapper" ｜ "loadingWrapper" ｜ "wrapper" ｜ "tr" ｜ "th" ｜ "td" ｜ "sortIcon", string>` | Allows to set custom class names for the dropdown item slots.                                                | -           |

### Table Events

| Attribute         | Type                                  | Description                                                         |
| ----------------- | ------------------------------------- | ------------------------------------------------------------------- |
| onRowAction       | `(key: React.Key) => void`            | Handler that is called when a user performs an action on the row.   |
| onCellAction      | `(key: react.Key) => void`            | Handler that is called when a user performs an action on the cell.  |
| onSelectionChange | `(keys: Selection) => any`            | Handler that is called when the selection changes.                  |
| onSortChange      | `(descriptor: SortDescriptor) => any` | Handler that is called when the sorted column or direction changes. |

<Spacer y={2} />

#### TableHeader Props

| Attribute  | Type          | Description                                                                                                 | Default |
| ---------- | ------------- | ----------------------------------------------------------------------------------------------------------- | ------- |
| children\* | `ReactNode[]` | A list of Column(s) or a function. If the latter, a list of columns must be provided using the columns prop | -       |
| columns    | `T[]`         | A list of table columns.                                                                                    | -       |

<Spacer y={2} />

#### TableColumn Props

| Attribute     | Type                         | Description                                                                                            | Default |
| ------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------ | ------- |
| children\*    | `ReactNode`                  | Static child columns or content to render as the column header                                         | -       |
| align         | `start` \| `center` \| `end` | The alignment of the column's contents relative to its allotted width                                  | `start` |
| hideHeader    | `boolean`                    | Whether the column should hide its header text                                                         | `false` |
| allowsSorting | `boolean`                    | Whether the column allows sorting                                                                      | -       |
| isRowHeader   | `boolean`                    | Whether a column is a row header and should be announced by assistive technology during row navigation | -       |
| textValue     | `string`                     | A string representation of the column's contents, used for accessibility announcements                 | -       |
| width         | `string` \| `number`         | The width of the column                                                                                | -       |
| minWidth      | `string` \| `number`         | The minimum width of the column                                                                        | -       |
| maxWidth      | `string` \| `number`         | The maximum width of the column                                                                        | -       |

<Spacer y={2} />

#### TableBody Props

| Attribute      | Type                                                          | Description                                                                                   | Default |
| -------------- | ------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | ------- |
| children\*     | `RowElement` \| `RowElement[]` \| `((item: T) => RowElement)` | The contents of the table body. Supports static items or a function for dynamic rendering     | -       |
| items          | `Iterable<T>`                                                 | A list of row objects in the table body used when dynamically rendering rows                  | -       |
| isLoading      | `boolean`                                                     | Whether the table body is loading.                                                            | -       |
| loadingState   | [LoadingState](#loading-state)                                | Handler that is called when more items should be loaded, e.g. while scrolling near the bottom | -       |
| loadingContent | `ReactNode`                                                   | Content to display while loading more items                                                   | -       |
| emptyContent   | `ReactNode`                                                   | Content to display when there are no items in the table body                                  | -       |

### TableBody Events

| Attribute  | Type        | Description                                                                  |
| ---------- | ----------- | ---------------------------------------------------------------------------- |
| onLoadMore | `() => any` | A list of row objects in the table body used when dynamically rendering rows |

<Spacer y={2} />

#### TableRow Props

| Attribute  | Type                                               | Description                                                                     | Default |
| ---------- | -------------------------------------------------- | ------------------------------------------------------------------------------- | ------- |
| children\* | `CellElement` \| `CellElement[]` \| `CellRenderer` | Rendered contents of the row or row child items                                 | -       |
| textValue  | `string`                                           | A string representation of the row's contents, used for features like typeahead | -       |

<Spacer y={2} />

#### TableCell Props

| Attribute  | Type        | Description                                                                     | Default |
| ---------- | ----------- | ------------------------------------------------------------------------------- | ------- |
| children\* | `ReactNode` | The contents of the cell                                                        | -       |
| textValue  | `string`    | A string representation of the row's contents, used for features like typeahead | -       |

---

<Spacer y={2} />

### Table types

#### Sort descriptor

```ts
type SortDescriptor = {
  column: React.Key;
  direction: "ascending" | "descending";
};
```

#### Selection

```ts
type Selection = "all" | Set<React.Key>;
```

#### Loading state

```ts
type LoadingState = "loading" | "sorting" | "loadingMore" | "error" | "idle" | "filtering";
```

---
title: "Tabs"
description: "Tabs organize content into multiple sections and allow users to navigate between them."
---

import {tabsContent} from "@/content/components/tabs";

# Tabs

Tabs organize content into multiple sections and allow users to navigate between them.

<ComponentLinks component="tabs" reactAriaHook="useTabList" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add tabs",
    npm: "npm install @nextui-org/tabs",
    yarn: "yarn add @nextui-org/tabs",
    pnpm: "pnpm add @nextui-org/tabs",
    bun: "bun add @nextui-org/tabs"
  }}
/>

## Import

NextUI exports 2 tabs-related components:

- **Tabs**: The main component to display a tab list.
- **Tab**: The component to display a tab item. The children of this component will be displayed as the content of the tab.

<ImportTabs
  commands={{
    main: 'import {Tabs, Tab} from "@nextui-org/react";',
    individual: 'import {Tabs, Tab} from "@nextui-org/tabs";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={tabsContent.usage} />

### Dynamic

You can render tabs dynamically by using `items` prop.

<CodeDemo title="Dynamic" files={tabsContent.dynamic} />

### Disabled

<CodeDemo title="Disabled" files={tabsContent.disabled} />

### Disabled Item

<CodeDemo title="Disabled Item" files={tabsContent.disabledItem} />

### Sizes

<CodeDemo title="Sizes" files={tabsContent.sizes} />

### Radius

<CodeDemo title="Radius" files={tabsContent.radius} />

### Colors

<CodeDemo title="Colors" files={tabsContent.colors} />

### Variants

<CodeDemo title="Variants" files={tabsContent.variants} />

### With Icons

<CodeDemo title="With Icons" files={tabsContent.icons} />

### Controlled

You can use the `onSelectionChange` and `selectedKey` props to control the selected tab.

<CodeDemo title="Controlled" files={tabsContent.controlled} />

### Placement

You can change the position of the tabs by using the `placement` prop. The default value is `top`.

<CodeDemo title="Placement" files={tabsContent.placement} />

### Vertical

Change the orientation of the tabs it will invalidate the placement prop when the value is `true`.

<CodeDemo title="Vertical" files={tabsContent.vertical} />

### Links

Tabs items can be rendered as links by passing the `href` prop to the `Tab` component. By
default, links perform native browser navigation. However, you'll usually want to synchronize
the selected tab with the current URL from your client side router. You can do this by doing
the following:

1. Set up your router at the root of your app. See [Routing guide](/docs/guide/routing) to learn how to do this.
2. Use the `selectedKey` prop to set the selected tab based on the current URL.

#### Next.js

This example uses [Next.js App router](https://nextjs.org/docs/app/api-reference/functions/use-pathname) to
set up routes for each tab and synchronize the selected tab with the current URL.

```tsx
// app/tabs/page.tsx
"use client";

import {usePathname} from "next/navigation";

function ExampleClientRouterWithTabs() {
  const pathname = usePathname();

  return (
    <Tabs aria-label="Options" selectedKey={pathname}>
      <Tab key="photos" title="Photos" href="/photos">
        <Card>
          <CardBody>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
          </CardBody>
        </Card>
      </Tab>
      <Tab key="music" title="Music" href="/music">
        <Card>
          <CardBody>
            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
            commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum
            dolore eu fugiat nulla pariatur.
          </CardBody>
        </Card>
      </Tab>
      <Tab key="videos" title="Videos" href="/videos">
        <Card>
          <CardBody>
            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
            mollit anim id est laborum.
          </CardBody>
        </Card>
      </Tab>
    </Tabs>
  );
}
```

#### React Router

This example uses [React Router](https://reactrouter.com/en/main) to setup routes for each tab and synchronize the selection with the URL.

```tsx
import {Route, Routes, useLocation} from "react-router-dom";
import {Tabs, Tab} from "@nextui-org/react";

function AppTabs() {
  const {pathname} = useLocation();

  return (
    <div className="flex flex-col gap-2">
      <Tabs selectedKey={pathname} aria-label="Tabs">
        <Tab id="/" href="/" title="Home" />
        <Tab id="/photos" href="/photos" title="Photos" />
        <Tab id="/music" href="/music" title="Music" />
        <Tab id="/videos" href="/videos" title="Videos" />
      </Tabs>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/photos" element={<PhotosPage />} />
        <Route path="/music" element={<MusicPage />} />
        <Route path="/videos" element={<VideosPage />} />
      </Routes>
    </div>
  );
}
```

> **Note**: See the [Routing guide](/docs/guide/routing) to learn how to set up the router for your framework.

### With Form

<CodeDemo title="With Form" files={tabsContent.form} />

## Slots

- **base**: The main tabs slot, it wraps the items and the panels.
- **tabList**: The tab list slot, it wraps the tab items.
- **tab**: The tab slot, it wraps the tab item.
- **tabContent**: The tab content slot, it wraps the tab content.
- **cursor**: The cursor slot, it wraps the cursor. This is only visible when `disableAnimation=false`
- **panel**: The panel slot, it wraps the tab panel (content).

### Custom Styles

You can customize the `Tabs` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={tabsContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Tab` has the following attributes on the `base` element:

- **data-selected**:
  When the tab is selected.
- **data-disabled**:
  When the tab is disabled.
- **data-hover**:
  When the tab is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).
- **data-hover-selected**:
  When the tab is being hovered and is not selected. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html) and `selected` state.
- **data-focus**:
  When the tab is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the tab is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-pressed**:
  When the tab is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).

<Spacer y={4} />

## Accessibility

- Support for mouse, touch, and keyboard interactions on tabs.
- Keyboard event support for arrows keys.
- Support for disabled tabs.
- Follows the tabs ARIA pattern, semantically linking tabs and their associated tab panels.
- Focus management for tab panels without any focusable children.

<Spacer y={4} />

## API

### Tabs Props

| Attribute              | Type                                                                                                   | Description                                                                                                  | Default     |
| ---------------------- | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ----------- |
| children\*             | `ReactNode` \| `((item: T) => ReactElement)`                                                           | The list of tabs.                                                                                            | -           |
| variant                | `solid` \| `bordered` \| `light` \| `underlined`                                                       | The tabs appearance style.                                                                                   | `solid`     |
| color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                            | The tabs color theme.                                                                                        | `default`   |
| size                   | `sm` \| `md` \| `lg`                                                                                   | The tabs size.                                                                                               | `md`        |
| radius                 | `none` \| `sm` \| `md` \| `lg` \| `full`                                                               | The tabs border radius.                                                                                      | -           |
| fullWidth              | `boolean`                                                                                              | Whether the tabs should take the full width of its parent.                                                   | `false`     |
| items                  | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | The list of tabs (dynamic).                                                                                  | -           |
| disabledKeys           | `React.Key[]`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.      | -           |
| selectedKey            | `React.Key`                                                                                            | The key for the currently selected item.                                                                     | -           |
| defaultSelectedKey     | `React.Key`                                                                                            | The key for the initially selected item.                                                                     | -           |
| disallowEmptySelection | `boolean`                                                                                              | Whether the tabs should allow empty selection.                                                               | `false`     |
| shouldSelectOnPressUp  | `boolean`                                                                                              | Whether the tabs selection should occur on press up instead of press down.                                   | `true`      |
| keyboardActivation     | `automatic` \| `manual`                                                                                | Whether tabs are activated automatically on focus or manually.                                               | `automatic` |
| motionProps            | [MotionProps](#motion-props)                                                                           | The props to modify the cursor framer motion animation. Use the `variants` API to create your own animation. | -           |
| disableCursorAnimation | `boolean`                                                                                              | Whether the cursor should be hidden.                                                                         | `false`     |
| isDisabled             | `boolean`                                                                                              | Whether the tab list should be disabled.                                                                     | `false`     |
| disableAnimation       | `boolean`                                                                                              | Whether the tab list should be animated.                                                                     | `false`     |
| classNames             | `Record<"base"｜ "tabList"｜ "tab"｜ "tabContent"｜ "cursor" ｜ "panel", string>`                      | Allows to set custom class names for the card slots.                                                         | -           |
| placement            | `top` \| `bottom` \| `start` \| `end`                                                                  | The position of the tabs.                                                                                    | `top`       |
| isVertical             | `boolean`                                                                                              | Whether the tabs are vertical.                                                                               | `false`     |
| destroyInactiveTabPanel | `boolean`                     | Whether to destroy inactive tab panel when switching tabs. Inactive tab panels are inert and cannot be interacted with.                                                          | `true`  |

### Tabs Events

| Attribute         | Type                      | Description                                        |
| ----------------- | ------------------------- | -------------------------------------------------- |
| onSelectionChange | `(key: React.Key) => any` | Handler that is called when the selection changes. |

### Tab Props

| Attribute               | Type                          | Description                                                                                                                                                                      | Default |
|-------------------------|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------|
| children\*              | `ReactNode`                   | The content of the tab.                                                                                                                                                          | -       |
| title                   | `ReactNode`                   | The title of the tab.                                                                                                                                                            | -       |
| titleValue              | `string`                      | A string representation of the item's contents. Use this when the `title` is not readable.                                                                                       | -       |
| href                    | `string`                      | A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).                                                                                   | -       |
| target                  | `HTMLAttributeAnchorTarget`   | The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).                                                                   | -       |
| rel                     | `string`                      | The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).                                  | -       |
| download                | `boolean` \| `string`         | Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download). | -       |
| ping                    | `string`                      | A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).                                   | -       |
| referrerPolicy          | `HTMLAttributeReferrerPolicy` | How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).                                 | -       |
| shouldSelectOnPressUp   | `boolean`                     | Whether the tab selection should occur on press up instead of press down.                                                                                                        | -       |

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```

---
title: "Textarea"
description: "Textarea component is a multi-line Input which allows you to write large texts."
---

import {textareaContent} from "@/content/components/textarea";

# Textarea

Textarea component is a multi-line Input which allows you to write large texts.

<ComponentLinks component="input" storybook="textarea" reactAriaHook="useTextField" />

---

## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add input",
    npm: "npm install @nextui-org/input",
    yarn: "yarn add @nextui-org/input",
    pnpm: "pnpm add @nextui-org/input",
    bun: "bun add @nextui-org/input",
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Textarea} from "@nextui-org/react";',
    individual: 'import {Textarea} from "@nextui-org/input";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={textareaContent.usage} />

### Disabled

<CodeDemo title="Disabled" files={textareaContent.disabled} />

### Read Only

<CodeDemo title="Readonly" files={textareaContent.readonly} />

### Required

If you pass the `isRequired` property to the input, it will have a `danger` asterisk at
the end of the label and the textarea will be required.

<CodeDemo title="Required" files={textareaContent.required} />

### Autosize

Textarea grows automatically based on the content, but you can also set a min and max height to
it using the `minRows` and `maxRows` properties. It is based on [react-textarea-autosize](https://github.com/Andarist/react-textarea-autosize).

<CodeDemo title="Autosize" files={textareaContent.autosize} />

### Without Autosize

In case you want to disable the autosize feature, you can use the `disableAutosize` property.

<CodeDemo title="Without Autosize" files={textareaContent.disableAutosize} />

### Variants

<CodeDemo title="Variants" files={textareaContent.variants} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid textarea.

<CodeDemo title="With Error Message" files={textareaContent.errorMessage} />

### Description

<CodeDemo title="Description" files={textareaContent.description} />

### Controlled

You can use the `value` and `onValueChange` properties to control the input value.

<CodeDemo title="Controlled" files={textareaContent.controlled} />

> **Note**: NextUI `Textarea` also supports native events like `onChange`, useful for form libraries
> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the textarea, it is the one that is displayed above, inside or left of the textarea.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The textarea input element.
- **description**: The description of the textarea.
- **errorMessage**: The error message of the textarea.

<Spacer y={4} />

## Data Attributes

`Textarea` has the following attributes on the `base` element:

- **data-invalid**:
  When the textarea is invalid. Based on `isInvalid` prop.
- **data-required**:
  When the textarea is required. Based on `isRequired` prop.
- **data-readonly**:
  When the textarea is readonly. Based on `isReadOnly` prop.
- **data-hover**:
  When the textarea is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)
- **data-focus**:
  When the textarea is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-focus-visible**:
  When the textarea is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).
- **data-disabled**:
  When the textarea is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Built with a native `<input>` element.
- Visual and ARIA labeling support.
- Change, clipboard, composition, selection, and input event support.
- Required and invalid states exposed to assistive technology via ARIA.
- Support for description and error message help text linked to the input via ARIA.

<Spacer y={4} />

## API

### Textarea Props

| Attribute          | Type                                                                                                               | Description                                                                                                                                                                                                                                             | Default   |
| ------------------ | ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
| children           | `ReactNode`                                                                                                        | The content of the textarea.                                                                                                                                                                                                                            | -         |
| minRows            | `number`                                                                                                           | The minimum number of rows to display.                                                                                                                                                                                                                  | `3`       |
| maxRows            | `number`                                                                                                           | Maximum number of rows up to which the textarea can grow.                                                                                                                                                                                               | `8`       |
| cacheMeasurements  | `boolean`                                                                                                          | Reuse previously computed measurements when computing height of textarea.                                                                                                                                                                               | `false`   |
| variant            | `flat` \| `bordered` \| `faded` \| `underlined`                                                                    | The variant of the textarea.                                                                                                                                                                                                                            | `flat`    |
| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                        | The color of the textarea.                                                                                                                                                                                                                              | `default` |
| size               | `sm`\|`md`\|`lg`                                                                                                   | The size of the textarea.                                                                                                                                                                                                                               | `md`      |
| radius             | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                           | The radius of the textarea.                                                                                                                                                                                                                             | -         |
| label              | `ReactNode`                                                                                                        | The content to display as the label.                                                                                                                                                                                                                    | -         |
| value              | `string`                                                                                                           | The current value of the textarea (controlled).                                                                                                                                                                                                         | -         |
| defaultValue       | `string`                                                                                                           | The default value of the textarea (uncontrolled).                                                                                                                                                                                                       | -         |
| placeholder        | `string`                                                                                                           | The placeholder of the textarea.                                                                                                                                                                                                                        | -         |
| startContent       | `ReactNode`                                                                                                        | Element to be rendered in the left side of the input.                                                                                                                                                                                                   | -         |
| endContent         | `ReactNode`                                                                                                        | Element to be rendered in the right side of the input.                                                                                                                                                                                                  | -         |
| description        | `ReactNode`                                                                                                        | A description for the textarea. Provides a hint such as specific requirements for what to choose.                                                                                                                                                       | -         |
| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                              | An error message for the textarea.                                                                                                                                                                                                                      | -         |
| validate           | `(value: string) => ValidationError ｜ true ｜ null ｜ undefined`                                                  | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop. | -         |
| validationBehavior | `native` \| `aria`                                                                                                 | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.                                                                                          | `aria`    |
| labelPlacement     | `inside` \| `outside` \| `outside-left`                                                                            | The position of the label.                                                                                                                                                                                                                              | `inside`  |
| fullWidth          | `boolean`                                                                                                          | Whether the textarea should take up the width of its parent.                                                                                                                                                                                            | `true`    |
| isRequired         | `boolean`                                                                                                          | Whether user input is required on the textarea before form submission.                                                                                                                                                                                  | `false`   |
| isReadOnly         | `boolean`                                                                                                          | Whether the textarea can be selected but not changed by the user.                                                                                                                                                                                       |           |
| isDisabled         | `boolean`                                                                                                          | Whether the textarea is disabled.                                                                                                                                                                                                                       | `false`   |
| isInvalid          | `boolean`                                                                                                          | Whether the textarea is invalid.                                                                                                                                                                                                                        | `false`   |
| validationState    | `valid` \| `invalid`                                                                                               | Whether the textarea should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                                                                                                                | -         |
| disableAutosize    | `boolean`                                                                                                          | Whether the textarea auto vertically resize should be disabled.                                                                                                                                                                                         | `false`   |
| disableAnimation   | `boolean`                                                                                                          | Whether the textarea should be animated.                                                                                                                                                                                                                | `false`   |
| classNames         | `Record<"base"｜ "label"｜ "inputWrapper"｜ "innerWrapper" ｜ "input" ｜ "description" ｜ "errorMessage", string>` | Allows to set custom class names for the checkbox slots.                                                                                                                                                                                                | -         |

### Input Events

| Attribute      | Type                                                    | Description                                                                                                                         |
| -------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |
| onChange       | `React.ChangeEvent <HTMLInputElement>`                  | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |
| onValueChange  | `(value: string) => void`                               | Handler that is called when the element's value changes.                                                                            |
| onClear        | `() => void`                                            | Handler that is called when the clear button is clicked.                                                                            |
| onHeightChange | `(height: number, meta: { rowHeight: number }) => void` | Handler that is called when the height of the textarea changes.                                                                     |

---
title: "Time Input"
description: "A time input allows users to enter and edit time values using a keyboard. Each part of a time value is displayed in an individually editable segment."
---

import {timeInputContent} from "@/content/components/time-input";

# Time Input

The `TimeInput` component consists of a label, and a group of segments representing each unit of a time (e.g. hours, minutes, and seconds). Each segment is individually focusable and editable by the user, by typing or using the arrow keys to increment and decrement the value. This approach allows values to be formatted and parsed correctly regardless of the locale or time format, and offers an easy and error-free way to edit times using the keyboard.

<ComponentLinks component="date-input" storybook="timeinput" reactAriaHook="useTimeField" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add date-input",
    npm: "npm install @nextui-org/date-input",
    yarn: "yarn add @nextui-org/date-input",
    pnpm: "pnpm add @nextui-org/date-input",
    bun: "bun add @nextui-org/date-input"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {TimeInput} from "@nextui-org/react";',
    individual: 'import {TimeInput} from "@nextui-org/date-input";',
  }}
/>

## Usage

A `TimeInput` displays a placeholder by default. An initial, uncontrolled value can be provided to the TimeField using the defaultValue prop. Alternatively, a controlled value can be provided using the value prop.

Time values are provided using objects in the `@internationalized/date` package. This library handles correct international date and time manipulation across calendars, time zones, and other localization concerns.

`TimeInput` only supports selecting times, but values with date components are also accepted. By default, `TimeInput` will emit `Time` objects in the onChange event, but if a `CalendarDateTime` or `ZonedDateTime` object is passed as the `value` or `defaultValue`, values of that type will be emitted, changing only the time and preserving the date components.

<CodeDemo title="Usage" files={timeInputContent.usage} />

### Required

`TimeInput` supports the `isRequired` prop to ensure the user enters a value, as well as minimum and maximum values, and custom client and server-side validation.

<CodeDemo title="Required" files={timeInputContent.required} />

### Disabled

The `isDisabled` boolean prop makes `TimeInput` disabled. Inputs cannot be focused or selected.

<CodeDemo title="Disabled" files={timeInputContent.disabled} />

### Read Only

The `isReadOnly` boolean prop makes `TimeInput`'s value immutable. Unlike `isDisabled`, `TimeInput` remains focusable.

<CodeDemo title="Readonly" files={timeInputContent.readonly} />

### Without Label

`TimeInput` supports the `label` prop to show or not show the label.

<CodeDemo title="Without Label" files={timeInputContent.withoutLabel} />

### With Description

A description for the field. Provides a hint such as specific requirements for what to choose.

<CodeDemo title="With Description" files={timeInputContent.withDescription} />

### With Error Message

You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.

<CodeDemo title="With Error Message" files={timeInputContent.errorMessage} />

You can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult]((https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51)).

<CodeDemo title="With Error Message Function" files={timeInputContent.errorMessageFunction} />


### Label Placement

The label's overall position relative to the element it is labeling.

<CodeDemo title="Label Placement" files={timeInputContent.labelPlacement} />

### Start Content

If you want to display some content before the time inputs, you can set the `startContent` property.

<CodeDemo title="Start Content" files={timeInputContent.startContent} />

### End Content

If you want to display some content after the time inputs, you can set the `endContent` property.

<CodeDemo title="End Content" files={timeInputContent.endContent} />

### Controlled

An initial, uncontrolled value can be provided to the `TimeInput` using the `defaultValue` prop. A controlled value can be provided using the `value` prop.

<CodeDemo title="Controlled" files={timeInputContent.controlled} />

### Time Zones

`TimeInput` is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.

In most cases, your data will come from and be sent to a server as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string. [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into ZonedDateTime objects. Which format you use will depend on what information you need to store.

- `parseZonedDateTime` – This function parses a date with an explicit time zone and optional UTC offset attached (e.g. `2021-11-07T00:45[America/Los_Angeles]` or `2021-11-07T00:45-07:00[America/Los_Angeles]`). This format preserves the maximum amount of information. If the exact local time and time zone that a user selected is important, use this format. Storing the time zone and offset that was selected rather than converting to UTC ensures that the local time is correct regardless of daylight saving rule changes (e.g. if a locale abolishes DST). Examples where this applies include calendar events, reminders, and other times that occur in a particular location.
- `parseAbsolute` – This function parses an absolute date and time that occurs at the same instant at all locations on Earth. It can be represented in UTC (e.g. `2021-11-07T07:45:00Z`), or stored with a particular offset (e.g. `2021-11-07T07:45:00-07:00`). A time zone identifier, e.g. America/Los_Angeles, must be passed, and the result will be converted into that time zone. Absolute times are the best way to represent events that occurred in the past, or future events where an exact time is needed, regardless of time zone.
- `parseAbsoluteToLocal` – This function parses an absolute date and time into the current user's local time zone. It is a shortcut for parseAbsolute, and accepts the same formats.

<CodeDemo title="Time Zones" files={timeInputContent.timezones} />

### Granularity

The `granularity` prop allows you to control the smallest unit that is displayed by TimeInput. By default, times are displayed with "minute" granularity. More granular time values can be displayed by setting the granularity prop to "second".

<CodeDemo title="Granularity" files={timeInputContent.granularity} />

### Min Time Value

The `minValue` prop allows you to validate time value before a certain time.

<CodeDemo title="Min Time Value" files={timeInputContent.minTimeValue} />

### Max Time Value

The `maxValue` prop allows you to validate time value before a certain time.

<CodeDemo title="Max Time Value" files={timeInputContent.maxTimeValue} />

### Placeholder Value

When no value is set, a placeholder is shown. The format of the placeholder is influenced by the `granularity` and `placeholderValue` props. placeholderValue also controls the default values of each segment when the user first interacts with them, e.g. using the up and down arrow keys. By default, the placeholderValue is midnight, but you can set it to a more appropriate value if needed.

<CodeDemo title="Placeholder Value" files={timeInputContent.placeholderValue} />

### Hide Time Zone

When a `ZonedDateTime` object is provided as the value to `TimeInput`, the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the `hideTimeZone` option.

<CodeDemo title="Hide Time Zone" files={timeInputContent.hideTimeZone} />

### Hour Cycle

By default, `TimeInput` displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. This example forces `TimeInput` to use 24-hour time, regardless of the locale.

<CodeDemo title="Hour Cycle" files={timeInputContent.hourCycle} />

## Slots

- **base**: Input wrapper, it handles alignment, placement, and general appearance.
- **label**: Label of the time input, it is the one that is displayed above, inside or left of the time input.
- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
- **input**: The time input element.
- **innerWrapper**: Wraps the segments, the `startContent` and the `endContent`.
- **segment**: The segment of input elements.
- **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.
- **description**: The description of the time input.
- **errorMessage**: The error message of the time input.

<Spacer y={4} />

## Data Attributes

`TimeInput` has the following attributes on the `base` element:

- **data-has-helper**:
  When the time input has description or error message. Based on `description` or `errorMessage` props.
- **data-required**:
  When the time input is required. Based on `isRequired` prop.
- **data-disabled**:
  When the time input is disabled. Based on `isDisabled` prop.
- **data-readonly**:
  When the time input is readonly. Based on `isReadOnly` prop.
- **data-invalid**:
  When the time input is invalid. Based on `isInvalid` prop.
- **data-has-start-content**:
  When the time input has start content. Based on `startContent` prop.
- **data-has-end-content**:
  When the time input has end content. Based on `endContent` prop.

<Spacer y={4} />

## Accessibility

- Support for locale-specific formatting, number systems, hour cycles, and right-to-left layout.
- Times can optionally include a time zone. All modifications follow time zone rules such as daylight saving time.
- Each time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit times using the keyboard, in any format and locale.
- Time segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.

<Spacer y={4} />

## API

### TimeInput Props

| Attribute               | Type                                                                                                                                               | Description                                                                                                                                                        | Default   |
| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- |
| label                   | `ReactNode`                                                                                                                                        | The content to display as the label.                                                                                                                               | -         |
| name                    | `string`                                                                                                                                           | The name of the time input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname). | -         |
| value                   | `TimeValue \|  null`                                                                                                                               | The current value (controlled).                                                                                                                                    | -         |
| defaultValue            | `TimeValue \|  null`                                                                                                                               | The default value (uncontrolled).                                                                                                                                  | -         |
| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                    | The variant of the time input.                                                                                                                                     | `flat`    |
| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                        | The color of the time input.                                                                                                                                       | `default` |
| size                    | `sm` \| `md` \| `lg`                                                                                                                               | The size of the time input.                                                                                                                                        | `md`      |
| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                           | The radius of the time input.                                                                                                                                      | -         |
| hourCycle               | `12 \| 24`                                                                                                                                         | Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.                                                          | -         |
| granularity             | `'hour' \| 'minute' \| 'second'`                                                                                                                   | Determines the smallest unit that is displayed in the time picker.                                                                                                 | `minute`  |
| hideTimeZone            | `boolean`                                                                                                                                          | Whether to hide the time zone abbreviation.                                                                                                                        | -         |
| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                                            | The position of the label.                                                                                                                                         | `inside`  |
| shouldForceLeadingZeros | `boolean`                                                                                                                                          | Whether to always show leading zeros in the hour field. By default, this is determined by the user's locale.                                                       | `true`    |
| placeholderValue        | `TimeValue`                                                                                                                                        | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults to 12:00 AM or 00:00 depending on the hour cycle.       | -         |
| minValue                | `TimeValue`                                                                                                                                        | The minimum allowed time that a user may select.                                                                                                                   | -         |
| maxValue                | `TimeValue`                                                                                                                                        | The maximum allowed time that a user may select.                                                                                                                   | -         |
| isDisabled              | `boolean`                                                                                                                                          | Whether the time input is disabled.                                                                                                                                | -         |
| isReadOnly              | `boolean`                                                                                                                                          | Whether the time input can be selected but not changed by the user.                                                                                                | -         |
| isRequired              | `boolean`                                                                                                                                          | Whether user time input is required on the time input before form submission.                                                                                      | -         |
| isInvalid               | `boolean`                                                                                                                                          | Whether the time input is invalid.                                                                                                                                 | -         |
| autoFocus               | `boolean`                                                                                                                                          | Whether the element should receive focus on render.                                                                                                                | -         |
| description             | `ReactNode`                                                                                                                                        | A description for the field. Provides a hint such as specific requirements for what to choose.                                                                     | -         |
| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                  | An error message for the field.                                                                                                                                    | -         |
| validate                | `(value: MappedTimeValue<TimeValue>) => ValidationError ｜ true ｜ null ｜ undefined`                                                               | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -         |
| validationBehavior      | `native` \| `aria`                                                                                                                                 | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.     | `aria`    |
| disableAnimation        | `boolean`                                                                                                                                          | Whether to disable the animation of the time input.                                                                                                                | -         |
| classNames              | `Record<"base"｜ "label"｜ "inputWrapper"｜ "innerWrapper" ｜ "segment" ｜ "helperWrapper" ｜ "input" ｜ "description" ｜ "errorMessage", string>` | Allows to set custom class names for the time input slots.                                                                                                           | -         |

### TimeInput Events

| Attribute     | Type                                          | Description                                                     |
| ------------- | --------------------------------------------- | --------------------------------------------------------------- |
| onFocus       | `(e: FocusEvent<Target>) => void`             | Handler that is called when the element receives focus.         |
| onBlur        | `(e: FocusEvent<Target>) => void`             | Handler that is called when the element loses focus.            |
| onFocusChange | `(isFocused: boolean) => void`                | Handler that is called when the element's focus status changes. |
| onKeyDown     | `(e: KeyboardEvent) => void`                  | Handler that is called when a key is pressed.                   |
| onKeyUp       | `(e: KeyboardEvent) => void`                  | Handler that is called when a key is released.                  |
| onChange      | `(value: MappedTimeValue<TimeValue>) => void` | Handler that is called when the value changes.                  |

---
title: "Tooltip"
description: "Tooltips display a brief, informative message that appears when a user interacts with an element."
---

import {tooltipContent} from "@/content/components/tooltip";

# Tooltip

Tooltips display a brief, informative message that appears when a user interacts with an element.

<ComponentLinks component="tooltip" styles="popover" reactAriaHook="useTooltipTrigger" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add tooltip",
    npm: "npm install @nextui-org/tooltip",
    yarn: "yarn add @nextui-org/tooltip",
    pnpm: "pnpm add @nextui-org/tooltip",
    bun: "bun add @nextui-org/tooltip"
  }}
/>

## Import

<ImportTabs
  commands={{
    main: 'import {Tooltip} from "@nextui-org/react";',
    individual: 'import {Tooltip} from "@nextui-org/tooltip";',
  }}
/>

> For individual installation, please note that you should add `./node_modules/@nextui-org/theme/dist/components/popover.js` to your `tailwind.config.js` file instead since tooltip reuses popover styles.

## Usage

<CodeDemo title="Usage" files={tooltipContent.usage} />

### With Arrow

<CodeDemo title="With Arrow" files={tooltipContent.arrow} />

### Colors

<CodeDemo title="Colors" files={tooltipContent.colors} />

### Placements

<CodeDemo title="Placements" files={tooltipContent.placements} />

### Offset

<CodeDemo title="Offset" files={tooltipContent.offset} />

### Controlled

<CodeDemo title="Controlled" files={tooltipContent.controlled} />

### With Delay

You can control the `open` and `close` delay of the tooltip with `delay` and `closeDelay` props.

<CodeDemo title="With Delay" files={tooltipContent.delay} />

Hovering over the second button shows the tooltip immediately. If you wait for a delay before hovering
another element, the delay restarts.

<CodeDemo title="With Delay Multiple" files={tooltipContent.delayMultiple} />

### Custom Content

<CodeDemo title="Custom Content" files={tooltipContent.customContent} />

### Custom Motion

Tooltip offers a `motionProps` property to customize the `enter` / `exit` animation.

<CodeDemo title="Custom Motion" files={tooltipContent.customMotion} />

> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).

## Slots

- **base**: The main tooltip slot, it wraps the tooltip content.
- **arrow**: The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. `data-[placement=top]:...`.

### Custom Styles

You can customize the `Tooltip` component by passing custom Tailwind CSS classes to the component slots.

<CodeDemo title="Custom Styles" files={tooltipContent.customStyles} />

<Spacer y={4} />

## Data Attributes

`Tooltip` has the following attributes on the `base` element:

- **data-open**:
  When the tooltip is open. Based on tooltip state.
- **data-placement**:
  The placement of the tooltip. Based on `placement` prop. The arrow element is positioned based on this attribute.
- **data-disabled**:
  When the tooltip is disabled. Based on `isDisabled` prop.

<Spacer y={4} />

## Accessibility

- Keyboard focus management and cross browser normalization.
- Hover management and cross browser normalization.
- Labeling support for screen readers (aria-describedby).
- Exposed as a tooltip to assistive technology via ARIA.
- Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.

<Spacer y={4} />

## API

### Tooltip Props

| Attribute                 | Type                                                                        | Description                                                                                                  | Default         |
| ------------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ | --------------- |
| children\*                | `ReactNode[]`                                                               | The children to render. Usually a trigger element.                                                           | -               |
| content                   | `ReactNode`                                                                 | The content to render inside the tooltip.                                                                    | -               |
| size                      | `sm` \| `md` \| `lg`                                                        | The tooltip size. This change the `content` font size.                                                       | `md`            |
| color                     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The tooltip color theme.                                                                                     | `default`       |
| radius                    | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The tooltip border radius.                                                                                   | `md`            |
| shadow                    | `none` \| `sm` \| `md` \| `lg`                                              | The tooltip shadow.                                                                                          | `sm`            |
| placement                 | [TooltipPlacement](#tooltip-placement)                                      | The placement of the tooltip relative to its trigger reference.                                              | `top`           |
| delay                     | `number`                                                                    | The delay in milliseconds before the tooltip opens.                                                          | `0`           |
| closeDelay                | `number`                                                                    | The delay in milliseconds before the tooltip closes.                                                         | `500`             |
| isOpen                    | `boolean`                                                                   | Whether the tooltip is open by default (controlled).                                                         | -               |
| defaultOpen               | `boolean`                                                                   | Whether the tooltip is open by default (uncontrolled).                                                       | -               |
| offset(px)                | `number`                                                                    | The distance or margin between the reference and popper. It is used internally to create an offset modifier. | `7`             |
| containerPadding(px)      | `number`                                                                    | The placement padding that should be applied between the element and its surrounding container.              | `12`            |
| crossOffset(px)           | `number`                                                                    | The additional offset applied along the cross axis between the element and its anchor element.               | `0`             |
| showArrow                 | `boolean`                                                                   | Whether the tooltip should have an arrow.                                                                    | `false`         |
| shouldFlip                | `boolean`                                                                   | Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.      | `true`          |
| triggerScaleOnOpen        | `boolean`                                                                   | Whether the trigger should scale down when the tooltip is open.                                              | `true`          |
| shouldBlockScroll         | `boolean`                                                                   | Whether to block scrolling outside the tooltip.                                                              | `true`          |
| isKeyboardDismissDisabled | `boolean`                                                                   | Whether pressing the escape key to close the tooltip should be disabled.                                     | `false`         |
| isDismissable             | `boolean`                                                                   | Whether to close the overlay when the user interacts outside it.                                             | `false`         |
| shouldCloseOnBlur         | `boolean`                                                                   | Whether the tooltip should close when focus is lost or moves outside it.                                     | `true`          |
| motionProps               | [MotionProps](#motion-props)                                                | The props to modify the framer motion animation. Use the `variants` API to create your own animation.        | -               |
| portalContainer           | `HTMLElement`                                                               | The container element in which the overlay portal will be placed.                                            | `document.body` |
| updatePositionDeps        | `any[]`                                                                     | The dependencies to force the tooltip position update.                                                       | `[]`            |
| isDisabled                | `boolean`                                                                   | Whether the tooltip is disabled.                                                                             | `false`         |
| disableAnimation          | `boolean`                                                                   | Whether the tooltip is animated.                                                                             | `false`         |
| classNames                | `Record<"base"｜"content", string>`                                           | Allows to set custom class names for the tooltip slots.                                                      | -               |

<Spacer y={1} />

### Tooltip Events

| Attribute                    | Type                        | Description                                                                                                                                                                                                                                                                                               |
| ---------------------------- | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| onOpenChange                 | `(isOpen: boolean) => void` | Handler that is called when the tooltip's open state changes.                                                                                                                                                                                                                                             |
| shouldCloseOnInteractOutside | `(e: HTMLElement) => void`  | When user interacts with the argument element outside of the tooltip ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip. By default, onClose will always be called on interaction outside the overlay ref. |
| onClose                      | `() => void`                | Handler that is called when the tooltip should close.                                                                                                                                                                                                                                                     |

<Spacer y={2} />

### Tooltip types

<Spacer y={1} />

#### Tooltip Placement

```ts
type TooltipPlacement =
  | "top"
  | "bottom"
  | "right"
  | "left"
  | "top-start"
  | "top-end"
  | "bottom-start"
  | "bottom-end"
  | "left-start"
  | "left-end"
  | "right-start"
  | "right-end";
```

#### Motion Props

```ts
export type MotionProps = HTMLMotionProps<"div">; // @see https://www.framer.com/motion/
```

---
title: "User"
description: "Display user information with avatar and name."
---

import {userContent} from "@/content/components/user";

# User

Display user information with avatar and name.

<ComponentLinks component="user" />

---



## Installation

<PackageManagers
  showGlobalInstallWarning
  commands={{
    cli: "npx nextui-cli@latest add user",
    npm: "npm install @nextui-org/user",
    yarn: "yarn add @nextui-org/user",
    pnpm: "pnpm add @nextui-org/user",
    bun: "bun add @nextui-org/user"
  }}
/>


## Import

<ImportTabs
  commands={{
    main: 'import {User} from "@nextui-org/react";',
    individual: 'import {User} from "@nextui-org/user";',
  }}
/>

## Usage

<CodeDemo title="Usage" files={userContent.usage} />

> **Note**: See the [Avatar](/docs/components/avatar) component for more details about `avatarProps`.

### Link Description

<CodeDemo title="Link Description" files={userContent.linkDescription} />

## Slots

- **base**: The base slot of the user, it is the main container.
- **wrapper**: The name and description wrapper.
- **name**: The name of the user.
- **description**: The description of the user.

<Spacer y={4}/>  

## Data Attributes

`User` has the following attributes on the `root` element only when `isFocusable` is `true`:

- **data-focus**:
  When the user is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)
- **data-focus-visible**:
  When the user is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html)

<Spacer y={4}/>  

## API

### User Props

| Attribute   | Type                                                          | Description                                                                                | Default |
| ----------- | ------------------------------------------------------------- | ------------------------------------------------------------------------------------------ | ------- |
| name        | `string`                                                      | The name of the user.                                                                      | -       |
| description | `ReactNode`                                                   | The description component.                                                                 | -       |
| isFocusable | `boolean`                                                     | Whether the user is focusable. This is useful when using `Dropdown` or similar components. | `false` |
| avatarProps | [AvatarProps](/docs/components/avatar#avatar-props)           | The avatar component props. The `name` is passed by default.                               | -       |
| classNames  | `Record<"base"｜ "wrapper"｜ "name"｜ "description", string>` | Allows to set custom class names for the user slots.                                       | -       |

---
title: Colors
description: Learn how to configure and customize colors with NextUI.
---

# Colors

NextUI's plugin enables you to personalize the semantic colors of the theme such as `primary`,
`secondary`, `success`, etc.

```js {7,11}
module.exports = {
  plugins: [
    nextui({
      themes: {
        light: {
          // ...
          colors: {},
        },
        dark: {
          // ...
          colors: {},
        },
        // ... custom themes
      },
    }),
  ],
};
```



> **Note**: Colors configurations apply globally across all components.

## Default Colors

NextUI offers a default color palette right out of the box, perfect for when you're 
still undecided about your specific branding colors.

These colors are split into [Common Colors](#common-colors) and [Semantic Colors](#semantic-colors).

- [Common Colors](#common-colors): Consistent across themes.
- [Semantic Colors](#semantic-colors): Adjust according to the chosen theme.

### Common Colors

Common colors, like [TailwindCSS](https://tailwindcss.com/docs/customizing-colors) colors, 
remain consistent regardless of the theme. 

To prevent conflicts with TailwindCSS colors, common colors are initially disabled but can 
be activated with the `addCommonColors` option.

```js {4}
module.exports = {
  plugins: [
    nextui({
      addCommonColors: true,
    }),
  ],
};
```

Enabling this option supplements some TailwindCSS default colors with the following:

```js
module.exports = {
  theme: {
    extend: {
      colors: {
        white: "#FFFFFF",
        black: "#000000",
        blue: {
          50: "#e6f1fe",
          100: "#cce3fd",
          200: "#99c7fb",
          300: "#66aaf9",
          400: "#338ef7",
          500: "#006FEE",
          600: "#005bc4",
          700: "#004493",
          800: "#002e62",
          900: "#001731",
        },
        // .. rest of the colors
      },
    },
  },
};
```

<CommonColors />

### Semantic Colors

Semantic colors adapt with the theme, delivering meaning and reinforcing your brand identity.

For an effective palette, we recommend using color ranges from `50` to `900`. You can use tools like [Eva Design System](https://colors.eva.design/),
[Smart Watch](https://smart-swatch.netlify.app/), [Palette](https://palettte.app/) or [Color Box](https://colorbox.io/) to generate your palette.

> Semantic colors should be placed inside the `nextui` plugin options, not inside the TailwindCSS theme object.

```js {7-13,19-25,33-37}
module.exports = {
  plugins: [
    nextui({
      themes: {
        light: {
          colors: {
            background: "#FFFFFF", // or DEFAULT
            foreground: "#11181C", // or 50 to 900 DEFAULT
            primary: {
              //... 50 to 900
              foreground: "#FFFFFF",
              DEFAULT: "#006FEE",
            },
            // ... rest of the colors
          },
        },
        dark: {
          colors: {
            background: "#000000", // or DEFAULT
            foreground: "#ECEDEE", // or 50 to 900 DEFAULT
            primary: {
              //... 50 to 900
              foreground: "#FFFFFF",
              DEFAULT: "#006FEE",
            },
          },
          // ... rest of the colors
        },
        mytheme: {
          // custom theme
          extend: "dark",
          colors: {
            primary: {
              DEFAULT: "#BEF264",
              foreground: "#000000",
            },
            focus: "#BEF264",
          },
        },
      },
    }),
  ],
};
```

<Blockquote className="flex items-center gap-2">
  Change the docs theme to see the semantic colors in action.
  <ThemeSwitch />
</Blockquote>

<SemanticColors />

### Using Semantic Colors

Semantic colors can be applied anywhere in your project where colors are used, such as 
text color, border color, background color utilities, and more.

```html
<div class="bg-primary-500 text-primary-50 rounded-small px-2 py-1">
  This is a primary color box
</div>
```

<Spacer y={4} />

import semanticColorsExample from "@/content/customization/colors/semantic-colors";

<CodeDemo title="Semantic Colors Example" showEditor={false} files={semanticColorsExample} />

### Javascript Variables

Import semantic and common colors into your JavaScript files as follows:

```js
import {commonColors, semanticColors} from "@nextui-org/theme";

console.log(commonColors.white); // #FFFFFF
console.log(commonColors.blue[500]); // #006FEE

console.log(semanticColors.dark.warning.DEFAULT); // #FFC107
console.log(semanticColors.light.primary.DEFAULT); // #006FEE
```

### CSS Variables

NextUI creates CSS variables using the format `--prefix-colorname-shade` for each semantic color. By
default the prefix is `nextui`, but you can change it with the `prefix` option.

```js {4}
module.exports = {
  plugins: [
    nextui({
      prefix: "myapp",
    }),
  ],
};
```

Then you can use the CSS variables in your CSS files.

```css
/* With default prefix */
.my-component {
  background-color: hsl(var(--nextui-primary-500));
}
/*  With custom prefix */
.my-component {
  background-color: hsl(var(--myapp-primary-500));
}
```

---
title: Create theme
description: NextUI provides a simple way to create new themes.
---

# Create theme

You can create a new theme based on the default ones. Let's say you need a `purple-dark` theme. You can
create it by adding the following code to your `tailwind.config.js` file.

We recommend adding a palette that ranges from `50` to `900`. You can use tools like [Eva Design System](https://colors.eva.design/),
[Smart Watch](https://smart-swatch.netlify.app/), [Palette](https://palettte.app/) or [Color Box](https://colorbox.io/) to generate your palette.



### Add the new theme to the plugin

```js {9-43}
// tailwind.config.js
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    nextui({
      themes: {
        "purple-dark": {
          extend: "dark", // <- inherit default values from dark theme
          colors: {
            background: "#0D001A",
            foreground: "#ffffff",
            primary: {
              50: "#3B096C",
              100: "#520F83",
              200: "#7318A2",
              300: "#9823C2",
              400: "#c031e2",
              500: "#DD62ED",
              600: "#F182F6",
              700: "#FCADF9",
              800: "#FDD5F9",
              900: "#FEECFE",
              DEFAULT: "#DD62ED",
              foreground: "#ffffff",
            },
            focus: "#F182F6",
          },
          layout: {
            disabledOpacity: "0.3",
            radius: {
              small: "4px",
              medium: "6px",
              large: "8px",
            },
            borderWidth: {
              small: "1px",
              medium: "2px",
              large: "3px",
            },
          },
        },
      },
    }),
  ],
};
```

### Apply the new theme

Now, applying the new theme is as simple as adding the theme name `purple-dark` to the `className` of the
`html` / `body` or `main` element.

```jsx {11}
// main.tsx or main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import {NextUIProvider} from "@nextui-org/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <NextUIProvider>
      <main className="purple-dark text-foreground bg-background">
        <App />
      </main>
    </NextUIProvider>
  </React.StrictMode>,
);
```

### Use the new theme

All components that use the `primary` color will be affected by this change.

```jsx
import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex flex-wrap gap-4 items-center">
      <Button color="primary" variant="solid">
        Solid
      </Button>
      <Button color="primary" variant="faded">
        Faded
      </Button>
      <Button color="primary" variant="bordered">
        Bordered
      </Button>
      <Button color="primary" variant="light">
        Light
      </Button>
      <Button color="primary" variant="flat">
        Flat
      </Button>
      <Button color="primary" variant="ghost">
        Ghost
      </Button>
      <Button color="primary" variant="shadow">
        Shadow
      </Button>
    </div>
  );
}
```

<Spacer y={4} />

import customTheme from "@/content/customization/create-theme/custom-theme";

<CodeDemo
  title="Custom theme example"
  showEditor={false}
  files={customTheme}
  className="bg-[#0D001A] text-[#FFFFFF]"
/>

---
title: Custom Variants
description: Learn how to create new variants for the NextUI components.
---

# Custom Variants

NextUI allows you to create new variants for components that better suit your project's needs.
This can be done by extending the component and its properties, and customizing the styles.



You can create or override the component `variants`, `defaultVariants` and `compoundVariants`.

> **Note**: For one-off customizations, refer to the [Override Styles](/docs/customization/override-styles) documentation.

## Creating new variants for non-slots components

The [Button](/docs/components/button) component is a non-slots component, meaning that it does not
have any slots that can be customized.

For this example, we will be using the `Button` component's styles source code as a
reference. Go [here](https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/button.ts) to view the styles source code.

> **Note**: If you are not familiar with the variants concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/variants) documentation.

<Steps>

### Extend the original component variants

To create or override variants you need to use the `extendVariants` function. This function
allows you to create a new component based on the original component, and customize its variants.

```tsx
// MyButton.tsx
import {extendVariants, Button} from "@nextui-org/react";

export const MyButton = extendVariants(Button, {
  variants: {
    // <- modify/add variants
    color: {
      olive: "text-[#000] bg-[#84cc16]",
      orange: "bg-[#ff8c00] text-[#fff]",
      violet: "bg-[#8b5cf6] text-[#fff]",
    },
    isDisabled: {
      true: "bg-[#eaeaea] text-[#000] opacity-50 cursor-not-allowed",
    },
    size: {
      xs: "px-2 min-w-12 h-6 text-tiny gap-1 rounded-small",
      md: "px-4 min-w-20 h-10 text-small gap-2 rounded-small",
      xl: "px-8 min-w-28 h-14 text-large gap-4 rounded-medium",
    },
  },
  defaultVariants: { // <- modify/add default variants
    color: "olive",
    size: "xl",
  },
  compoundVariants: [ // <- modify/add compound variants
    {
      isDisabled: true,
      color: "olive",
      class: "bg-[#84cc16]/80 opacity-100",
    },
  ],
});
```

### Use your custom component in your application

Then, you can now use your custom component in your application. Here, `MyButton` is
used with the color set to `olive` and the size set to `xl`.

```tsx
// App.tsx
import {MyButton} from "./MyButton";

const MyApp = () => {
  return (
    <MyButton color="olive" size="md">
      Press Me
    </MyButton>
  );
};
```

The new component will include the original props of the `Button` component, plus the new
variants that you have created.

import customVariantsNoSlots from "@/content/customization/custom-variants/no-slots-component";

<CodeDemo
  title="Custom Variants for non-slots components"
  showEditor={false}
  files={customVariantsNoSlots}
/>

</Steps>

## Creating new variants for slots components

It is also possible to use the `extendVariants` function to add or override variants for
components that have slots.

The [Input](/docs/components/input) component is a slots component, meaning that it has slots that can be
customized.

For this example, we will be using the `Input` component's styles source code as a
reference. Go [here](https://github.com/nextui-org/nextui/blob/feat/v2/packages/core/theme/src/components/input.ts) to view the styles source code.

> **Note**: If you are not familiar with the variants/slots concept, please refer to the [Tailwind Variants](https://www.tailwind-variants.org/docs/slots#slots-with-variants) documentation.

<Steps>

### Extend the original component variants

To create or override variants you need to use the `extendVariants` function. This function
allows you to create a new component based on the original component, and customize its variants.

```tsx
// MyInput.tsx
import {extendVariants, Input} from "@nextui-org/react";

const MyInput = extendVariants(Input, {
  variants: { // <- modify/add variants
    color: {
      stone: { // <- add a new color variant
        inputWrapper: [ // <- Input wrapper slot
          "bg-zinc-100",
          "border",
          "shadow",
          "transition-colors",
          "focus-within:bg-zinc-100",
          "data-[hover=true]:border-zinc-600",
          "data-[hover=true]:bg-zinc-100",
          "group-data-[focus=true]:border-zinc-600",
          // dark theme
          "dark:bg-zinc-900",
          "dark:border-zinc-800",
          "dark:data-[hover=true]:bg-zinc-900",
          "dark:focus-within:bg-zinc-900",
        ],
        input: [  // <- Input element slot
          "text-zinc-800",
          "placeholder:text-zinc-600",
          // dark theme
          "dark:text-zinc-400",
          "dark:placeholder:text-zinc-600",
        ],
      },
    },
    size: {
      xs: {
        inputWrapper: "h-6 min-h-6 px-1",
        input: "text-tiny",
      },
      md: {
        inputWrapper: "h-10 min-h-10",
        input: "text-small",
      },
      xl: {
        inputWrapper: "h-14 min-h-14",
        input: "text-medium",
      },
    },
    radius: {
      xs: {
        inputWrapper: "rounded",
      },
      sm: {
        inputWrapper: "rounded-[4px]",
      },
    },
    textSize: {
      base: {
        input: "text-base",
      },
    },
    removeLabel: {
      true: {
        label: "hidden",
      },
      false: {},
    },
  },
  defaultVariants: {
    color: "stone",
    textSize: "base",
    removeLabel: true,
  },
});
```

### Use your custom component in your application

Then, you can now use your custom component in your application. Here, `MyInput` is
used with the color set to `slate` and the size set to `xl`.

```tsx
// App.tsx
import {MyInput} from "./MyInput";
import {SearchIcon} from "your-icons-library";

const MyApp = () => {
  return (
    <MyInput
      isClearable
      placeholder="Search..."
      radius="md"
      size="md"
      startContent={<SearchIcon className="text-zinc-500" size={16} />}
    />
  );
};
```

The new component will include the original props of the [Input](/docs/components/input) component, plus the new
variants that you have created.

import customVariantsSlots from "@/content/customization/custom-variants/slots-component";

<CodeDemo
  title="Custom Variants for slots components"
  showEditor={false}
  files={customVariantsSlots}
/>

</Steps>

<Blockquote>
  All NextUI components have the `Styles source` link on top of the page. This link will take you to
  the styles source code of the component. You can use this as a reference when creating your own
  custom component.
</Blockquote>

### Types

### Main Function

```jsx
const Component = extendVariants(BaseComponent, options, config);

/**
 * BaseComponent -> NextUI component to extend
 * options -> the variants to add/modify
 * config -> config to extend the component
 */
```

### Options

```ts
type ExtendVariantsOptions = {
  variants?: Record<string, Record<string, ClassValue>>;
  defaultVariants?: Record<string, ClassValue>;
  compoundVariants?: Array<Record<string, string> & ClassProp>;
};
```

### Config

```ts
  /**
   * Whether to merge the class names with `tailwind-merge` library.
   * It's avoid to have duplicate tailwind classes. (Recommended)
   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/README.md
   * @default true
   */
  twMerge?: boolean;
  /**
   * The config object for `tailwind-merge` library.
   * @see https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md
   */
  twMergeConfig?: TWMergeConfig;
```

> **Note**: See the [Tailwind Merge Config](https://github.com/dcastil/tailwind-merge/blob/v1.8.1/docs/configuration.md) to learn more about it.

---
title: Customize theme
description: Learn how NextUI enables effortless customization of default themes.
---

# Customize theme

As outlined in preceding sections, NextUI presents two predefined themes, `light` and `dark`. 
These themes are inherently flexible, allowing you to tailor them to your specific preferences
or project needs.

Furthermore, you have the option to create your own theme based on the default ones. Each theme 
incorporates [Layout](/docs/customization/layout) tokens and [Color](/docs/customization/colors) tokens, designed 
to facilitate your customization process.



## Customizing Layout

You can modify a variety of layout aspects, including spacing units, font sizes, line heights,
radius, and more.

Layout tokens can be applied globally across all themes or specifically 
to a chosen theme.

### Global Layout Customization

Suppose you require a smaller border radius, a thinner border width, and more opaque disabled
elements across all themes. You can implement these changes by adding the following code to 
your `tailwind.config.js` file.

```js {9-19}
// tailwind.config.js
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    nextui({
      layout: {
        disabledOpacity: "0.3", // opacity-[0.3]
        radius: {
          small: "2px", // rounded-small
          medium: "4px", // rounded-medium
          large: "6px", // rounded-large
        },
        borderWidth: {
          small: "1px", // border-small
          medium: "1px", // border-medium
          large: "2px", // border-large
        },
      },
      themes: {
        light: {},
        dark: {},
      },
    }),
  ],
};
```

As NextUI components employ layout tokens, the modifications will be reflected across all 
components that utilize them. For instance, the [Button](/docs/components/button) component 
uses the `radius` token to set the border radius and the `borderWidth` token to define the 
border width when the variant is `bordered`.

So let's see how the [Button](/docs/components/button) component looks like after the changes.


```jsx
import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Button variant="bordered" radius="md">
        Button
      </Button>
      <Button isDisabled color="primary" radius="md">
        Disabled
      </Button>
    </div>
  );
}
```

<Spacer y={4} />

import customLayout from "@/content/customization/customize-theme/custom-layout";

<CodeDemo title="Custom layout example" showEditor={false} files={customLayout} />

> See the [Layout](/docs/customization/layout#default-layout) section for more details about the available tokens.

### Customizing Colors

Now, Let's say you wish to modify the primary and focus colors of the dark theme. This can 
be achieved by adding the following code to your `tailwind.config.js` file.

```js {10-16}
// tailwind.config.js
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    nextui({
      themes: {
        dark: {
          colors: {
            primary: {
              DEFAULT: "#BEF264",
              foreground: "#000000",
            },
            focus: "#BEF264",
          },
        },
      },
    }),
  ],
};
```

This modification will impact all components using the `primary` color. For instance, 
the [Button](/docs/components/button) component uses the `primary` color as background color when the 
variant is `solid` or `ghost`.

```jsx
import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <div className="flex gap-4">
      <Button color="primary" variant="solid">Solid</Button>
      <Button color="primary" variant="ghost">Ghost</Button>
    </div>
  );
}
```

<Spacer y={4} />

import customColors from "@/content/customization/customize-theme/custom-colors";

<CodeDemo title="Custom colors example" showEditor={false} files={customColors} />

> 🎉 That's it! You have successfully customized the default theme. See the [Colors](/docs/customization/colors) 
> section for more details about the available semantic colors and color tokens. 

---
title: Dark mode
description: NextUI comes with two palette modes light (the default) and dark.
---

# Dark mode

As we mentioned before in the [Theme](/docs/customization/theme) section NextUI comes with two default
themes `light`and `dark`. So using the `dark` theme is as simple as adding it to the `className` of the
`html` / `body` or `main` element.

```jsx {11}
// main.tsx or main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import {NextUIProvider} from "@nextui-org/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <NextUIProvider>
      <main className="dark text-foreground bg-background">
        <App />
      </main>
    </NextUIProvider>
  </React.StrictMode>,
);
```

This will enable the dark mode for the whole application. However, many applications require 
the capability to switch between different themes. For this purpose, we recommend using a 
theme switch library or creating your own implementation.



## Using next-themes

For applications using [Next.js](/docs/frameworks/nextjs), the [next-themes](https://github.com/pacocoursey/next-themes)
library is an excellent choice. It comes packed with features that enhance the user experience
when transitioning between themes.

> For more information, refer to the [next-themes](https://github.com/pacocoursey/next-themes) documentation.

### Next.js App Directory Setup

<Steps>

### Install next-themes

Install `next-themes` in your project.

<PackageManagers
  commands={{
    npm: 'npm install next-themes',
    yarn: 'yarn add next-themes',
    pnpm: 'pnpm add next-themes',
  }}
/>


### Add next-themes provider

Wrap your app with the `ThemeProvider` component from `next-themes`.

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the 
Component with the `NextUIProvider` and the `next-themes` provider components.


```jsx
// app/providers.tsx
"use client";

import {NextUIProvider} from '@nextui-org/react'
import {ThemeProvider as NextThemesProvider} from "next-themes";

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <NextUIProvider>
      <NextThemesProvider attribute="class" defaultTheme="dark">
        {children}
      </NextThemesProvider>
    </NextUIProvider>
  )
}
```

> Note: We're using the `class` attribute to switch between themes, this is because NextUI uses the `className` attribute.

### Add the theme switcher

Add the theme switcher to your app.

```jsx
// app/components/ThemeSwitcher.tsx
"use client";

import {useTheme} from "next-themes";
import { useEffect, useState } from "react";

export function ThemeSwitcher() {
  const [mounted, setMounted] = useState(false)
  const { theme, setTheme } = useTheme()

  useEffect(() => {
    setMounted(true)
  }, [])

  if(!mounted) return null

  return (
    <div>
      The current theme is: {theme}
      <button onClick={() => setTheme('light')}>Light Mode</button>
      <button onClick={() => setTheme('dark')}>Dark Mode</button>
    </div>
  )
};
```

> **Note**: You can use any theme name you want, but make sure it exits in your 
`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.

</Steps>

### Next.js Pages Directory Setup

<Steps>

### Install next-themes

Install `next-themes` in your project.

<PackageManagers
  commands={{
    npm: 'npm install next-themes',
    yarn: 'yarn add next-themes',
    pnpm: 'pnpm add next-themes',
  }}
/>

### Add next-themes provider

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and  wrap the
Component with the `NextUIProvider` and the `next-themes` provider components.

```jsx
// pages/_app.js
import {NextUIProvider} from "@nextui-org/react";
import {ThemeProvider as NextThemesProvider} from "next-themes";

function MyApp({ Component, pageProps }) {
  return (
    <NextUIProvider>
      <NextThemesProvider attribute="class" defaultTheme="dark">
        <Component {...pageProps} />
      </NextThemesProvider>
    </NextUIProvider>
  )
}

export default MyApp;
```

> Note: We're using the `class` attribute to switch between themes, this is because NextUI uses the `className` attribute.

### Add the theme switcher

Add the theme switcher to your app.

```jsx
// components/ThemeSwitcher.tsx
import {useTheme} from "next-themes";

export const ThemeSwitcher = () => {
  const { theme, setTheme } = useTheme()

  return (
    <div>
      The current theme is: {theme}
      <button onClick={() => setTheme('light')}>Light Mode</button>
      <button onClick={() => setTheme('dark')}>Dark Mode</button>
    </div>
  )
};
```

> **Note**: You can use any theme name you want, but make sure it exits in your
`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.

</Steps>


## Using use-dark-mode hook

In case you're using plain React with [Vite](/docs/frameworks/vite) or [Create React App](https://create-react-app.dev/) 
you can use the [use-dark-mode](https://github.com/donavon/use-dark-mode) hook to switch between themes.

> See the [use-dark-mode](https://github.com/donavon/use-dark-mode) documentation for more details.

<Steps>

### Install use-dark-mode

Install `use-dark-mode` in your project.

<PackageManagers
  commands={{
    npm: 'npm install use-dark-mode',
    yarn: 'yarn add use-dark-mode',
    pnpm: 'pnpm add use-dark-mode',
  }}
/> 

### Add the current theme to the main element

```jsx
// App.tsx or App.jsx
import React from "react";
import useDarkMode from "use-dark-mode";

export default function App() {
  const darkMode = useDarkMode(false);

  return (
    <main className={`${darkMode.value ? 'dark' : ''} text-foreground bg-background`}>
      <App />
    </main>
  )
}
```

### Add the theme switcher

Add the theme switcher to your app.

```jsx
// 'use client'; // uncomment this line if you're using Next.js App Directory Setup

// components/ThemeSwitcher.tsx
import useDarkMode from "use-dark-mode";

export const ThemeSwitcher = () => {
  const darkMode = useDarkMode(false);

  return (
    <div>
      <button onClick={darkMode.disable}>Light Mode</button>
      <button onClick={darkMode.enable}>Dark Mode</button>
    </div>
  )
};
```



> **Note**: You can use any theme name you want, but make sure it exits in your
`tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.


</Steps>
---
title: Layout
description: NextUI offers a set of layout options to customize the theme.
---

# Layout

NextUI's plugin provides a variety of layout customization options. Alter spacing units, 
font sizes, line heights, radius and more to personalize each theme to your liking.



Using layout tokens, you can ensure a uniform aesthetic across all components without 
needing to override the default Tailwind CSS configuration.


```js {4,7,11}
module.exports = {
  plugins: [
    nextui({
      layout: {}, // common layout options
      themes: {
        light: {
          layout: {}, // light theme layout options
          // ...
        },
        dark: {
          layout: {}, // dark theme layout options
          // ...
        },
        // ... custom themes
      },
    }),
  ],
};
```

> Layout options are applied to all components.

## Default Layout

Default values for the layout tokens are:

```js
module.exports = {
  plugins: [
    nextui({
      layout: {
        dividerWeight: "1px", // h-divider the default height applied to the divider component
        disabledOpacity: 0.5, // this value is applied as opacity-[value] when the component is disabled
        fontSize: {
          tiny: "0.75rem", // text-tiny
          small: "0.875rem", // text-small
          medium: "1rem", // text-medium
          large: "1.125rem", // text-large
        },
        lineHeight: {
          tiny: "1rem", // text-tiny
          small: "1.25rem", // text-small
          medium: "1.5rem", // text-medium
          large: "1.75rem", // text-large
        },
        radius: {
          small: "8px", // rounded-small
          medium: "12px", // rounded-medium
          large: "14px", // rounded-large
        },
        borderWidth: {
          small: "1px", // border-small
          medium: "2px", // border-medium (default)
          large: "3px", // border-large
        },
      },
      themes: {
        light: {
          layout: {
            hoverOpacity: 0.8, //  this value is applied as opacity-[value] when the component is hovered
            boxShadow: {
              // shadow-small
              small:
                "0px 0px 5px 0px rgb(0 0 0 / 0.02), 0px 2px 10px 0px rgb(0 0 0 / 0.06), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
              // shadow-medium
              medium:
                "0px 0px 15px 0px rgb(0 0 0 / 0.03), 0px 2px 30px 0px rgb(0 0 0 / 0.08), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
              // shadow-large
              large:
                "0px 0px 30px 0px rgb(0 0 0 / 0.04), 0px 30px 60px 0px rgb(0 0 0 / 0.12), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
            },
          },
        },
        dark: {
          layout: {
            hoverOpacity: 0.9, //  this value is applied as opacity-[value] when the component is hovered
            boxShadow: {
              // shadow-small
              small:
                "0px 0px 5px 0px rgb(0 0 0 / 0.05), 0px 2px 10px 0px rgb(0 0 0 / 0.2), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
              // shadow-medium
              medium:
                "0px 0px 15px 0px rgb(0 0 0 / 0.06), 0px 2px 30px 0px rgb(0 0 0 / 0.22), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
              // shadow-large
              large:
                "0px 0px 30px 0px rgb(0 0 0 / 0.07), 0px 30px 60px 0px rgb(0 0 0 / 0.26), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
            },
          },
        },
      },
    }),
  ],
};
```

### CSS Variables

NextUI creates CSS variables using the format `--prefix-prop-name-scale` for each layout token. By
default the prefix is `nextui`, but you can change it with the `prefix` option.

```js {4}
module.exports = {
  plugins: [
    nextui({
      prefix: "myapp",
    }),
  ],
};
```

Then you can use the CSS variables in your CSS files.

```css
/* With default prefix */
.my-button {
  font-size: var(--nextui-font-size-small);
  line-height: var(--nextui-line-height-small);
  border-radius: var(--nextui-radius-medium);
}

/*  With custom prefix */
.my-component {
  font-size: var(--myapp-font-size-small);
  line-height: var(--myapp-line-height-small);
  border-radius: var(--myapp-radius-medium);
}
```

#### API Reference

| Attribute       | Type                            | Description                                                                                 |
| --------------- | ------------------------------- | ------------------------------------------------------------------------------------------- |
| hoverOpacity    | string, number                  | A number between 0 and 1 that is applied as opacity-[value] when the component is hovered.  |
| disabledOpacity | string, number                  | A number between 0 and 1 that is applied as opacity-[value] when the component is disabled. |
| dividerWeight   | string                          | The default height applied to the divider component. We recommend to use `px` units.        |
| fontSize        | [FontThemeUnit](#fontthemeunit) | The default font size applied across the components.                                        |
| lineHeight      | [FontThemeUnit](#fontthemeunit) | The default line height applied across the components.                                      |
| radius          | [BaseThemeUnit](#basethemeunit) | The default radius applied across the components. We recommend to use `rem` units.          |
| borderWidth     | [BaseThemeUnit](#basethemeunit) | The border width applied across the components.                                             |
| boxShadow       | [BaseThemeUnit](#basethemeunit) | The box shadow applied across the components.                                               |

#### BaseThemeUnit

```ts
export type BaseThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
};
```

#### FontThemeUnit

```ts
export type FontThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
  tiny?: string;
};
```
---
title: Override styles
description: NextUI allows you to override the default styles of the components in several ways.
---

# Override styles

Overriding default component styles is as simple as passing your own class names to the `className`
or to the `classNames` prop for components with slots.



### What is a Slot?

A slot is a part of a component that can be styled separately. For example, the [CircularProgress](/docs/components/circular-progress) component
has multiple slots/parts that can be styled separately, such as the `track`, `indicator`, `value`, etc.

Components with slots have a `classNames` prop that allows you to style each slot separately.

### Overriding a component

Let's override the default styles of the [Button](/docs/components/button) component, which is a component that has no slots.

```jsx {7}
import {Button} from "@nextui-org/react";

export default function App() {
  return (
    <Button
      disableRipple
      className="relative overflow-visible rounded-full hover:-translate-y-1 px-12 shadow-xl bg-background/30 after:content-[''] after:absolute after:rounded-full after:inset-0 after:bg-background/40 after:z-[-1] after:transition after:!duration-500 hover:after:scale-150 hover:after:opacity-0"
      size="lg"
    >
      Press me
    </Button>
  );
}
```

<Spacer y={4}/>

import buttonOverrideExample from "@/content/customization/override-styles/button-example";

<CodeDemo
  isCentered
  title="Override Button styles"
  files={buttonOverrideExample}
  showEditor={false}
  isPreviewCentered={true}
  gradientColor="orange"
  isGradientBox={true}
  previewHeight={160}
  className="py-5"
/>

### Components with slots

Some NextUI components have slots, which means that you can style all the parts inside the component
using the `classNames` prop. For example, the [CircularProgress](/docs/components/circular-progress) 
component has the following slots:

- **base**: The base slot of the circular progress, it is the main container.
- **svgWrapper**: The wrapper of the svg circles and the value label.
- **svg**: The svg element of the circles.
- **track**: The track is the background circle of the circular progress.
- **indicator**: The indicator is the one that is filled according to the `value`.
- **value**: The value content.
- **label**: The label content.

Each slot can be styled using the `classNames` prop, the example below shows how
to change the styles of some slots to create a circular progress with a different
style.

import slotsOverrideExample from "@/content/customization/override-styles/slots-example";

```jsx {9-12}
import {CircularProgress, Card, CardBody} from "@nextui-org/react";

export default function App() {
  return (
    <Card className="w-[240px] h-[240px] bg-gradient-to-br from-violet-500 to-fuchsia-500">
      <CardBody className="justify-center items-center py-0">
        <CircularProgress
          classNames={{
            svg: "w-36 h-36 drop-shadow-md",
            indicator: "stroke-white",
            track: "stroke-white/10",
            value: "text-3xl font-semibold text-white",
          }}
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </CardBody>
    </Card>
  );
}
```

<Spacer y={4}/>

<CodeDemo
  title="Override CircularProgress styles"
  files={slotsOverrideExample}
  showEditor={false}
/>

> **Note**: You will find a `Slots` section in the documentation of each component that has slots.


### CSS Modules

CSS Modules allow for the creation of local scope classes and variables. Here's how 
you can use it to override styles:

```jsx
import {CircularProgress, Card, CardBody} from "@nextui-org/react";
import styles from './App.module.css';

export default function App() {
  return (
    <Card className={styles.card}>
      <CardBody className={styles.cardBody}>
        <CircularProgress
          classNames={{
            svg: styles.svg,
            indicator: styles.indicator,
            track: styles.track,
            value: styles.value,
          }}
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </CardBody>
    </Card>
  );
}
```

With the corresponding CSS module:

```css
/* App.module.css */
.card {
  width: 240px;
  height: 240px;
  background: linear-gradient(to bottom right, violet, fuchsia);
}

.cardBody {
  justify-content: center;
  align-items: center;
  padding-bottom: 0;
}

.svg {
  width: 36px;
  height: 36px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);
}

.indicator {
  stroke: white;
}

.track {
  stroke: rgba(255, 255, 255, 0.1);
}

.value {
  font-size: 24px;
  font-weight: 600;
  color: white;
}
```

### CSS-in-JS

If you are a CSS-in-JS library such as [styled-components](https://styled-components.com/) or [emotion](https://emotion.sh/), you can use the following
example to override the styles of a component:


```jsx
import {CircularProgress, Card, CardBody} from "@nextui-org/react";
import styled from 'styled-components';

const StyledCard = styled(Card)`
  width: 240px;
  height: 240px;
  background: linear-gradient(to bottom right, violet, fuchsia);
`;

const StyledCardBody = styled(CardBody)`
  justify-content: center;
  align-items: center;
  padding-bottom: 0;
`;

const StyledCircularProgress = styled(CircularProgress).attrs({
  classNames: {
    svg: 'w-36 h-36 drop-shadow-md',
    indicator: 'stroke-white',
    track: 'stroke-white/10',
    value: 'text-3xl font-semibold text-white',
  }
})``;

export default function App() {
  return (
    <StyledCard>
      <StyledCardBody>
        <StyledCircularProgress
          value={70}
          strokeWidth={4}
          showValueLabel={true}
        />
      </StyledCardBody>
    </StyledCard>
  );
}
```

In this example, the `StyledCard`, `StyledCardBody`, and `StyledCircularProgress` components have 
the combined styles of the original components and the custom styles defined in the template 
strings. The `.attrs` method is used to add the classNames prop to the StyledCircularProgress 
component.

---
title: Theme
description: Learn how to customize your application's appearance using NextUI's TailwindCSS plugin.
---

# Theme

Theming is a key element in designing user interfaces (UIs). It enables the application of a
consistent aesthetic across your application, enhancing the user experience and maintaining
visual uniformity.

In NextUI, we facilitate easy and flexible theme customization using a
TailwindCSS plugin. This plugin, which is based on the [tw-colors](https://github.com/L-Blondy/tw-colors)
plugin developed by [L-Blondy](https://github.com/L-Blondy), allows you to customize color schemes,
layout configurations, and more, across different components of your application.



## What is a Theme?

A theme, in the context of NextUI, is a predefined set of colors, layout attributes, and other
UI elements that you can consistently apply across your application. Themes ensure visual
consistency, enrich the user experience, and simplify the management and updates of your
app's look and feel.

## Setup

The first step to using NextUI's theming capability is adding the `nextui` plugin to your
`tailwind.config.js` file. Below is an example of how to do this:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {9,14-15}
// tailwind.config.js
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()],
};
```

### Usage

After adding the plugin to your `tailwind.config.js` file, you can utilize any of the default
themes (light/dark) or a custom one. Here's how you can apply these themes in your `main.jsx` or `main.tsx`:

Go to the src directory and inside `main.jsx` or `main.tsx`, apply the following class names to the root element:

- `light` for the light theme.
- `dark` for the dark theme.
- `text-foreground` to set the text color.
- `bg-background` to set the background color.

```jsx {11}
// main.tsx or main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import {NextUIProvider} from "@nextui-org/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <NextUIProvider>
      <main className="dark text-foreground bg-background">
        <App />
      </main>
    </NextUIProvider>
  </React.StrictMode>,
);
```

> **Note**: See the [Colors](/docs/customization/colors) section to learn more about the color classes.

### Default Plugin Options

The `nextui` plugin provides a default structure. It is outlined as follows:

```js
module.exports = {
  plugins: [
    nextui({
      prefix: "nextui", // prefix for themes variables
      addCommonColors: false, // override common colors (e.g. "blue", "green", "pink").
      defaultTheme: "light", // default theme from the themes object
      defaultExtendTheme: "light", // default theme to extend on custom themes
      layout: {}, // common layout tokens (applied to all themes)
      themes: {
        light: {
          layout: {}, // light theme layout tokens
          colors: {}, // light theme colors
        },
        dark: {
          layout: {}, // dark theme layout tokens
          colors: {}, // dark theme colors
        },
        // ... custom themes
      },
    }),
  ],
};
```

### Themes Options

These are the options that you can use to apply custom configurations to your themes.

```js {6-7,10-11}
module.exports = {
  plugins: [
    nextui({
      themes: {
        light: {
          layout: {},
          colors: {}
        },
        dark: {
          layout: {},
          colors: {}
        },
        ... // custom themes
      }
    })
  ]
}
```

### Nested themes

NextUI supports nested themes, allowing you to apply different themes to different sections
of your application:

```html
<html class="dark">
  ...
  <div class="light">...</div>
  <div class="purple-dark">...</div>
</html>
```

### Theme based variants

NextUI enables you to apply TailwindCSS styles based on the currently active theme. Below are
examples of how to do this:

```html
<!-- In dark theme, background will be dark and text will be light. 
  In light theme, background will be light and text will be dark -->

<div class="dark dark:bg-gray-800 dark:text-white bg-white text-black">
  ...
  <div>Text color changes based on theme</div>
</div>

<div class="light light:bg-gray-100 light:text-black bg-black text-white">
  ...
  <div>Text color changes based on theme</div>
</div>
```

### API Reference

The following table provides an overview of the various attributes you can use when working
with themes in NextUI:

| Attribute          | Type                          | Description                                                                                                     | Default  |
| ------------------ | ----------------------------- | --------------------------------------------------------------------------------------------------------------- | -------- |
| prefix             | `string`                      | The prefix for the css variables.                                                                               | `nextui` |
| addCommonColors    | `boolean`                     | If true, the common nextui colors (e.g. "blue", "green", "purple") will replace the TailwindCSS default colors. | `false`  |
| defaultTheme       | `light` \| `dark`             | The default theme to use.                                                                                       | `light`  |
| defaultExtendTheme | `light` \| `dark`             | The default theme to extend.                                                                                    | `light`  |
| layout             | [LayoutTheme](#layouttheme)   | The layout definitions.                                                                                         | -        |
| themes             | [ConfigThemes](#configthemes) | The theme definitions.                                                                                          | -        |

### Types

#### ConfigThemes

```ts
type ConfigTheme = {
  extend?: "light" | "dark"; // base theme to extend
  layout?: LayoutTheme; // see LayoutTheme
  colors?: ThemeColors; // see ThemeColors
};

type ConfigThemes = Record<string, ConfigTheme>;
```

#### LayoutTheme

```ts
type BaseThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
};

type FontThemeUnit = {
  small?: string;
  medium?: string;
  large?: string;
  tiny?: string;
};

interface LayoutTheme {
  /**
   * The default font size applied across the components.
   */
  fontSize?: FontThemeUnit;
  /**
   * The default line height applied across the components.
   */
  lineHeight?: FontThemeUnit;
  /**
   * The default radius applied across the components.
   * we recommend to use `rem` units.
   */
  radius?: BaseThemeUnit;
  /**
   * A number between 0 and 1 that is applied as opacity-[value] when
   * the component is disabled.
   */
  disabledOpacity?: string | number;
  /**
   * The default height applied to the divider component.
   * we recommend to use `px` units.
   */
  dividerWeight?: string;
  /**
   * The border width applied across the components.
   */
  borderWidth?: BaseThemeUnit;
  /**
   * The box shadow applied across the components.
   */
  boxShadow?: BaseThemeUnit;
}
```

#### ThemeColors

```ts
type ColorScale = {
  50: string;
  100: string;
  200: string;
  300: string;
  400: string;
  500: string;
  600: string;
  700: string;
  800: string;
  900: string;
  foreground: string; // contrast color
  DEFAULT: string;
};

type BaseColors = {
  background: ColorScale; // the page background color
  foreground: ColorScale; // the page text color
  divider: ColorScale; // used for divider and single line border
  overlay: ColorScale; // used for modal, popover, etc.
  focus: ColorScale; // used for focus state outline
  content1: ColorScale; // used for card, modal, popover, etc.
  content2: ColorScale;
  content3: ColorScale;
  content4: ColorScale;
};

// brand colors
type ThemeColors = BaseColors & {
  default: ColorScale;
  primary: ColorScale;
  secondary: ColorScale;
  success: ColorScale;
  warning: ColorScale;
  danger: ColorScale;
};
```

---
title: Astro
description: How to use NextUI with Astro
---

# Astro

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/astro) or later
- [Framer Motion 11](https://www.framer.com/motion/) or later

------



To use NextUI in your Astro project, you need to follow the following steps:

<Steps>

### Install React

NextUI is built on top of React, so you need to install React first. You can follow the official
[integration guide](https://docs.astro.build/en/guides/integrations-guide/react/) to install React.


### Install NextUI

In your Astro project, run one of the following command to install NextUI:

<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
    bun: "bun add @nextui-org/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/astro) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.cjs` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,9,14-15}
// tailwind.config.cjs
const { nextui } = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}
```

### Usage

Now you can import NextUI components and use them in your Astro project:

```markdown
---
import Layout from '../layouts/Layout.astro';
import {Button} from '@nextui-org/react';
---

<Layout title="Welcome to Astro.">
  <main>
      <Button color="primary" client:visible>My button</Button>
  </main>
</Layout>
```

Note that you have to add `client:visible` to the component to make it visible only on the client side. Otherwise
some functionalities of NextUI components may not work properly.

</Steps>

<Blockquote
 color="warning"
>
  Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please use <Link href="https://v1.nextui.org/docs/getting-started" isExternal>version 1 of NextUI</Link>.
</Blockquote>

---
title: Next.js
description: How to use NextUI with Next.js
---

# Next.js


Requirements:

- [Next.js 12](https://nextjs.org/) or later
- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/nextjs) or later
- [Framer Motion 11](https://www.framer.com/motion/) or later

------



To use NextUI in your Next.js project, you need to follow the steps below, depending on your project structure.

## App Directory Setup

Next.js 13 introduces a new `app/` directory structure. By default it uses Server Components. 
As NextUI components use React hooks, we added the `use client;` at build time, so you can import them
directly in your React Server Components (RSC).

### NextUI CLI (recommended)

If you are starting a new project, you can use the NextUI CLI to create a new project with NextUI pre-configured:

```bash
npm install -g nextui-cli
```

<Spacer y={4}/>

```bash
nextui init -t app
```

### create-next-app 

If you are starting a new project, you can run one of the following commands to create a Next.js project pre-configured with NextUI:

<PackageManagers
  commands={{
    npm: 'npx create-next-app -e https://github.com/nextui-org/next-app-template',
    yarn: 'yarn create next-app -e https://github.com/nextui-org/next-app-template',
    pnpm: 'pnpm create next-app -e https://github.com/nextui-org/next-app-template'
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
nextui add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
nextui add button input
```

Or you can add the main library `@nextui-org/react` by running the following command:

```codeBlock bash
nextui add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {NextUIProvider} from '@nextui-org/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <NextUIProvider>
      {children}
    </NextUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {3,7,9,11}
// app/layout.tsx

import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

### Manual Installation

<Steps>

### Add dependencies

In your Next.js project, run one of the following commands to install NextUI:

<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
    bun: "bun add @nextui-org/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,9,14-15}
// tailwind.config.js
import {nextui} from "@nextui-org/react";

/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}

export default config;
```

### Setup Provider

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:

```jsx {4,8,10}
// app/providers.tsx
'use client'

import {NextUIProvider} from '@nextui-org/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <NextUIProvider>
      {children}
    </NextUIProvider>
  )
}
```

### Add Provider to Root

Now, Go to your `root` layout page and wrap it with the `Providers`:

```jsx {2,6,8,10}
// app/layout.tsx
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

> **Note**: NextUI automatically adds two themes, `light` and `dark`, to your application. You can use any 
of them by adding the `dark`/`light` class to the `html` tag. See the [theme docs](/docs/customization/customize-theme) for more details.


### Use NextUI Components

Now you can import any NextUI component directly in your Server Components without needing to use
the `use client;` directive:

```jsx {2,7}
// app/page.tsx
import {Button} from '@nextui-org/button'; 

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```
> **Important 🚨**: Note that you need to import the component from the individual package, not from `@nextui-org/react`. 

</Steps>

## Pages Directory Setup 

### NextUI CLI (recommended)

If you are starting a new project, you can use the NextUI CLI to create a new project with NextUI pre-configured:

```bash
npm install -g nextui-cli
```

<Spacer y={4}/>

```bash
nextui init -t pages
```

If you are using the `/pages` Next.js project structure, you need to follow the steps below.

### create-next-app 

If you are starting a new project, you can run one of the following commands to create a Next.js project pre-configured with NextUI:

<PackageManagers
  commands={{
    npm: 'npx create-next-app -e https://github.com/nextui-org/next-pages-template',
    yarn: 'yarn create next-app -e https://github.com/nextui-org/next-pages-template',
    pnpm: 'pnpm create next-app -e https://github.com/nextui-org/next-pages-template'
  }}
/>

### Automatic Installation

You can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
nextui add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
nextui add button input
```

Or you can add the main library `@nextui-org/react` by running the following command:

```codeBlock bash
nextui add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

You still need to add the provider to your app manually (we are working on automating this step).

```jsx {3,7,9}
// app/providers.tsx

import {NextUIProvider} from '@nextui-org/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <NextUIProvider>
      {children}
    </NextUIProvider>
  )
}
```

<Spacer y={4} />

```jsx {3,7,9,11}
// app/layout.tsx

import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

### Manual Installation

<Steps>

### Add dependencies

In your Next.js project, run one of the following commands to install NextUI:

<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
    bun: "bun add @nextui-org/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,9,14-15}
// tailwind.config.js
import {nextui} from "@nextui-org/react";

/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}

export default config;
```

### Setup Provider

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:

```jsx {2,6,8}
// pages/_app.js
import {NextUIProvider} from '@nextui-org/react'

function MyApp({ Component, pageProps }) {
  return (
    <NextUIProvider>
      <Component {...pageProps} />
    </NextUIProvider>
  )
}

export default MyApp;
```

### Use NextUI Components

Now you can import any NextUI component wherever you want:

```jsx {1,6}
import {Button} from '@nextui-org/react'

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```
</Steps>

<Blockquote
 color="warning"
>
  Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please use <Link href="https://v1.nextui.org/docs/getting-started" isExternal>version 1 of NextUI</Link>.
</Blockquote>

---
title: Remix
description: How to use NextUI with Remix
---

# Remix

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/remix) or later
- [Framer Motion 11](https://www.framer.com/motion/) or later

------



To use NextUI in your Remix project, you need to follow the following steps:

<Steps>

### Installation

In your Remix project, run one of the following command to install NextUI:

<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
    bun: "bun add @nextui-org/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/remix) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```ts {2,10,15-16}
// tailwind.config.ts
const { nextui } = require("@nextui-org/react");

import type { Config } from 'tailwindcss'

export default {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
} satisfies Config
```

### Provider Setup

After installing NextUI, you need to set up the `NextUIProvider` at the `root` of your application.

Go to the src directory and inside `root.tsx`, wrap `NextUIProvider` around App:

```tsx {9,19,24}
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";
import {NextUIProvider} from "@nextui-org/react";

export default function App() {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        <NextUIProvider>
          <Outlet />
          <ScrollRestoration />
          <Scripts />
          <LiveReload />
        </NextUIProvider>
      </body>
    </html>
  );
}
```

</Steps>

<Blockquote
 color="warning"
>
  Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please use <Link href="https://v1.nextui.org/docs/getting-started" isExternal>version 1 of NextUI</Link>.
</Blockquote>


---
title: Vite
description: How to use NextUI with Vite
---

# Vite

Requirements:

- [Vite 2](https://vitejs.dev/) or later
- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/docs/guides/vite#react) or later
- [Framer Motion 11](https://www.framer.com/motion/) or later

------



To use NextUI in your Vite project, you need to follow the following steps:

<Steps>

### Installation

In your Vite React project, run one of the following command to install NextUI:

<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
    bun: "bun add @nextui-org/react framer-motion"
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/vite#react) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {2,8,13-14}
// tailwind.config.js
const { nextui } = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}
```

### Provider Setup

After installing NextUI, you need to set up the `NextUIProvider` at the `root` of your application.

Go to the src directory and inside `main.jsx` or `main.tsx`, wrap `NextUIProvider` around App:

```jsx {4,10,12}
// main.tsx or main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import {NextUIProvider} from '@nextui-org/react'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <NextUIProvider>
      <App />
    </NextUIProvider>
  </React.StrictMode>,
)
```

</Steps>

<Blockquote
 color="warning"
>
  Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please use <Link href="https://v1.nextui.org/docs/getting-started" isExternal>version 1 of NextUI</Link>.
</Blockquote>

---
title: CLI
description: Use the CLI to manage and enhance your NextUI project components.
---

# CLI

The CLI offers a comprehensive suite of commands to initialize, manage, and improve your NextUI projects. It enables you to `add`, `remove`, or `upgrade` individual components, assess the health of your project, and more.

## Installation

Requirements:

- [Node.js version 18.17.x or later](https://nodejs.org/en/)

<Steps>

### Global Installation

To install the `CLI` globally, execute one of the following commands in your terminal:

<PackageManagers
  commands={{
    npm: "npm install nextui-cli -g",
    yarn: "yarn add nextui-cli -g",
    pnpm: "pnpm add nextui-cli -g",
    bun: "bun add nextui-cli -g",
  }}
/>

### Without Installation

Alternatively, you can use the `CLI` without a global installation by employing `npx`:

```bash
npx nextui-cli@latest
```

</Steps>

## Quick Start

Once the `CLI` is installed, run the following command to display available commands:

```codeBlock bash
nextui
```

This will produce the following help output:

```codeBlock bash
NextUI CLI <version>

A command line tool for seamless integration with NextUI

Usage: nextui [command]

Options:
  -v, --version  Show the version number
  --no-cache     Disable cache, by default data will be cached for 30m after the first request
  -h, --help     Display help for commands

Commands:
  init [options] [projectName]       Start a new NextUI project
  add [options] [components...]      Add NextUI components to your project
  upgrade [options] [components...]  Update NextUI components to the latest versions
  remove [options] [components...]   Remove NextUI components from your project
  list [options]                     Show details of installed components
  env [options]                      Display debug information about the local environment
  doctor [options]                   Diagnose problems in your project
  help [command]                     Get help on a specific command
```

## init

Initialize a new NextUI project using the `init` command. This sets up your project with the necessary configurations.

```codeBlock bash
nextui init my-nextui-app
```

<Spacer y={4} />

You will be prompted to configure your project:

```codeBlock bash
┌  Create a new project
│
◇  Select a template (Enter to select)
│  ● App (A Next.js 14 with app directory template pre-configured with NextUI (v2) and Tailwind CSS.)
│  ○ Pages (A Next.js 14 with pages directory template pre-configured with NextUI (v2) and Tailwind CSS.)
│  ○ Vite (A Vite template pre-configured with NextUI (v2) and Tailwind CSS.)
│
◇  New project name (Enter to skip with default name)
│  my-nextui-app
│
◇  Select a package manager (Enter to select)
│  ● npm
│  ○ yarn
│  ○ pnpm
│  ○ bun
│
◇  Template created successfully!
│
◇  Next steps ───────╮
│                    │
│  cd my-nextui-app  │
│  npm install       │
│                    │
├────────────────────╯
│
└  🚀 Get started with npm run dev
```

Install the dependencies to start the local server:

```codeBlock bash
cd my-nextui-app && npm install
```

Start the local server:

```codeBlock bash
npm run dev
```

## add

Add components to your NextUI project with the add command. This command manages component dependencies and updates your project configurations.

Without specifying a specific component:

```codeBlock bash
nextui add
```

<Spacer y={4} />

You will be prompted to select the components you wish to add:

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

To add a specific component:

```codeBlock bash
nextui add button
```

You will see an output confirming the addition of the component:

```codeBlock bash
Adding the required dependencies: @nextui-org/button

Tailwind CSS settings have been updated in: /project-path/tailwind.config.js

✅ Components added successfully
```

## upgrade

Upgrade all the NextUI components within your project.

```codeBlock bash
nextui upgrade --all
```

Upgrade specific NextUI components within your project using the upgrade command to ensure they are up to date.

```codeBlock bash
nextui upgrade button
```

You will be asked to confirm the upgrade:

```codeBlock bash

╭───────────────────────── Component ─────────────────────────╮
│  @nextui-org/button              ^2.0.11  ->  ^2.0.31       │
╰─────────────────────────────────────────────────────────────╯

Required min version: @nextui-org/theme>=2.1.0, tailwindcss>=3.4.0
╭───────────────────── PeerDependencies ─────────────────────╮
│  @nextui-org/theme               2.0.1    ->  2.1.0        │
│  tailwindcss                     ^3.2.3   ->  ^3.4.0       │
╰────────────────────────────────────────────────────────────╯
2 minor, 1 patch

? Would you like to proceed with the upgrade? › - Use arrow-keys. Return to submit.
❯   Yes
    No
```

Upon confirmation, the command will execute and provide an output similar to:

```codeBlock bash
✅ Upgrade complete. All components are up to date.
```

## remove

Remove components from your NextUI project with the remove command. This helps in managing the project's
component structure and dependencies.

```codeBlock bash
nextui remove button
```

A confirmation prompt will be displayed:

```codeBlock bash
❗️ Components slated for removal:
╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package              │   Version              │   Status   │   Docs                                        │
│──────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @nextui-org/button   │   2.0.27 🚀latest      │   stable   │   https://nextui.org/docs/components/button   │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

? Confirm removal of these components: › - Use arrow-keys. Return to submit.
❯   Yes
    No
```

Following confirmation, the output will indicate successful removal:

```codeBlock bash
✅ Successfully removed the specified NextUI components: @nextui-org/button
```

## list

List all installed NextUI components in your project with the list command. This provides a clear overview of what is currently included in your project.

```codeBlock bash
nextui list
```

The output will detail each component:

```codeBlock bash
Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │
│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │
│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │
│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
```

## doctor

Diagnose and resolve issues within your project using the doctor command. This ensures your project's health and proper configuration.

```codeBlock bash
nextui doctor
```

Depending on your project's status, you might see:

```codeBlock bash
✅ Your project has no detected issues.
```

Or, if issues are detected:

```codeBlock bash
❌ Your project has 1 issue that requires attention
```

## env

Display detailed information about your project's environment settings using the env command. This includes system, dependencies, and configuration details.

```codeBlock bash
nextui env
```

The output will reflect your current environment setup:

```codeBlock bash
Current installed components:

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│   Package                    │   Version              │   Status    │   Docs                                              │
│───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────│
│   @nextui-org/autocomplete   │   2.0.10 🚀latest      │   newPost   │   https://nextui.org/docs/components/autocomplete   │
│   @nextui-org/badge          │   2.0.24 🚀latest      │   stable    │   https://nextui.org/docs/components/badge          │
│   @nextui-org/button         │   2.0.27 🚀latest      │   stable    │   https://nextui.org/docs/components/button         │
│   @nextui-org/chip           │   2.0.25 🚀latest      │   stable    │   https://nextui.org/docs/components/chip           │
╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

Environment Info:
  System:
    OS: darwin
    CPU: arm64
  Binaries:
    Node: v18.18.2
```

## API Reference

Explore the complete CLI commands and features in the [API References](/docs/api-references/cli-api).

For updates and source code, visit the [GitHub Repository](https://github.com/nextui-org/nextui-cli).

---
title: Design Principles
description: Understand the fundamental design and API decisions behind the development of NextUI.
---

# Design Principles

The development of NextUI has been guided by a set of specific design and API principles.
These principles serve as the foundation for our library and play a crucial role in ensuring
the efficiency, effectiveness, and user-friendliness of the components we offer.

### Simplicity and Usability

Simplicity is the ultimate sophistication. At NextUI, we believe in delivering simple and
intuitive components. Our design process centers around the user, ensuring that we deliver
tools that are easy to understand, configure, and implement, regardless of a developer's
expertise level.

### Modular Design

Each component in NextUI is designed as a standalone module. This modular approach allows
developers to import and use only what they need, leading to lighter applications and faster
load times.

### Customization and Flexibility

NextUI is designed with customization at its core. Whether it's theming or overriding styles,
we provide developers with comprehensive control over the aesthetics of the components. Our
integration with the [TailwindCSS](https://tailwindcss.com/) and [Tailwind Variants](https://tailwind-variants.org)
library and simplifies the customization process and enables an extensive range of design possibilities.

### Consistent API

NextUI maintains a consistent API across all components. We've ensured that common attributes
function identically across different components, allowing developers to anticipate component
behavior and thus reducing the learning curve.

### Accessibility

We are committed to ensuring that our components are accessible to all users.
In the development of NextUI, accessibility standards and guidelines have been adhered to,
ensuring our components work effectively with assistive technologies. For further information
on how to make your web applications more accessible, refer to [React Spectrum](https://react-spectrum.adobe.com/react-aria/index.html).

### Component Slots

To provide maximum flexibility, many NextUI components have `slots`, allowing developers to
inject custom styles or content in specific areas of a component. Each slot can be individually
styled, offering granular control over the appearance and behavior of the component.

<Spacer y={4}/>

Through these principles, we aim to make NextUI an effective, efficient, and enjoyable tool
for developers to use. As we continue to expand and enhance NextUI, these guiding principles
will remain central to our design and development processes.

---
title: Installation
description: Get started with NextUI in the official documentation, and learn more about all our features!
---

# Installation

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/) or later
- [Framer Motion 11](https://www.framer.com/motion/) or later

---



## Automatic Installation

Using the CLI is now the easiest way to start a NextUI project. You can initialize your project and add components directly via the CLI:

```codeBlock bash
npm install -g nextui-cli
```

<Spacer y={4}/>

```codeBlock bash
nextui init my-nextui-app
```

You will be prompted to configure your project:

```codeBlock bash
◇  Select a template (Enter to select)
│  ● App (A Next.js 14 with app directory template pre-configured with NextUI (v2) and Tailwind CSS.)
│  ○ Pages (A Next.js 14 with pages directory template pre-configured with NextUI (v2) and Tailwind CSS.)
│  ○ Vite (A Vite template pre-configured with NextUI (v2) and Tailwind CSS.)
```

Install the dependencies to start the local server:
```codeBlock bash
cd my-nextui-app && npm install
```

Start the local server:
```codeBlock bash
npm run dev
```

Once your NextUI project is ready to develop, you can add individual components using the CLI. For example, to add a button component:

```codeBlock bash
nextui add button
```

This command adds the Button component to your project and manages all related dependencies.

You can also add multiple components at once:

```codeBlock bash
nextui add button input
```

Or you can add the main library `@nextui-org/react` by running the following command:

```codeBlock bash
nextui add --all
```

If you leave out the component name, the CLI will prompt you to select the components you want to add.

```codeBlock bash
? Which components would you like to add? › - Space to select. Return to submit
Instructions:
    ↑/↓: Highlight option
    ←/→/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer

Filtered results for: Enter something to filter

◯  accordion
◯  autocomplete
◯  avatar
◯  badge
◯  breadcrumbs
◉  button
◯  card
◯  checkbox
◯  chip
◯  code
```

## Manual Installation

If you prefer not to use the CLI, you may try either global installation or individual installation to set up NextUI in your project:

### Global Installation

The easiest way to get started with NextUI is to use the global installation, which means
that all the components are imported from a single package.

Follow the steps below to install all NextUI components:

<Steps>

#### Install Packages

To install NextUI, run one of the following commands in your terminal:

<PackageManagers
  commands={{
    npm: "npm install @nextui-org/react framer-motion",
    yarn: "yarn add @nextui-org/react framer-motion",
    pnpm: "pnpm add @nextui-org/react framer-motion",
    bun: "bun add @nextui-org/react framer-motion"
  }}
/>

#### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

#### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/installation) to install Tailwind CSS. Then you need to add
the following code to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {9,14-15}
// tailwind.config.js
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()],
};
```

#### Provider Setup

It is essential to add the `NextUIProvider` at the `root` of your application.

```jsx
import * as React from "react";

// 1. import `NextUIProvider` component
import {NextUIProvider} from "@nextui-org/react";

function App() {
  // 2. Wrap NextUIProvider at the root of your app
  return (
    <NextUIProvider>
      <YourApplication />
    </NextUIProvider>
  );
}
```

</Steps>

### Individual Installation

NextUI is also available as individual packages. You can install each package separately. This
is useful if you want to reduce the size of your CSS bundle as it will only include styles for the components
you're actually using.

<Blockquote color="primary">
**Note**: JavaScript bundle size will not change due to tree shaking support in NextUI.
</Blockquote>

Follow the steps below to install each package separately:

<Steps>

#### Install Core Packages

Although you can install each package separately, you need to install the core packages first
to ensure that all components work correctly.

Run one of the following commands in your terminal to install the core packages:

<PackageManagers
  commands={{
    npm: "npm install @nextui-org/theme @nextui-org/system framer-motion",
    yarn: "yarn add @nextui-org/theme @nextui-org/system framer-motion",
    pnpm: "pnpm add @nextui-org/theme @nextui-org/system framer-motion",
    bun: "bun add @nextui-org/theme @nextui-org/system framer-motion"
  }}
/>

#### Install Component

Now, let's install the component you want to use. For example, if you want to use the
[Button](/docs/components/button) component, you need to run one of the following commands
in your terminal:

<PackageManagers
  commands={{
    npm: "npm install @nextui-org/button",
    yarn: "yarn add @nextui-org/button",
    pnpm: "pnpm add @nextui-org/button",
    bun: "bun add @nextui-org/button"
  }}
/>

#### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

#### Tailwind CSS Setup

TailwindCSS setup changes a bit when you use individual packages. You only need to add the
styles of the components you're using to your `tailwind.config.js` file. For example, for the
[Button](/docs/components/button) component, you need to add the following code to your
`tailwind.config.js` file:

```js {8,10,16}
// tailwind.config.js
const {nextui} = require("@nextui-org/theme");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // single component styles
    "./node_modules/@nextui-org/theme/dist/components/button.js",
    // or you can use a glob pattern (multiple component styles)
    './node_modules/@nextui-org/theme/dist/components/(button|snippet|code|input).js'
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()],
};
```

#### Provider Setup

It is essential to add the `NextUIProvider` at the `root` of your application.

```jsx
import * as React from "react";

// 1. import `NextUIProvider` component
import {NextUIProvider} from "@nextui-org/system";

function App() {
  // 2. Wrap NextUIProvider at the root of your app
  return (
    <NextUIProvider>
      <YourApplication />
    </NextUIProvider>
  );
}
```

#### Use the Component

Now, you can use the component you installed in your application:

```jsx
import * as React from "react";
import {Button} from "@nextui-org/button";

function App() {
  return (
    <Button>Press me</Button>
  );
}
```
</Steps>

<Blockquote color="warning">
  Version 2 is only compatible with React 18 or later. If you are using React 17 or earlier, please
  use <Link href="https://v1.nextui.org/docs/getting-started" isExternal> version 1 of NextUI</Link>.
</Blockquote>

## Framework Guides

NextUI UI is compatible with your preferred framework. We have compiled comprehensive, step-by-step tutorials for the following frameworks:

<Frameworks />

---
title: Introduction
description: NextUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of Tailwind CSS and React Aria.
---

# Introduction

Welcome to the NextUI documentation!

<NextImage
  priority
  src="https://nextui.org/nextui-banner.png"
  quality={100}
  width={700}
  height={350}
  alt="NextUI banner"
  className="w-full border border-transparent dark:border-default-200/50 object-fit rounded-xl shadow-lg"
/>

## What is NextUI?

NextUI is a UI library for React that helps you build beautiful and accessible user interfaces. Created on top of
[Tailwind CSS](https://tailwindcss.com/) and [React Aria](https://react-spectrum.adobe.com/react-aria/index.html).

NextUI's primary goal is to streamline the development process, offering a beautiful and adaptable system design for an enhanced user experience.

---

## FAQ

### Is NextUI a Vercel related project?

<div className="text-default-500">
  No, NextUI is an independent community project and is not related to Vercel.
</div>

### How is NextUI different from TailwindCSS?

- **TailwindCSS**:

  <div className="text-default-500">
    Tailwind CSS is a CSS Framework that provides atomic CSS classes to help you style components,
    leaving you to handle lots of other things like accessibility, component composition, keyboard
    navigation, style overrides, etc.
  </div>

- **NextUI**:
  <div className="text-default-500">
    NextUI is a UI library for React that combines the power of TailwindCSS with React Aria to
    provide complete components (logic and styles) for building accessible and customizable user
    interfaces. Since NextUI uses TailwindCSS as its style engine, you can use all TailwindCSS
    classes within your NextUI components, ensuring optimal compiled CSS size.
  </div>

### How is NextUI different from TailwindCSS components libraries?

<div className="text-default-500">
  TailwindCSS components libraries such as{" "}
  <Link isExternal showAnchorIcon href="https://tailwindui.com/">TailwindUI</Link>,{" "}
  <Link isExternal showAnchorIcon href="https://flowbite.com/">Flowbite</Link>, or{" "}
  <Link isExternal showAnchorIcon href="https://preline.co/">Preline</Link>, just to name a few, only offer a curated selection of TailwindCSS classes to style your components.
  They don't provide any React specific components, logic, props, composition, or accessibility features.<br/>
  <Spacer y={2}/>
  In contrast to these libraries, NextUI is a complete UI library that provides a set of accessible and
  customizable components, hooks, and utilities.
</div>

### How NextUI deals with TailwindCSS classes conflicts?

<div className="text-default-500">
  We created a TailwindCSS utility library called{" "}
  <Link isExternal showAnchorIcon href="https://www.tailwind-variants.org/">tailwind-variants</Link>{" "}
  that automatically handles TailwindCSS class conflicts. This ensures your custom classes will
  consistently override the default ones, eliminating any duplication.
</div>

### Does NextUI use runtime CSS?

<div className="text-default-500">
  No. As NextUI uses TailwindCSS as its style engine, it generates CSS at build time, eliminating
  the need for runtime CSS. This means that NextUI is fully compatible with the latest React and
  Next.js versions.
</div>

### Does NextUI support TypeScript?

<div className="text-default-500">
  Yes, NextUI is written in TypeScript and has full support for it.
</div>

### Can I use NextUI with other front-end frameworks or libraries, such as Vue or Angular?

<div className="text-default-500">
  No, NextUI is specifically designed for React as it is built on top of React Aria. However, you
  can still use the NextUI components styling part with other frameworks or libraries.
</div>

### Why does NextUI use Framer Motion?

<div className="text-default-500">
  We use <Link href="https://www.framer.com/motion" isExternal showAnchorIcon>Framer Motion</Link> to animate some components due to
  the complexity of the animations and their physics-based nature. Framer Motion allows us to
  handle these animations in a more straightforward and performant way. In addition, it is
  well tested and production ready.
</div>

---

## Community

We're excited to see the community adopt NextUI, raise issues, and provide feedback.
Whether it's a feature request, bug report, or a project to showcase, please get involved!

<Community />

## Contributing

PRs on NextUI are always welcome, please see our [contribution guidelines](https://github.com/nextui-org/nextui/blob/main/CONTRIBUTING.md) to learn how you can contribute to this project.

---
title: Routing
description: Learn how to integrate client side routing into your NextUI application.
---

# Routing

NextUI Components such as [Tabs](/docs/components/tabs), [Listbox](/docs/components/listbox), [Dropdown](/docs/components/dropdown) and many others offer
the flexibility to be rendered as HTML links. Explore this page to learn how to integrate them with client side routing.

## Introduction

By default, links perform native browser navigation when they are interacted with. However, many apps and
frameworks use client side routers to avoid a full page reload when navigating between pages. The `NextUIProvider`
component configures all NextUI components within it to navigate using the client side router you provide.

Set this up once in the root of your app, and any NextUI component with the href prop will automatically navigate
using your router.

### NextUIProvider Setup

The `NextUIProvider` accepts a prop called `navigate`. This should be set to a function received from your
router for performing a client side navigation programmatically. The following example shows the general
pattern. Framework-specific examples are shown below.

```jsx
import * as React from "react";

// 1. import `NextUIProvider` component
import {NextUIProvider} from "@nextui-org/react";

function App() {
  const navigate = useNavigateFromYourRouter();

  // 2. Add the `navigate` function to the `NextUIProvider`
  return (
    <NextUIProvider navigate={navigate}>
      <YourApplication />
    </NextUIProvider>
  );
}
```

<Spacer y={2} />

### Next.js 

#### App Router

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and add the
`useRouter` hook from `next/navigation`, it returns a router object that can be used to perform navigation.

<Steps>

#### Add the `useRouter`

```tsx {8}
// app/providers.tsx
'use client'

import {NextUIProvider} from '@nextui-org/react';
import {useRouter} from 'next/navigation'

export function Providers({children}: { children: React.ReactNode }) {
  const router = useRouter();

  return (
    <NextUIProvider navigate={router.push}>
      {children}
    </NextUIProvider>
  )
}
```

#### Add Provider to Root

Now, Go to your `root` layout page and wrap it with the `NextUIProvider`:

```tsx {6,8,10}
// app/layout.tsx
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

> **Note**: Skip this step if you already set up the `NextUIProvider` in your app.

</Steps>

#### Pages Router

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook 
from `next/router`, it returns a router object that can be used to perform navigation.


```tsx {7}
// pages/_app.tsx
import type { AppProps } from 'next/app';
import {NextUIProvider} from '@nextui-org/react';
import {useRouter} from 'next/router';

function MyApp({ Component, pageProps }: AppProps) {
  const router = useRouter();

  return (
    <NextUIProvider navigate={router.push}>
      <Component {...pageProps} />
    </NextUIProvider>
  )
}

export default MyApp;
```

### React Router

The `useNavigate` hook from `react-router-dom` returns a `navigate` function that can be used to perform navigation.

Go to the `App` file commonly called `App.jsx` or `App.tsx`, add the `useNavigate` hook and pass the 
`navigate` function to the `NextUIProvider`:

```jsx {6,9}
// App.tsx or App.jsx
import {BrowserRouter, useNavigate} from 'react-router-dom';
import {NextUIProvider} from '@nextui-org/react';

function App() {
  const navigate = useNavigate();

  return (
    <NextUIProvider navigate={navigate}>
      {/* Your app here... */}
      <Routes>
        <Route path="/" element={<HomePage />} />
        {/* ... */}
      </Routes>
    </NextUIProvider>
  );
}


// main.tsx or main.jsx
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)
```

Ensure that the component that calls `useNavigate` and renders `NextUIProvider` is inside the router 
component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>` 
element should also be defined inside `NextUIProvider` so that links inside the rendered routes have access
to the router.


### Remix

Remix uses React Router under the hood, so the same `useNavigate` hook described above also works in Remix 
apps. `NextUIProvider` should be rendered at the `root` of each page that includes NextUI components, or in 
`app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root) 
for more details.

```jsx {14}
// app/root.tsx
import {useNavigate, Outlet} from '@remix-run/react';
import {NextUIProvider} from '@nextui-org/react';

export default function App() {
  const navigate = useNavigate();

  return (
    <html lang="en">
      <head>
        {/* ... */}
      </head>
      <body>
        <NextUIProvider navigate={navigate}>
          <Outlet />
        </NextUIProvider>
        {/* ... */}
      </body>
    </html>
  );
}
```


### Usage examples

Now that you have set up the `NextUIProvider` in your app, you can use the `href` prop in the `Tabs`, 
`Listbox` and `Dropdown` items to navigate between pages.

The [Link](/docs/components/link) component will also use the `navigate` function from the
`NextUIProvider` to navigate between pages.


```jsx
import {
  Tabs,
  Tab,
  Listbox,
  ListboxItem,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Button,
  Link,
} from "@nextui-org/react";

function App() {
  return (
    <>
      <Tabs aria-label="Navigation">
        <Tab key="home" href="/home">Home</Tab>
        <Tab key="about" href="/about">About</Tab>
      </Tabs>
      <Listbox aria-label="Navigation">
        <ListboxItem key="home" href="/home">Home</ListboxItem>
        <ListboxItem key="about" href="/about">About</ListboxItem>
      </Listbox>
      <Dropdown>
        <DropdownTrigger>
          <Button>Open</Button>
        </DropdownTrigger>
        <DropdownMenu aria-label="Navigation">
          <DropdownItem key="home" href="/home">Home</DropdownItem>
          <DropdownItem key="about" href="/about">About</DropdownItem>
        </DropdownMenu>
      </Dropdown>
      <Link href="/home">Home</Link>
      <Link href="/about">About</Link>
    </>
  );
}
```
---
title: Upgrade to v2
description: Upgrade from NextUI v1 to v2
---


# Upgrade to v2

Requirements:

- [React 18](https://reactjs.org/) or later
- [Tailwind CSS 3.4](https://tailwindcss.com/) or later
- [Framer Motion 11](https://www.framer.com/motion/) or later

----- 



## Next.js upgrade steps

Make sure to follow the previous steps since they are required to upgrade to v2.


## App directory Setup

Next.js 13 introduces a new `app/` directory structure. By default it uses Server Components. 
As NextUI components use React hooks, we added the `use client;` at build time, so you can import them
directly in your React Server Components (RSC).

<Steps>

### Installation

In your Next.js project, run one of the following command to install NextUI:


<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:


```js {9,14-15}
// tailwind.config.js
const { nextui } = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}
```

### Setup Provider

Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:

```jsx
// app/providers.tsx
'use client'

import {NextUIProvider} from '@nextui-org/react'

export function Providers({children}: { children: React.ReactNode }) {
  return (
    <NextUIProvider>
      {children}
    </NextUIProvider>
  )
}
```

### Add Provider to Root

Now, Go to your `root` layout page and wrap it with the `NextUIProvider`:

```jsx {6,8,10}
// app/layout.tsx
import {Providers} from "./providers";

export default function RootLayout({children}: { children: React.ReactNode }) {
  return (
    <html lang="en" className='dark'>
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

> **Note**: NextUI automatically add two themes `light` and `dark` to your application. You can use any 
of them by adding the `dark`/`light` class to the `html` tag. See the [theme docs](/docs/customization/customize-theme) for more details.


### Use NextUI Components

Now you can import any NextUI component directly in your Server Components without needing to use
the `use client;` directive:

```jsx {2}
// app/page.tsx
import {Button} from '@nextui-org/button'

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

> **Important 🚨**: Note that you need to import the component from the individual package, not the from `@nextui-org/react`. 

</Steps>

<Spacer y={8} />

## Pages Directory Setup 

<Steps>

### Installation

In your Next.js project, run one of the following command to install NextUI:


<PackageManagers
  commands={{
    npm: 'npm i @nextui-org/react framer-motion',
    yarn: 'yarn add @nextui-org/react framer-motion',
    pnpm: 'pnpm add @nextui-org/react framer-motion',
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### Tailwind CSS Setup

NextUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official
[installation guide](https://tailwindcss.com/docs/guides/nextjs) to install Tailwind CSS. Then you need to add 
the following code to your `tailwind.config.js` file:


```js {9,14-15}
// tailwind.config.js
const { nextui } = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}
```

### Setup Provider

Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and wrap the Component with the `NextUIProvider`:

```jsx
// pages/_app.js
import {NextUIProvider} from '@nextui-org/react'

function MyApp({ Component, pageProps }) {
  return (
    <NextUIProvider>
      <Component {...pageProps} />
    </NextUIProvider>
  )
}

export default MyApp;
```

### Use NextUI Components

Now you can import any NextUI component wherever you want:

```jsx
import {Button} from '@nextui-org/react'

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

</Steps>

## React upgrade steps

<Steps>

### Upgrade React version

NextUI v2 requires React 18 or later. To upgrade React, run the following command:

<PackageManagers
  commands={{
    npm: 'npm i react@latest react-dom@latest',
    yarn: 'yarn add react@latest react-dom@latest',
    pnpm: 'pnpm add react@latest react-dom@latest',
  }}
/>

### Install Framer motion

In v2, NextUI now requires `framer-motion` as a dependency. To install both, use the following command:

<PackageManagers
  commands={{
    npm: 'npm i framer-motion',
    yarn: 'yarn add framer-motion',
    pnpm: 'pnpm add framer-motion',
  }}
/>

### Hoisted Dependencies Setup

<Blockquote color="primary">
**Note**: This step is only for those who use pnpm to install. If you install NextUI using other package managers, you may skip this step.
</Blockquote>

If you are using pnpm, you need to add the following line to your `.npmrc` file to hoist our packages to the root `node_modules`.

```bash
public-hoist-pattern[]=*@nextui-org/*
```

After modifying the `.npmrc` file, you need to run `pnpm install` again to ensure that the dependencies are installed correctly.

### TailwindCSS Setup

NextUI v2 now uses Tailwind CSS. Add the NextUI plugin to your `tailwind.config.js` file:

<Blockquote color="primary">
**Note**: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT `node_modules`
</Blockquote>

```js {9,14-15}
// tailwind.config.js
const { nextui } = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()]
}
```

### Provider Setup

Go to `root` file and wrap the Component with the `NextUIProvider`:

```jsx
// src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import {NextUIProvider} from '@nextui-org/react'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <NextUIProvider>
      <App />
    </NextUIProvider>
  </React.StrictMode>,
)
```

### Use NextUI Components

Now you can import any NextUI component wherever you want:

```jsx
import {Button} from '@nextui-org/react'

export default function Page() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

</Steps>

<Blockquote
 color="default"
>
  Please visit the <Link href="https://github.com/nextui-org/nextui/releases/tag/v2.0.0" showAnchorIcon isExternal>Release Notes</Link> for more information about the new features and breaking changes.
</Blockquote>


